/*******************************************************************************
 * This file was generated by GLBrebis on Thu, 29 Mar 2018 01:06:22 GMT
 * https://github.com/mchiasson/GLBrebis
 *******************************************************************************
 * GLBrebis License (MIT)
 *******************************************************************************
 * Copyright (c) 2017-2018 Mathieu-Andr√© Chiasson
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * 1. The above copyright notice and this permission notice shall be included in
 *    all copies or substantial portions of the Software.
 *
 * Disclaimer:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 ******************************************************************************/

#ifndef _PHASER_GL_H_
#define _PHASER_GL_H_ 1

#include <KHR/khrplatform.h>

#if defined(__glu_h__)
#error "GL/glu.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl_h_)
#error "GL/gl.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl2_h_)
#error "GL/gl2.h cannot be included before PhaserGL.h"
#endif

#if defined(__glcorearb_h_)
#error "GL/glcorearb.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl20_h_)
#error "GLES2/gl2.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl_es20_h_)
#error "OpenGLES/ES2/gl.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl30_h_)
#error "GLES3/gl3.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl_es30_h_)
#error "OpenGLES/ES3/gl.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl31_h_)
#error "GLES3/gl31.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl32_h_)
#error "GLES3/gl32.h cannot be included before PhaserGL.h"
#endif

#if defined(__glext_h_)
#error "GL/glext.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl2ext_h_)
#error "GL/glext.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl_es20ext_h_)
#error "OpenGLES/ES2/glext.h cannot be included before PhaserGL.h"
#endif

#if defined(__gl_es30ext_h_)
#error "OpenGLES/ES3/glext.h cannot be included before PhaserGL.h"
#endif

#if defined(__gltypes_h_)
#error "gltypes.h cannot be included before PhaserGL.h"
#endif

#define __glu_h__ 1
#define __gl_h_ 1
#define __gl2_h_ 1
#define __glcorearb_h_ 1
#define __gl20_h_ 1
#define __gl_es20_h_ 1
#define __gl30_h_ 1
#define __gl_es30_h_ 1
#define __gl31_h_ 1
#define __gl32_h_ 1
#define __glext_h_ 1
#define __gl2ext_h_ 1
#define __gl_es20ext_h_ 1
#define __gl_es30ext_h_ 1
#define __gltypes_h_ 1

#if !defined(PHASER_PROTO_IMPL)
    #define PHASER_PROTO_IMPL 1
#endif

#if !defined(PHASER_FORCE_INLINE)
    #if defined(_MSC_VER)
        #define PHASER_FORCE_INLINE __forceinline
    #elif ( (defined(__GNUC__) && (__GNUC__ >= 4) ) || defined(__clang__) )
        #define PHASER_FORCE_INLINE __attribute__((always_inline)) static __inline__
    #else
        #define PHASER_FORCE_INLINE static inline
    #endif
#endif

/* GL and GL ES Definitions */
#define GL_NEXT_BUFFER_NV -2
#define GL_SKIP_COMPONENTS4_NV -3
#define GL_SKIP_COMPONENTS3_NV -4
#define GL_SKIP_COMPONENTS2_NV -5
#define GL_SKIP_COMPONENTS1_NV -6
#define GL_FALSE 0
#define GL_LAYOUT_DEFAULT_INTEL 0
#define GL_NONE 0
#define GL_NONE_OES 0
#define GL_NO_ERROR 0
#define GL_ZERO 0
#define GL_KTX_FRONT_REGION 0x0
#define GL_CLOSE_PATH_NV 0x00
#define GL_POINTS 0x0000
#define GL_TERMINATE_SEQUENCE_COMMAND_NV 0x0000
#define GL_PERFQUERY_SINGLE_CONTEXT_INTEL 0x00000000
#define GL_2X_BIT_ATI 0x00000001
#define GL_CLIENT_PIXEL_STORE_BIT 0x00000001
#define GL_COLOR_BUFFER_BIT0_QCOM 0x00000001
#define GL_CONTEXT_CORE_PROFILE_BIT 0x00000001
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x00000001
#define GL_CURRENT_BIT 0x00000001
#define GL_FOVEATION_ENABLE_BIT_QCOM 0x00000001
#define GL_PERFQUERY_GLOBAL_CONTEXT_INTEL 0x00000001
#define GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD 0x00000001
#define GL_RED_BIT_ATI 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT 0x00000001
#define GL_SYNC_FLUSH_COMMANDS_BIT_APPLE 0x00000001
#define GL_TEXTURE_DEFORMATION_BIT_SGIX 0x00000001
#define GL_TEXTURE_STORAGE_SPARSE_BIT_AMD 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0x00000001
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
#define GL_VERTEX_SHADER_BIT 0x00000001
#define GL_VERTEX_SHADER_BIT_EXT 0x00000001
#define GL_4X_BIT_ATI 0x00000002
#define GL_CLIENT_VERTEX_ARRAY_BIT 0x00000002
#define GL_COLOR_BUFFER_BIT1_QCOM 0x00000002
#define GL_COMP_BIT_ATI 0x00000002
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT 0x00000002
#define GL_CONTEXT_FLAG_DEBUG_BIT_KHR 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT 0x00000002
#define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT 0x00000002
#define GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM 0x00000002
#define GL_FRAGMENT_SHADER_BIT 0x00000002
#define GL_FRAGMENT_SHADER_BIT_EXT 0x00000002
#define GL_GEOMETRY_DEFORMATION_BIT_SGIX 0x00000002
#define GL_GREEN_BIT_ATI 0x00000002
#define GL_POINT_BIT 0x00000002
#define GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD 0x00000002
#define GL_8X_BIT_ATI 0x00000004
#define GL_BLUE_BIT_ATI 0x00000004
#define GL_COLOR_BUFFER_BIT2_QCOM 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0x00000004
#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
#define GL_GEOMETRY_SHADER_BIT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_EXT 0x00000004
#define GL_GEOMETRY_SHADER_BIT_OES 0x00000004
#define GL_LINE_BIT 0x00000004
#define GL_NEGATE_BIT_ATI 0x00000004
#define GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD 0x00000004
#define GL_UNIFORM_BARRIER_BIT 0x00000004
#define GL_UNIFORM_BARRIER_BIT_EXT 0x00000004
#define GL_VERTEX23_BIT_PGI 0x00000004
#define GL_BIAS_BIT_ATI 0x00000008
#define GL_COLOR_BUFFER_BIT3_QCOM 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT 0x00000008
#define GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR 0x00000008
#define GL_HALF_BIT_ATI 0x00000008
#define GL_POLYGON_BIT 0x00000008
#define GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_EXT 0x00000008
#define GL_TESS_CONTROL_SHADER_BIT_OES 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT 0x00000008
#define GL_TEXTURE_FETCH_BARRIER_BIT_EXT 0x00000008
#define GL_VERTEX4_BIT_PGI 0x00000008
#define GL_COLOR_BUFFER_BIT4_QCOM 0x00000010
#define GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT 0x00000010
#define GL_POLYGON_STIPPLE_BIT 0x00000010
#define GL_QUARTER_BIT_ATI 0x00000010
#define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_EXT 0x00000010
#define GL_TESS_EVALUATION_SHADER_BIT_OES 0x00000010
#define GL_COLOR_BUFFER_BIT5_QCOM 0x00000020
#define GL_COMPUTE_SHADER_BIT 0x00000020
#define GL_EIGHTH_BIT_ATI 0x00000020
#define GL_PIXEL_MODE_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0x00000020
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
#define GL_COLOR_BUFFER_BIT6_QCOM 0x00000040
#define GL_COMMAND_BARRIER_BIT 0x00000040
#define GL_COMMAND_BARRIER_BIT_EXT 0x00000040
#define GL_LIGHTING_BIT 0x00000040
#define GL_SATURATE_BIT_ATI 0x00000040
#define GL_COLOR_BUFFER_BIT7_QCOM 0x00000080
#define GL_FOG_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT 0x00000080
#define GL_PIXEL_BUFFER_BARRIER_BIT_EXT 0x00000080
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_BUFFER_BIT0_QCOM 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT 0x00000100
#define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
#define GL_ACCUM_BUFFER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT 0x00000200
#define GL_BUFFER_UPDATE_BARRIER_BIT_EXT 0x00000200
#define GL_DEPTH_BUFFER_BIT1_QCOM 0x00000200
#define GL_DEPTH_BUFFER_BIT2_QCOM 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT 0x00000400
#define GL_FRAMEBUFFER_BARRIER_BIT_EXT 0x00000400
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_DEPTH_BUFFER_BIT3_QCOM 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0x00000800
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
#define GL_VIEWPORT_BIT 0x00000800
#define GL_ATOMIC_COUNTER_BARRIER_BIT 0x00001000
#define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
#define GL_DEPTH_BUFFER_BIT4_QCOM 0x00001000
#define GL_TRANSFORM_BIT 0x00001000
#define GL_DEPTH_BUFFER_BIT5_QCOM 0x00002000
#define GL_ENABLE_BIT 0x00002000
#define GL_SHADER_STORAGE_BARRIER_BIT 0x00002000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0x00004000
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT 0x00004000
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_DEPTH_BUFFER_BIT6_QCOM 0x00004000
#define GL_COVERAGE_BUFFER_BIT_NV 0x00008000
#define GL_DEPTH_BUFFER_BIT7_QCOM 0x00008000
#define GL_HINT_BIT 0x00008000
#define GL_QUERY_BUFFER_BARRIER_BIT 0x00008000
#define GL_LINES 0x0001
#define GL_MAP_READ_BIT 0x0001
#define GL_MAP_READ_BIT_EXT 0x0001
#define GL_NOP_COMMAND_NV 0x0001
#define GL_RESTART_SUN 0x0001
#define GL_TRACE_OPERATIONS_BIT_MESA 0x0001
#define GL_COLOR3_BIT_PGI 0x00010000
#define GL_EVAL_BIT 0x00010000
#define GL_FONT_X_MIN_BOUNDS_BIT_NV 0x00010000
#define GL_STENCIL_BUFFER_BIT0_QCOM 0x00010000
#define GL_DRAW_ELEMENTS_COMMAND_NV 0x0002
#define GL_LINE_LOOP 0x0002
#define GL_MAP_WRITE_BIT 0x0002
#define GL_MAP_WRITE_BIT_EXT 0x0002
#define GL_REPLACE_MIDDLE_SUN 0x0002
#define GL_TRACE_PRIMITIVES_BIT_MESA 0x0002
#define GL_COLOR4_BIT_PGI 0x00020000
#define GL_FONT_Y_MIN_BOUNDS_BIT_NV 0x00020000
#define GL_LIST_BIT 0x00020000
#define GL_STENCIL_BUFFER_BIT1_QCOM 0x00020000
#define GL_DRAW_ARRAYS_COMMAND_NV 0x0003
#define GL_LINE_STRIP 0x0003
#define GL_REPLACE_OLDEST_SUN 0x0003
#define GL_DRAW_ELEMENTS_STRIP_COMMAND_NV 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT 0x0004
#define GL_MAP_INVALIDATE_RANGE_BIT_EXT 0x0004
#define GL_TRACE_ARRAYS_BIT_MESA 0x0004
#define GL_TRIANGLES 0x0004
#define GL_EDGEFLAG_BIT_PGI 0x00040000
#define GL_FONT_X_MAX_BOUNDS_BIT_NV 0x00040000
#define GL_STENCIL_BUFFER_BIT2_QCOM 0x00040000
#define GL_TEXTURE_BIT 0x00040000
#define GL_DRAW_ARRAYS_STRIP_COMMAND_NV 0x0005
#define GL_TRIANGLE_STRIP 0x0005
#define GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV 0x0006
#define GL_TRIANGLE_FAN 0x0006
#define GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV 0x0007
#define GL_QUADS 0x0007
#define GL_QUADS_EXT 0x0007
#define GL_QUADS_OES 0x0007
#define GL_ELEMENT_ADDRESS_COMMAND_NV 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT 0x0008
#define GL_MAP_INVALIDATE_BUFFER_BIT_EXT 0x0008
#define GL_QUAD_STRIP 0x0008
#define GL_TRACE_TEXTURES_BIT_MESA 0x0008
#define GL_FONT_Y_MAX_BOUNDS_BIT_NV 0x00080000
#define GL_INDEX_BIT_PGI 0x00080000
#define GL_SCISSOR_BIT 0x00080000
#define GL_STENCIL_BUFFER_BIT3_QCOM 0x00080000
#define GL_ATTRIBUTE_ADDRESS_COMMAND_NV 0x0009
#define GL_POLYGON 0x0009
#define GL_LINES_ADJACENCY 0x000A
#define GL_LINES_ADJACENCY_ARB 0x000A
#define GL_LINES_ADJACENCY_EXT 0x000A
#define GL_LINES_ADJACENCY_OES 0x000A
#define GL_UNIFORM_ADDRESS_COMMAND_NV 0x000A
#define GL_BLEND_COLOR_COMMAND_NV 0x000B
#define GL_LINE_STRIP_ADJACENCY 0x000B
#define GL_LINE_STRIP_ADJACENCY_ARB 0x000B
#define GL_LINE_STRIP_ADJACENCY_EXT 0x000B
#define GL_LINE_STRIP_ADJACENCY_OES 0x000B
#define GL_STENCIL_REF_COMMAND_NV 0x000C
#define GL_TRIANGLES_ADJACENCY 0x000C
#define GL_TRIANGLES_ADJACENCY_ARB 0x000C
#define GL_TRIANGLES_ADJACENCY_EXT 0x000C
#define GL_TRIANGLES_ADJACENCY_OES 0x000C
#define GL_LINE_WIDTH_COMMAND_NV 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_ARB 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_EXT 0x000D
#define GL_TRIANGLE_STRIP_ADJACENCY_OES 0x000D
#define GL_PATCHES 0x000E
#define GL_PATCHES_EXT 0x000E
#define GL_PATCHES_OES 0x000E
#define GL_POLYGON_OFFSET_COMMAND_NV 0x000E
#define GL_ALPHA_REF_COMMAND_NV 0x000F
#define GL_MAP_FLUSH_EXPLICIT_BIT 0x0010
#define GL_MAP_FLUSH_EXPLICIT_BIT_EXT 0x0010
#define GL_TRACE_PIXELS_BIT_MESA 0x0010
#define GL_VIEWPORT_COMMAND_NV 0x0010
#define GL_FONT_UNITS_PER_EM_BIT_NV 0x00100000
#define GL_MAT_AMBIENT_BIT_PGI 0x00100000
#define GL_STENCIL_BUFFER_BIT4_QCOM 0x00100000
#define GL_SCISSOR_COMMAND_NV 0x0011
#define GL_FRONT_FACE_COMMAND_NV 0x0012
#define GL_MAP_UNSYNCHRONIZED_BIT 0x0020
#define GL_MAP_UNSYNCHRONIZED_BIT_EXT 0x0020
#define GL_TRACE_ERRORS_BIT_MESA 0x0020
#define GL_FONT_ASCENDER_BIT_NV 0x00200000
#define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
#define GL_STENCIL_BUFFER_BIT5_QCOM 0x00200000
#define GL_MAP_PERSISTENT_BIT 0x0040
#define GL_MAP_PERSISTENT_BIT_EXT 0x0040
#define GL_FONT_DESCENDER_BIT_NV 0x00400000
#define GL_MAT_DIFFUSE_BIT_PGI 0x00400000
#define GL_STENCIL_BUFFER_BIT6_QCOM 0x00400000
#define GL_MAP_COHERENT_BIT 0x0080
#define GL_MAP_COHERENT_BIT_EXT 0x0080
#define GL_FONT_HEIGHT_BIT_NV 0x00800000
#define GL_MAT_EMISSION_BIT_PGI 0x00800000
#define GL_STENCIL_BUFFER_BIT7_QCOM 0x00800000
#define GL_BOLD_BIT_NV 0x01
#define GL_GLYPH_WIDTH_BIT_NV 0x01
#define GL_ACCUM 0x0100
#define GL_DYNAMIC_STORAGE_BIT 0x0100
#define GL_DYNAMIC_STORAGE_BIT_EXT 0x0100
#define GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV 0x01000000
#define GL_MAT_COLOR_INDEXES_BIT_PGI 0x01000000
#define GL_MULTISAMPLE_BUFFER_BIT0_QCOM 0x01000000
#define GL_LOAD 0x0101
#define GL_RETURN 0x0102
#define GL_MULT 0x0103
#define GL_ADD 0x0104
#define GL_GLYPH_HEIGHT_BIT_NV 0x02
#define GL_ITALIC_BIT_NV 0x02
#define GL_MOVE_TO_NV 0x02
#define GL_CLIENT_STORAGE_BIT 0x0200
#define GL_CLIENT_STORAGE_BIT_EXT 0x0200
#define GL_NEVER 0x0200
#define GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV 0x02000000
#define GL_MAT_SHININESS_BIT_PGI 0x02000000
#define GL_MULTISAMPLE_BUFFER_BIT1_QCOM 0x02000000
#define GL_LESS 0x0201
#define GL_EQUAL 0x0202
#define GL_LEQUAL 0x0203
#define GL_GREATER 0x0204
#define GL_NOTEQUAL 0x0205
#define GL_GEQUAL 0x0206
#define GL_ALWAYS 0x0207
#define GL_RELATIVE_MOVE_TO_NV 0x03
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_ALPHA_SATURATE_EXT 0x0308
#define GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV 0x04
#define GL_LINE_TO_NV 0x04
#define GL_FRONT_LEFT 0x0400
#define GL_SPARSE_STORAGE_BIT_ARB 0x0400
#define GL_FONT_UNDERLINE_POSITION_BIT_NV 0x04000000
#define GL_MAT_SPECULAR_BIT_PGI 0x04000000
#define GL_MULTISAMPLE_BUFFER_BIT2_QCOM 0x04000000
#define GL_FRONT_RIGHT 0x0401
#define GL_BACK_LEFT 0x0402
#define GL_BACK_RIGHT 0x0403
#define GL_FRONT 0x0404
#define GL_BACK 0x0405
#define GL_LEFT 0x0406
#define GL_RIGHT 0x0407
#define GL_FRONT_AND_BACK 0x0408
#define GL_AUX0 0x0409
#define GL_AUX1 0x040A
#define GL_AUX2 0x040B
#define GL_AUX3 0x040C
#define GL_RELATIVE_LINE_TO_NV 0x05
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_VALUE 0x0501
#define GL_INVALID_OPERATION 0x0502
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_OVERFLOW_KHR 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STACK_UNDERFLOW_KHR 0x0504
#define GL_OUT_OF_MEMORY 0x0505
#define GL_INVALID_FRAMEBUFFER_OPERATION 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
#define GL_INVALID_FRAMEBUFFER_OPERATION_OES 0x0506
#define GL_CONTEXT_LOST 0x0507
#define GL_CONTEXT_LOST_KHR 0x0507
#define GL_HORIZONTAL_LINE_TO_NV 0x06
#define GL_2D 0x0600
#define GL_3D 0x0601
#define GL_3D_COLOR 0x0602
#define GL_3D_COLOR_TEXTURE 0x0603
#define GL_4D_COLOR_TEXTURE 0x0604
#define GL_RELATIVE_HORIZONTAL_LINE_TO_NV 0x07
#define GL_PASS_THROUGH_TOKEN 0x0700
#define GL_POINT_TOKEN 0x0701
#define GL_LINE_TOKEN 0x0702
#define GL_POLYGON_TOKEN 0x0703
#define GL_BITMAP_TOKEN 0x0704
#define GL_DRAW_PIXEL_TOKEN 0x0705
#define GL_COPY_PIXEL_TOKEN 0x0706
#define GL_LINE_RESET_TOKEN 0x0707
#define GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV 0x08
#define GL_VERTICAL_LINE_TO_NV 0x08
#define GL_EXP 0x0800
#define GL_LGPU_SEPARATE_STORAGE_BIT_NVX 0x0800
#define GL_PER_GPU_STORAGE_BIT_NV 0x0800
#define GL_FONT_UNDERLINE_THICKNESS_BIT_NV 0x08000000
#define GL_MULTISAMPLE_BUFFER_BIT3_QCOM 0x08000000
#define GL_NORMAL_BIT_PGI 0x08000000
#define GL_EXP2 0x0801
#define GL_RELATIVE_VERTICAL_LINE_TO_NV 0x09
#define GL_CW 0x0900
#define GL_CCW 0x0901
#define GL_QUADRATIC_CURVE_TO_NV 0x0A
#define GL_COEFF 0x0A00
#define GL_ORDER 0x0A01
#define GL_DOMAIN 0x0A02
#define GL_RELATIVE_QUADRATIC_CURVE_TO_NV 0x0B
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_INDEX 0x0B01
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CURRENT_RASTER_COLOR 0x0B04
#define GL_CURRENT_RASTER_INDEX 0x0B05
#define GL_CURRENT_RASTER_TEXTURE_COORDS 0x0B06
#define GL_CURRENT_RASTER_POSITION 0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID 0x0B08
#define GL_CURRENT_RASTER_DISTANCE 0x0B09
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SIZE_GRANULARITY 0x0B13
#define GL_SMOOTH_POINT_SIZE_GRANULARITY 0x0B13
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0x0B23
#define GL_LINE_STIPPLE 0x0B24
#define GL_LINE_STIPPLE_PATTERN 0x0B25
#define GL_LINE_STIPPLE_REPEAT 0x0B26
#define GL_LIST_MODE 0x0B30
#define GL_MAX_LIST_NESTING 0x0B31
#define GL_LIST_BASE 0x0B32
#define GL_LIST_INDEX 0x0B33
#define GL_POLYGON_MODE 0x0B40
#define GL_POLYGON_MODE_NV 0x0B40
#define GL_POLYGON_SMOOTH 0x0B41
#define GL_POLYGON_STIPPLE 0x0B42
#define GL_EDGE_FLAG 0x0B43
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_FRONT_FACE 0x0B46
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_LOCAL_VIEWER 0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_SHADE_MODEL 0x0B54
#define GL_COLOR_MATERIAL_FACE 0x0B55
#define GL_COLOR_MATERIAL_PARAMETER 0x0B56
#define GL_COLOR_MATERIAL 0x0B57
#define GL_FOG 0x0B60
#define GL_FOG_INDEX 0x0B61
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_START 0x0B63
#define GL_FOG_END 0x0B64
#define GL_FOG_MODE 0x0B65
#define GL_FOG_COLOR 0x0B66
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_ACCUM_CLEAR_VALUE 0x0B80
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_MATRIX_MODE 0x0BA0
#define GL_NORMALIZE 0x0BA1
#define GL_VIEWPORT 0x0BA2
#define GL_MODELVIEW0_STACK_DEPTH_EXT 0x0BA3
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_PATH_MODELVIEW_STACK_DEPTH_NV 0x0BA3
#define GL_PATH_PROJECTION_STACK_DEPTH_NV 0x0BA4
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_MODELVIEW0_MATRIX_EXT 0x0BA6
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_PATH_MODELVIEW_MATRIX_NV 0x0BA6
#define GL_PATH_PROJECTION_MATRIX_NV 0x0BA7
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_ATTRIB_STACK_DEPTH 0x0BB0
#define GL_CLIENT_ATTRIB_STACK_DEPTH 0x0BB1
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_QCOM 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_FUNC_QCOM 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALPHA_TEST_REF_QCOM 0x0BC2
#define GL_DITHER 0x0BD0
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLEND 0x0BE2
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_INDEX_LOGIC_OP 0x0BF1
#define GL_LOGIC_OP 0x0BF1
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_CUBIC_CURVE_TO_NV 0x0C
#define GL_AUX_BUFFERS 0x0C00
#define GL_DRAW_BUFFER 0x0C01
#define GL_DRAW_BUFFER_EXT 0x0C01
#define GL_READ_BUFFER 0x0C02
#define GL_READ_BUFFER_EXT 0x0C02
#define GL_READ_BUFFER_NV 0x0C02
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_INDEX_CLEAR_VALUE 0x0C20
#define GL_INDEX_WRITEMASK 0x0C21
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_INDEX_MODE 0x0C30
#define GL_RGBA_MODE 0x0C31
#define GL_DOUBLEBUFFER 0x0C32
#define GL_STEREO 0x0C33
#define GL_RENDER_MODE 0x0C40
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_POLYGON_SMOOTH_HINT 0x0C53
#define GL_FOG_HINT 0x0C54
#define GL_TEXTURE_GEN_S 0x0C60
#define GL_TEXTURE_GEN_T 0x0C61
#define GL_TEXTURE_GEN_R 0x0C62
#define GL_TEXTURE_GEN_Q 0x0C63
#define GL_PIXEL_MAP_I_TO_I 0x0C70
#define GL_PIXEL_MAP_S_TO_S 0x0C71
#define GL_PIXEL_MAP_I_TO_R 0x0C72
#define GL_PIXEL_MAP_I_TO_G 0x0C73
#define GL_PIXEL_MAP_I_TO_B 0x0C74
#define GL_PIXEL_MAP_I_TO_A 0x0C75
#define GL_PIXEL_MAP_R_TO_R 0x0C76
#define GL_PIXEL_MAP_G_TO_G 0x0C77
#define GL_PIXEL_MAP_B_TO_B 0x0C78
#define GL_PIXEL_MAP_A_TO_A 0x0C79
#define GL_PIXEL_MAP_I_TO_I_SIZE 0x0CB0
#define GL_PIXEL_MAP_S_TO_S_SIZE 0x0CB1
#define GL_PIXEL_MAP_I_TO_R_SIZE 0x0CB2
#define GL_PIXEL_MAP_I_TO_G_SIZE 0x0CB3
#define GL_PIXEL_MAP_I_TO_B_SIZE 0x0CB4
#define GL_PIXEL_MAP_I_TO_A_SIZE 0x0CB5
#define GL_PIXEL_MAP_R_TO_R_SIZE 0x0CB6
#define GL_PIXEL_MAP_G_TO_G_SIZE 0x0CB7
#define GL_PIXEL_MAP_B_TO_B_SIZE 0x0CB8
#define GL_PIXEL_MAP_A_TO_A_SIZE 0x0CB9
#define GL_UNPACK_SWAP_BYTES 0x0CF0
#define GL_UNPACK_LSB_FIRST 0x0CF1
#define GL_UNPACK_ROW_LENGTH 0x0CF2
#define GL_UNPACK_ROW_LENGTH_EXT 0x0CF2
#define GL_UNPACK_SKIP_ROWS 0x0CF3
#define GL_UNPACK_SKIP_ROWS_EXT 0x0CF3
#define GL_UNPACK_SKIP_PIXELS 0x0CF4
#define GL_UNPACK_SKIP_PIXELS_EXT 0x0CF4
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_RELATIVE_CUBIC_CURVE_TO_NV 0x0D
#define GL_PACK_SWAP_BYTES 0x0D00
#define GL_PACK_LSB_FIRST 0x0D01
#define GL_PACK_ROW_LENGTH 0x0D02
#define GL_PACK_SKIP_ROWS 0x0D03
#define GL_PACK_SKIP_PIXELS 0x0D04
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_MAP_COLOR 0x0D10
#define GL_MAP_STENCIL 0x0D11
#define GL_INDEX_SHIFT 0x0D12
#define GL_INDEX_OFFSET 0x0D13
#define GL_RED_SCALE 0x0D14
#define GL_RED_BIAS 0x0D15
#define GL_ZOOM_X 0x0D16
#define GL_ZOOM_Y 0x0D17
#define GL_GREEN_SCALE 0x0D18
#define GL_GREEN_BIAS 0x0D19
#define GL_BLUE_SCALE 0x0D1A
#define GL_BLUE_BIAS 0x0D1B
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_BIAS 0x0D1D
#define GL_DEPTH_SCALE 0x0D1E
#define GL_DEPTH_BIAS 0x0D1F
#define GL_MAX_EVAL_ORDER 0x0D30
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_CLIP_DISTANCES 0x0D32
#define GL_MAX_CLIP_DISTANCES_APPLE 0x0D32
#define GL_MAX_CLIP_DISTANCES_EXT 0x0D32
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_CLIP_PLANES_IMG 0x0D32
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_PIXEL_MAP_TABLE 0x0D34
#define GL_MAX_ATTRIB_STACK_DEPTH 0x0D35
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV 0x0D36
#define GL_MAX_NAME_STACK_DEPTH 0x0D37
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV 0x0D38
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH 0x0D3B
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_INDEX_BITS 0x0D51
#define GL_RED_BITS 0x0D52
#define GL_GREEN_BITS 0x0D53
#define GL_BLUE_BITS 0x0D54
#define GL_ALPHA_BITS 0x0D55
#define GL_DEPTH_BITS 0x0D56
#define GL_STENCIL_BITS 0x0D57
#define GL_ACCUM_RED_BITS 0x0D58
#define GL_ACCUM_GREEN_BITS 0x0D59
#define GL_ACCUM_BLUE_BITS 0x0D5A
#define GL_ACCUM_ALPHA_BITS 0x0D5B
#define GL_NAME_STACK_DEPTH 0x0D70
#define GL_AUTO_NORMAL 0x0D80
#define GL_MAP1_COLOR_4 0x0D90
#define GL_MAP1_INDEX 0x0D91
#define GL_MAP1_NORMAL 0x0D92
#define GL_MAP1_TEXTURE_COORD_1 0x0D93
#define GL_MAP1_TEXTURE_COORD_2 0x0D94
#define GL_MAP1_TEXTURE_COORD_3 0x0D95
#define GL_MAP1_TEXTURE_COORD_4 0x0D96
#define GL_MAP1_VERTEX_3 0x0D97
#define GL_MAP1_VERTEX_4 0x0D98
#define GL_MAP2_COLOR_4 0x0DB0
#define GL_MAP2_INDEX 0x0DB1
#define GL_MAP2_NORMAL 0x0DB2
#define GL_MAP2_TEXTURE_COORD_1 0x0DB3
#define GL_MAP2_TEXTURE_COORD_2 0x0DB4
#define GL_MAP2_TEXTURE_COORD_3 0x0DB5
#define GL_MAP2_TEXTURE_COORD_4 0x0DB6
#define GL_MAP2_VERTEX_3 0x0DB7
#define GL_MAP2_VERTEX_4 0x0DB8
#define GL_MAP1_GRID_DOMAIN 0x0DD0
#define GL_MAP1_GRID_SEGMENTS 0x0DD1
#define GL_MAP2_GRID_DOMAIN 0x0DD2
#define GL_MAP2_GRID_SEGMENTS 0x0DD3
#define GL_TEXTURE_1D 0x0DE0
#define GL_TEXTURE_2D 0x0DE1
#define GL_FEEDBACK_BUFFER_POINTER 0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE 0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE 0x0DF2
#define GL_SELECTION_BUFFER_POINTER 0x0DF3
#define GL_SELECTION_BUFFER_SIZE 0x0DF4
#define GL_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0E
#define GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV 0x0F
#define GL_KTX_BACK_REGION 0x1
#define GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV 0x10
#define GL_SMOOTH_CUBIC_CURVE_TO_NV 0x10
#define GL_GLYPH_HAS_KERNING_BIT_NV 0x100
#define GL_TEXTURE_WIDTH 0x1000
#define GL_FONT_HAS_KERNING_BIT_NV 0x10000000
#define GL_MULTISAMPLE_BUFFER_BIT4_QCOM 0x10000000
#define GL_TEXCOORD1_BIT_PGI 0x10000000
#define GL_TEXTURE_HEIGHT 0x1001
#define GL_TEXTURE_COMPONENTS 0x1003
#define GL_TEXTURE_INTERNAL_FORMAT 0x1003
#define GL_TEXTURE_BORDER_COLOR 0x1004
#define GL_TEXTURE_BORDER_COLOR_EXT 0x1004
#define GL_TEXTURE_BORDER_COLOR_NV 0x1004
#define GL_TEXTURE_BORDER_COLOR_OES 0x1004
#define GL_TEXTURE_BORDER 0x1005
#define GL_TEXTURE_TARGET 0x1006
#define GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV 0x11
#define GL_DONT_CARE 0x1100
#define GL_FASTEST 0x1101
#define GL_NICEST 0x1102
#define GL_SMALL_CCW_ARC_TO_NV 0x12
#define GL_AMBIENT 0x1200
#define GL_DIFFUSE 0x1201
#define GL_SPECULAR 0x1202
#define GL_POSITION 0x1203
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SPOT_CUTOFF 0x1206
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_RELATIVE_SMALL_CCW_ARC_TO_NV 0x13
#define GL_COMPILE 0x1300
#define GL_COMPILE_AND_EXECUTE 0x1301
#define GL_SMALL_CW_ARC_TO_NV 0x14
#define GL_BYTE 0x1400
#define GL_UNSIGNED_BYTE 0x1401
#define GL_SHORT 0x1402
#define GL_UNSIGNED_SHORT 0x1403
#define GL_INT 0x1404
#define GL_UNSIGNED_INT 0x1405
#define GL_FLOAT 0x1406
#define GL_2_BYTES 0x1407
#define GL_2_BYTES_NV 0x1407
#define GL_3_BYTES 0x1408
#define GL_3_BYTES_NV 0x1408
#define GL_4_BYTES 0x1409
#define GL_4_BYTES_NV 0x1409
#define GL_DOUBLE 0x140A
#define GL_DOUBLE_EXT 0x140A
#define GL_HALF_APPLE 0x140B
#define GL_HALF_FLOAT 0x140B
#define GL_HALF_FLOAT_ARB 0x140B
#define GL_HALF_FLOAT_NV 0x140B
#define GL_FIXED 0x140C
#define GL_FIXED_OES 0x140C
#define GL_INT64_ARB 0x140E
#define GL_INT64_NV 0x140E
#define GL_UNSIGNED_INT64_ARB 0x140F
#define GL_UNSIGNED_INT64_NV 0x140F
#define GL_RELATIVE_SMALL_CW_ARC_TO_NV 0x15
#define GL_CLEAR 0x1500
#define GL_AND 0x1501
#define GL_AND_REVERSE 0x1502
#define GL_COPY 0x1503
#define GL_AND_INVERTED 0x1504
#define GL_NOOP 0x1505
#define GL_XOR 0x1506
#define GL_XOR_NV 0x1506
#define GL_OR 0x1507
#define GL_NOR 0x1508
#define GL_EQUIV 0x1509
#define GL_INVERT 0x150A
#define GL_OR_REVERSE 0x150B
#define GL_COPY_INVERTED 0x150C
#define GL_OR_INVERTED 0x150D
#define GL_NAND 0x150E
#define GL_SET 0x150F
#define GL_LARGE_CCW_ARC_TO_NV 0x16
#define GL_EMISSION 0x1600
#define GL_SHININESS 0x1601
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_COLOR_INDEXES 0x1603
#define GL_RELATIVE_LARGE_CCW_ARC_TO_NV 0x17
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW0_ARB 0x1700
#define GL_MODELVIEW0_EXT 0x1700
#define GL_PATH_MODELVIEW_NV 0x1700
#define GL_PATH_PROJECTION_NV 0x1701
#define GL_PROJECTION 0x1701
#define GL_TEXTURE 0x1702
#define GL_LARGE_CW_ARC_TO_NV 0x18
#define GL_COLOR 0x1800
#define GL_COLOR_EXT 0x1800
#define GL_DEPTH 0x1801
#define GL_DEPTH_EXT 0x1801
#define GL_STENCIL 0x1802
#define GL_STENCIL_EXT 0x1802
#define GL_RELATIVE_LARGE_CW_ARC_TO_NV 0x19
#define GL_COLOR_INDEX 0x1900
#define GL_STENCIL_INDEX 0x1901
#define GL_STENCIL_INDEX_OES 0x1901
#define GL_DEPTH_COMPONENT 0x1902
#define GL_RED 0x1903
#define GL_RED_EXT 0x1903
#define GL_RED_NV 0x1903
#define GL_GREEN 0x1904
#define GL_GREEN_NV 0x1904
#define GL_BLUE 0x1905
#define GL_BLUE_NV 0x1905
#define GL_ALPHA 0x1906
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_RASTER_POSITION_UNCLIPPED_IBM 0x19262
#define GL_CONIC_CURVE_TO_NV 0x1A
#define GL_BITMAP 0x1A00
#define GL_PREFER_DOUBLEBUFFER_HINT_PGI 0x1A1F8
#define GL_CONSERVE_MEMORY_HINT_PGI 0x1A1FD
#define GL_RECLAIM_MEMORY_HINT_PGI 0x1A1FE
#define GL_NATIVE_GRAPHICS_HANDLE_PGI 0x1A202
#define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
#define GL_NATIVE_GRAPHICS_END_HINT_PGI 0x1A204
#define GL_ALWAYS_FAST_HINT_PGI 0x1A20C
#define GL_ALWAYS_SOFT_HINT_PGI 0x1A20D
#define GL_ALLOW_DRAW_OBJ_HINT_PGI 0x1A20E
#define GL_ALLOW_DRAW_WIN_HINT_PGI 0x1A20F
#define GL_ALLOW_DRAW_FRG_HINT_PGI 0x1A210
#define GL_ALLOW_DRAW_MEM_HINT_PGI 0x1A211
#define GL_STRICT_DEPTHFUNC_HINT_PGI 0x1A216
#define GL_STRICT_LIGHTING_HINT_PGI 0x1A217
#define GL_STRICT_SCISSOR_HINT_PGI 0x1A218
#define GL_FULL_STIPPLE_HINT_PGI 0x1A219
#define GL_CLIP_NEAR_HINT_PGI 0x1A220
#define GL_CLIP_FAR_HINT_PGI 0x1A221
#define GL_WIDE_LINE_HINT_PGI 0x1A222
#define GL_BACK_NORMALS_HINT_PGI 0x1A223
#define GL_VERTEX_DATA_HINT_PGI 0x1A22A
#define GL_VERTEX_CONSISTENT_HINT_PGI 0x1A22B
#define GL_MATERIAL_SIDE_HINT_PGI 0x1A22C
#define GL_MAX_VERTEX_HINT_PGI 0x1A22D
#define GL_RELATIVE_CONIC_CURVE_TO_NV 0x1B
#define GL_POINT 0x1B00
#define GL_POINT_NV 0x1B00
#define GL_LINE 0x1B01
#define GL_LINE_NV 0x1B01
#define GL_FILL 0x1B02
#define GL_FILL_NV 0x1B02
#define GL_RENDER 0x1C00
#define GL_FEEDBACK 0x1C01
#define GL_SELECT 0x1C02
#define GL_FLAT 0x1D00
#define GL_SMOOTH 0x1D01
#define GL_KEEP 0x1E00
#define GL_REPLACE 0x1E01
#define GL_INCR 0x1E02
#define GL_DECR 0x1E03
#define GL_VENDOR 0x1F00
#define GL_RENDERER 0x1F01
#define GL_VERSION 0x1F02
#define GL_EXTENSIONS 0x1F03
#define GL_KTX_Z_REGION 0x2
#define GL_GLYPH_VERTICAL_BEARING_X_BIT_NV 0x20
#define GL_EXTERNAL_STORAGE_BIT_NVX 0x2000
#define GL_S 0x2000
#define GL_FONT_NUM_GLYPH_INDICES_BIT_NV 0x20000000
#define GL_MULTISAMPLE_BIT 0x20000000
#define GL_MULTISAMPLE_BIT_3DFX 0x20000000
#define GL_MULTISAMPLE_BIT_ARB 0x20000000
#define GL_MULTISAMPLE_BIT_EXT 0x20000000
#define GL_MULTISAMPLE_BUFFER_BIT5_QCOM 0x20000000
#define GL_TEXCOORD2_BIT_PGI 0x20000000
#define GL_T 0x2001
#define GL_R 0x2002
#define GL_Q 0x2003
#define GL_MODULATE 0x2100
#define GL_DECAL 0x2101
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV 0x2300
#define GL_EYE_LINEAR 0x2400
#define GL_EYE_LINEAR_NV 0x2400
#define GL_OBJECT_LINEAR 0x2401
#define GL_OBJECT_LINEAR_NV 0x2401
#define GL_SPHERE_MAP 0x2402
#define GL_TEXTURE_GEN_MODE 0x2500
#define GL_TEXTURE_GEN_MODE_OES 0x2500
#define GL_OBJECT_PLANE 0x2501
#define GL_EYE_PLANE 0x2502
#define GL_NEAREST 0x2600
#define GL_LINEAR 0x2601
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_CLAMP 0x2900
#define GL_REPEAT 0x2901
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POLYGON_OFFSET_POINT 0x2A01
#define GL_POLYGON_OFFSET_POINT_NV 0x2A01
#define GL_POLYGON_OFFSET_LINE 0x2A02
#define GL_POLYGON_OFFSET_LINE_NV 0x2A02
#define GL_R3_G3_B2 0x2A10
#define GL_V2F 0x2A20
#define GL_V3F 0x2A21
#define GL_C4UB_V2F 0x2A22
#define GL_C4UB_V3F 0x2A23
#define GL_C3F_V3F 0x2A24
#define GL_N3F_V3F 0x2A25
#define GL_C4F_N3F_V3F 0x2A26
#define GL_T2F_V3F 0x2A27
#define GL_T4F_V4F 0x2A28
#define GL_T2F_C4UB_V3F 0x2A29
#define GL_T2F_C3F_V3F 0x2A2A
#define GL_T2F_N3F_V3F 0x2A2B
#define GL_T2F_C4F_N3F_V3F 0x2A2C
#define GL_T4F_C4F_N3F_V4F 0x2A2D
#define GL_KTX_STENCIL_REGION 0x3
#define GL_CLIP_DISTANCE0 0x3000
#define GL_CLIP_DISTANCE0_APPLE 0x3000
#define GL_CLIP_DISTANCE0_EXT 0x3000
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE0_IMG 0x3000
#define GL_CLIP_DISTANCE1 0x3001
#define GL_CLIP_DISTANCE1_APPLE 0x3001
#define GL_CLIP_DISTANCE1_EXT 0x3001
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE1_IMG 0x3001
#define GL_CLIP_DISTANCE2 0x3002
#define GL_CLIP_DISTANCE2_APPLE 0x3002
#define GL_CLIP_DISTANCE2_EXT 0x3002
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE2_IMG 0x3002
#define GL_CLIP_DISTANCE3 0x3003
#define GL_CLIP_DISTANCE3_APPLE 0x3003
#define GL_CLIP_DISTANCE3_EXT 0x3003
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE3_IMG 0x3003
#define GL_CLIP_DISTANCE4 0x3004
#define GL_CLIP_DISTANCE4_APPLE 0x3004
#define GL_CLIP_DISTANCE4_EXT 0x3004
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE4_IMG 0x3004
#define GL_CLIP_DISTANCE5 0x3005
#define GL_CLIP_DISTANCE5_APPLE 0x3005
#define GL_CLIP_DISTANCE5_EXT 0x3005
#define GL_CLIP_PLANE5 0x3005
#define GL_CLIP_PLANE5_IMG 0x3005
#define GL_CLIP_DISTANCE6 0x3006
#define GL_CLIP_DISTANCE6_APPLE 0x3006
#define GL_CLIP_DISTANCE6_EXT 0x3006
#define GL_CLIP_DISTANCE7 0x3007
#define GL_CLIP_DISTANCE7_APPLE 0x3007
#define GL_CLIP_DISTANCE7_EXT 0x3007
#define GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV 0x40
#define GL_LIGHT0 0x4000
#define GL_MULTISAMPLE_BUFFER_BIT6_QCOM 0x40000000
#define GL_TEXCOORD3_BIT_PGI 0x40000000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV 0x80
#define GL_ABGR_EXT 0x8000
#define GL_MULTISAMPLE_BUFFER_BIT7_QCOM 0x80000000
#define GL_TEXCOORD4_BIT_PGI 0x80000000
#define GL_CONSTANT_COLOR 0x8001
#define GL_CONSTANT_COLOR_EXT 0x8001
#define GL_ONE_MINUS_CONSTANT_COLOR 0x8002
#define GL_ONE_MINUS_CONSTANT_COLOR_EXT 0x8002
#define GL_CONSTANT_ALPHA 0x8003
#define GL_CONSTANT_ALPHA_EXT 0x8003
#define GL_ONE_MINUS_CONSTANT_ALPHA 0x8004
#define GL_ONE_MINUS_CONSTANT_ALPHA_EXT 0x8004
#define GL_BLEND_COLOR 0x8005
#define GL_BLEND_COLOR_EXT 0x8005
#define GL_FUNC_ADD 0x8006
#define GL_FUNC_ADD_EXT 0x8006
#define GL_FUNC_ADD_OES 0x8006
#define GL_MIN 0x8007
#define GL_MIN_EXT 0x8007
#define GL_MAX 0x8008
#define GL_MAX_EXT 0x8008
#define GL_BLEND_EQUATION 0x8009
#define GL_BLEND_EQUATION_EXT 0x8009
#define GL_BLEND_EQUATION_OES 0x8009
#define GL_BLEND_EQUATION_RGB 0x8009
#define GL_BLEND_EQUATION_RGB_EXT 0x8009
#define GL_BLEND_EQUATION_RGB_OES 0x8009
#define GL_FUNC_SUBTRACT 0x800A
#define GL_FUNC_SUBTRACT_EXT 0x800A
#define GL_FUNC_SUBTRACT_OES 0x800A
#define GL_FUNC_REVERSE_SUBTRACT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_EXT 0x800B
#define GL_FUNC_REVERSE_SUBTRACT_OES 0x800B
#define GL_CMYK_EXT 0x800C
#define GL_CMYKA_EXT 0x800D
#define GL_PACK_CMYK_HINT_EXT 0x800E
#define GL_UNPACK_CMYK_HINT_EXT 0x800F
#define GL_CONVOLUTION_1D 0x8010
#define GL_CONVOLUTION_1D_EXT 0x8010
#define GL_CONVOLUTION_2D 0x8011
#define GL_CONVOLUTION_2D_EXT 0x8011
#define GL_SEPARABLE_2D 0x8012
#define GL_SEPARABLE_2D_EXT 0x8012
#define GL_CONVOLUTION_BORDER_MODE 0x8013
#define GL_CONVOLUTION_BORDER_MODE_EXT 0x8013
#define GL_CONVOLUTION_FILTER_SCALE 0x8014
#define GL_CONVOLUTION_FILTER_SCALE_EXT 0x8014
#define GL_CONVOLUTION_FILTER_BIAS 0x8015
#define GL_CONVOLUTION_FILTER_BIAS_EXT 0x8015
#define GL_REDUCE 0x8016
#define GL_REDUCE_EXT 0x8016
#define GL_CONVOLUTION_FORMAT 0x8017
#define GL_CONVOLUTION_FORMAT_EXT 0x8017
#define GL_CONVOLUTION_WIDTH 0x8018
#define GL_CONVOLUTION_WIDTH_EXT 0x8018
#define GL_CONVOLUTION_HEIGHT 0x8019
#define GL_CONVOLUTION_HEIGHT_EXT 0x8019
#define GL_MAX_CONVOLUTION_WIDTH 0x801A
#define GL_MAX_CONVOLUTION_WIDTH_EXT 0x801A
#define GL_MAX_CONVOLUTION_HEIGHT 0x801B
#define GL_MAX_CONVOLUTION_HEIGHT_EXT 0x801B
#define GL_POST_CONVOLUTION_RED_SCALE 0x801C
#define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
#define GL_POST_CONVOLUTION_GREEN_SCALE 0x801D
#define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
#define GL_POST_CONVOLUTION_BLUE_SCALE 0x801E
#define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
#define GL_POST_CONVOLUTION_ALPHA_SCALE 0x801F
#define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
#define GL_POST_CONVOLUTION_RED_BIAS 0x8020
#define GL_POST_CONVOLUTION_RED_BIAS_EXT 0x8020
#define GL_POST_CONVOLUTION_GREEN_BIAS 0x8021
#define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
#define GL_POST_CONVOLUTION_BLUE_BIAS 0x8022
#define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
#define GL_POST_CONVOLUTION_ALPHA_BIAS 0x8023
#define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
#define GL_HISTOGRAM 0x8024
#define GL_HISTOGRAM_EXT 0x8024
#define GL_PROXY_HISTOGRAM 0x8025
#define GL_PROXY_HISTOGRAM_EXT 0x8025
#define GL_HISTOGRAM_WIDTH 0x8026
#define GL_HISTOGRAM_WIDTH_EXT 0x8026
#define GL_HISTOGRAM_FORMAT 0x8027
#define GL_HISTOGRAM_FORMAT_EXT 0x8027
#define GL_HISTOGRAM_RED_SIZE 0x8028
#define GL_HISTOGRAM_RED_SIZE_EXT 0x8028
#define GL_HISTOGRAM_GREEN_SIZE 0x8029
#define GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
#define GL_HISTOGRAM_BLUE_SIZE 0x802A
#define GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
#define GL_HISTOGRAM_ALPHA_SIZE 0x802B
#define GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
#define GL_HISTOGRAM_LUMINANCE_SIZE 0x802C
#define GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
#define GL_HISTOGRAM_SINK 0x802D
#define GL_HISTOGRAM_SINK_EXT 0x802D
#define GL_MINMAX 0x802E
#define GL_MINMAX_EXT 0x802E
#define GL_MINMAX_FORMAT 0x802F
#define GL_MINMAX_FORMAT_EXT 0x802F
#define GL_MINMAX_SINK 0x8030
#define GL_MINMAX_SINK_EXT 0x8030
#define GL_TABLE_TOO_LARGE 0x8031
#define GL_TABLE_TOO_LARGE_EXT 0x8031
#define GL_UNSIGNED_BYTE_3_3_2 0x8032
#define GL_UNSIGNED_BYTE_3_3_2_EXT 0x8032
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_EXT 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_5_5_1_EXT 0x8034
#define GL_UNSIGNED_INT_8_8_8_8 0x8035
#define GL_UNSIGNED_INT_8_8_8_8_EXT 0x8035
#define GL_UNSIGNED_INT_10_10_10_2 0x8036
#define GL_UNSIGNED_INT_10_10_10_2_EXT 0x8036
#define GL_POLYGON_OFFSET_EXT 0x8037
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FACTOR_EXT 0x8038
#define GL_POLYGON_OFFSET_BIAS_EXT 0x8039
#define GL_RESCALE_NORMAL 0x803A
#define GL_RESCALE_NORMAL_EXT 0x803A
#define GL_ALPHA4 0x803B
#define GL_ALPHA4_EXT 0x803B
#define GL_ALPHA8 0x803C
#define GL_ALPHA8_EXT 0x803C
#define GL_ALPHA8_OES 0x803C
#define GL_ALPHA12 0x803D
#define GL_ALPHA12_EXT 0x803D
#define GL_ALPHA16 0x803E
#define GL_ALPHA16_EXT 0x803E
#define GL_LUMINANCE4 0x803F
#define GL_LUMINANCE4_EXT 0x803F
#define GL_LUMINANCE8 0x8040
#define GL_LUMINANCE8_EXT 0x8040
#define GL_LUMINANCE8_OES 0x8040
#define GL_LUMINANCE12 0x8041
#define GL_LUMINANCE12_EXT 0x8041
#define GL_LUMINANCE16 0x8042
#define GL_LUMINANCE16_EXT 0x8042
#define GL_LUMINANCE4_ALPHA4 0x8043
#define GL_LUMINANCE4_ALPHA4_EXT 0x8043
#define GL_LUMINANCE4_ALPHA4_OES 0x8043
#define GL_LUMINANCE6_ALPHA2 0x8044
#define GL_LUMINANCE6_ALPHA2_EXT 0x8044
#define GL_LUMINANCE8_ALPHA8 0x8045
#define GL_LUMINANCE8_ALPHA8_EXT 0x8045
#define GL_LUMINANCE8_ALPHA8_OES 0x8045
#define GL_LUMINANCE12_ALPHA4 0x8046
#define GL_LUMINANCE12_ALPHA4_EXT 0x8046
#define GL_LUMINANCE12_ALPHA12 0x8047
#define GL_LUMINANCE12_ALPHA12_EXT 0x8047
#define GL_LUMINANCE16_ALPHA16 0x8048
#define GL_LUMINANCE16_ALPHA16_EXT 0x8048
#define GL_INTENSITY 0x8049
#define GL_INTENSITY_EXT 0x8049
#define GL_INTENSITY4 0x804A
#define GL_INTENSITY4_EXT 0x804A
#define GL_INTENSITY8 0x804B
#define GL_INTENSITY8_EXT 0x804B
#define GL_INTENSITY12 0x804C
#define GL_INTENSITY12_EXT 0x804C
#define GL_INTENSITY16 0x804D
#define GL_INTENSITY16_EXT 0x804D
#define GL_RGB2_EXT 0x804E
#define GL_RGB4 0x804F
#define GL_RGB4_EXT 0x804F
#define GL_RGB5 0x8050
#define GL_RGB5_EXT 0x8050
#define GL_RGB8 0x8051
#define GL_RGB8_EXT 0x8051
#define GL_RGB8_OES 0x8051
#define GL_RGB10 0x8052
#define GL_RGB10_EXT 0x8052
#define GL_RGB12 0x8053
#define GL_RGB12_EXT 0x8053
#define GL_RGB16 0x8054
#define GL_RGB16_EXT 0x8054
#define GL_RGBA2 0x8055
#define GL_RGBA2_EXT 0x8055
#define GL_RGBA4 0x8056
#define GL_RGBA4_EXT 0x8056
#define GL_RGBA4_OES 0x8056
#define GL_RGB5_A1 0x8057
#define GL_RGB5_A1_EXT 0x8057
#define GL_RGB5_A1_OES 0x8057
#define GL_RGBA8 0x8058
#define GL_RGBA8_EXT 0x8058
#define GL_RGBA8_OES 0x8058
#define GL_RGB10_A2 0x8059
#define GL_RGB10_A2_EXT 0x8059
#define GL_RGBA12 0x805A
#define GL_RGBA12_EXT 0x805A
#define GL_RGBA16 0x805B
#define GL_RGBA16_EXT 0x805B
#define GL_TEXTURE_RED_SIZE 0x805C
#define GL_TEXTURE_RED_SIZE_EXT 0x805C
#define GL_TEXTURE_GREEN_SIZE 0x805D
#define GL_TEXTURE_GREEN_SIZE_EXT 0x805D
#define GL_TEXTURE_BLUE_SIZE 0x805E
#define GL_TEXTURE_BLUE_SIZE_EXT 0x805E
#define GL_TEXTURE_ALPHA_SIZE 0x805F
#define GL_TEXTURE_ALPHA_SIZE_EXT 0x805F
#define GL_TEXTURE_LUMINANCE_SIZE 0x8060
#define GL_TEXTURE_LUMINANCE_SIZE_EXT 0x8060
#define GL_TEXTURE_INTENSITY_SIZE 0x8061
#define GL_TEXTURE_INTENSITY_SIZE_EXT 0x8061
#define GL_REPLACE_EXT 0x8062
#define GL_PROXY_TEXTURE_1D 0x8063
#define GL_PROXY_TEXTURE_1D_EXT 0x8063
#define GL_PROXY_TEXTURE_2D 0x8064
#define GL_PROXY_TEXTURE_2D_EXT 0x8064
#define GL_TEXTURE_TOO_LARGE_EXT 0x8065
#define GL_TEXTURE_PRIORITY 0x8066
#define GL_TEXTURE_PRIORITY_EXT 0x8066
#define GL_TEXTURE_RESIDENT 0x8067
#define GL_TEXTURE_RESIDENT_EXT 0x8067
#define GL_TEXTURE_1D_BINDING_EXT 0x8068
#define GL_TEXTURE_BINDING_1D 0x8068
#define GL_TEXTURE_2D_BINDING_EXT 0x8069
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_3D_BINDING_EXT 0x806A
#define GL_TEXTURE_3D_BINDING_OES 0x806A
#define GL_TEXTURE_BINDING_3D 0x806A
#define GL_TEXTURE_BINDING_3D_OES 0x806A
#define GL_PACK_SKIP_IMAGES 0x806B
#define GL_PACK_SKIP_IMAGES_EXT 0x806B
#define GL_PACK_IMAGE_HEIGHT 0x806C
#define GL_PACK_IMAGE_HEIGHT_EXT 0x806C
#define GL_UNPACK_SKIP_IMAGES 0x806D
#define GL_UNPACK_SKIP_IMAGES_EXT 0x806D
#define GL_UNPACK_IMAGE_HEIGHT 0x806E
#define GL_UNPACK_IMAGE_HEIGHT_EXT 0x806E
#define GL_TEXTURE_3D 0x806F
#define GL_TEXTURE_3D_EXT 0x806F
#define GL_TEXTURE_3D_OES 0x806F
#define GL_PROXY_TEXTURE_3D 0x8070
#define GL_PROXY_TEXTURE_3D_EXT 0x8070
#define GL_TEXTURE_DEPTH 0x8071
#define GL_TEXTURE_DEPTH_EXT 0x8071
#define GL_TEXTURE_WRAP_R 0x8072
#define GL_TEXTURE_WRAP_R_EXT 0x8072
#define GL_TEXTURE_WRAP_R_OES 0x8072
#define GL_MAX_3D_TEXTURE_SIZE 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_EXT 0x8073
#define GL_MAX_3D_TEXTURE_SIZE_OES 0x8073
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_EXT 0x8074
#define GL_VERTEX_ARRAY_KHR 0x8074
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_EXT 0x8075
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_EXT 0x8076
#define GL_INDEX_ARRAY 0x8077
#define GL_INDEX_ARRAY_EXT 0x8077
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_EXT 0x8078
#define GL_EDGE_FLAG_ARRAY 0x8079
#define GL_EDGE_FLAG_ARRAY_EXT 0x8079
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_SIZE_EXT 0x807A
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VERTEX_ARRAY_TYPE_EXT 0x807B
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_STRIDE_EXT 0x807C
#define GL_VERTEX_ARRAY_COUNT_EXT 0x807D
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NORMAL_ARRAY_TYPE_EXT 0x807E
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_STRIDE_EXT 0x807F
#define GL_NORMAL_ARRAY_COUNT_EXT 0x8080
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_SIZE_EXT 0x8081
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_ARRAY_TYPE_EXT 0x8082
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_STRIDE_EXT 0x8083
#define GL_COLOR_ARRAY_COUNT_EXT 0x8084
#define GL_INDEX_ARRAY_TYPE 0x8085
#define GL_INDEX_ARRAY_TYPE_EXT 0x8085
#define GL_INDEX_ARRAY_STRIDE 0x8086
#define GL_INDEX_ARRAY_STRIDE_EXT 0x8086
#define GL_INDEX_ARRAY_COUNT_EXT 0x8087
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_SIZE_EXT 0x8088
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_COORD_ARRAY_TYPE_EXT 0x8089
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
#define GL_TEXTURE_COORD_ARRAY_COUNT_EXT 0x808B
#define GL_EDGE_FLAG_ARRAY_STRIDE 0x808C
#define GL_EDGE_FLAG_ARRAY_STRIDE_EXT 0x808C
#define GL_EDGE_FLAG_ARRAY_COUNT_EXT 0x808D
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_POINTER_EXT 0x808E
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_POINTER_EXT 0x808F
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_POINTER_EXT 0x8090
#define GL_INDEX_ARRAY_POINTER 0x8091
#define GL_INDEX_ARRAY_POINTER_EXT 0x8091
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
#define GL_EDGE_FLAG_ARRAY_POINTER 0x8093
#define GL_EDGE_FLAG_ARRAY_POINTER_EXT 0x8093
#define GL_INTERLACE_SGIX 0x8094
#define GL_DETAIL_TEXTURE_2D_SGIS 0x8095
#define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
#define GL_LINEAR_DETAIL_SGIS 0x8097
#define GL_LINEAR_DETAIL_ALPHA_SGIS 0x8098
#define GL_LINEAR_DETAIL_COLOR_SGIS 0x8099
#define GL_DETAIL_TEXTURE_LEVEL_SGIS 0x809A
#define GL_DETAIL_TEXTURE_MODE_SGIS 0x809B
#define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
#define GL_MULTISAMPLE 0x809D
#define GL_MULTISAMPLE_ARB 0x809D
#define GL_MULTISAMPLE_EXT 0x809D
#define GL_MULTISAMPLE_SGIS 0x809D
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
#define GL_SAMPLE_ALPHA_TO_MASK_SGIS 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
#define GL_SAMPLE_ALPHA_TO_ONE_SGIS 0x809F
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_ARB 0x80A0
#define GL_SAMPLE_MASK_EXT 0x80A0
#define GL_SAMPLE_MASK_SGIS 0x80A0
#define GL_1PASS_EXT 0x80A1
#define GL_1PASS_SGIS 0x80A1
#define GL_2PASS_0_EXT 0x80A2
#define GL_2PASS_0_SGIS 0x80A2
#define GL_2PASS_1_EXT 0x80A3
#define GL_2PASS_1_SGIS 0x80A3
#define GL_4PASS_0_EXT 0x80A4
#define GL_4PASS_0_SGIS 0x80A4
#define GL_4PASS_1_EXT 0x80A5
#define GL_4PASS_1_SGIS 0x80A5
#define GL_4PASS_2_EXT 0x80A6
#define GL_4PASS_2_SGIS 0x80A6
#define GL_4PASS_3_EXT 0x80A7
#define GL_4PASS_3_SGIS 0x80A7
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_BUFFERS_ARB 0x80A8
#define GL_SAMPLE_BUFFERS_EXT 0x80A8
#define GL_SAMPLE_BUFFERS_SGIS 0x80A8
#define GL_SAMPLES 0x80A9
#define GL_SAMPLES_ARB 0x80A9
#define GL_SAMPLES_EXT 0x80A9
#define GL_SAMPLES_SGIS 0x80A9
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
#define GL_SAMPLE_MASK_VALUE_EXT 0x80AA
#define GL_SAMPLE_MASK_VALUE_SGIS 0x80AA
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
#define GL_SAMPLE_MASK_INVERT_EXT 0x80AB
#define GL_SAMPLE_MASK_INVERT_SGIS 0x80AB
#define GL_SAMPLE_PATTERN_EXT 0x80AC
#define GL_SAMPLE_PATTERN_SGIS 0x80AC
#define GL_LINEAR_SHARPEN_SGIS 0x80AD
#define GL_LINEAR_SHARPEN_ALPHA_SGIS 0x80AE
#define GL_LINEAR_SHARPEN_COLOR_SGIS 0x80AF
#define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
#define GL_COLOR_MATRIX 0x80B1
#define GL_COLOR_MATRIX_SGI 0x80B1
#define GL_COLOR_MATRIX_STACK_DEPTH 0x80B2
#define GL_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B2
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH 0x80B3
#define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
#define GL_POST_COLOR_MATRIX_RED_SCALE 0x80B4
#define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
#define GL_POST_COLOR_MATRIX_GREEN_SCALE 0x80B5
#define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
#define GL_POST_COLOR_MATRIX_BLUE_SCALE 0x80B6
#define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE 0x80B7
#define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
#define GL_POST_COLOR_MATRIX_RED_BIAS 0x80B8
#define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
#define GL_POST_COLOR_MATRIX_GREEN_BIAS 0x80B9
#define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
#define GL_POST_COLOR_MATRIX_BLUE_BIAS 0x80BA
#define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS 0x80BB
#define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
#define GL_TEXTURE_COLOR_TABLE_SGI 0x80BC
#define GL_PROXY_TEXTURE_COLOR_TABLE_SGI 0x80BD
#define GL_TEXTURE_ENV_BIAS_SGIX 0x80BE
#define GL_SHADOW_AMBIENT_SGIX 0x80BF
#define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
#define GL_BLEND_DST_RGB 0x80C8
#define GL_BLEND_DST_RGB_EXT 0x80C8
#define GL_BLEND_DST_RGB_OES 0x80C8
#define GL_BLEND_SRC_RGB 0x80C9
#define GL_BLEND_SRC_RGB_EXT 0x80C9
#define GL_BLEND_SRC_RGB_OES 0x80C9
#define GL_BLEND_DST_ALPHA 0x80CA
#define GL_BLEND_DST_ALPHA_EXT 0x80CA
#define GL_BLEND_DST_ALPHA_OES 0x80CA
#define GL_BLEND_SRC_ALPHA 0x80CB
#define GL_BLEND_SRC_ALPHA_EXT 0x80CB
#define GL_BLEND_SRC_ALPHA_OES 0x80CB
#define GL_422_EXT 0x80CC
#define GL_422_REV_EXT 0x80CD
#define GL_422_AVERAGE_EXT 0x80CE
#define GL_422_REV_AVERAGE_EXT 0x80CF
#define GL_COLOR_TABLE 0x80D0
#define GL_COLOR_TABLE_SGI 0x80D0
#define GL_POST_CONVOLUTION_COLOR_TABLE 0x80D1
#define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
#define GL_POST_COLOR_MATRIX_COLOR_TABLE 0x80D2
#define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
#define GL_PROXY_COLOR_TABLE 0x80D3
#define GL_PROXY_COLOR_TABLE_SGI 0x80D3
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
#define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
#define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
#define GL_COLOR_TABLE_SCALE 0x80D6
#define GL_COLOR_TABLE_SCALE_SGI 0x80D6
#define GL_COLOR_TABLE_BIAS 0x80D7
#define GL_COLOR_TABLE_BIAS_SGI 0x80D7
#define GL_COLOR_TABLE_FORMAT 0x80D8
#define GL_COLOR_TABLE_FORMAT_SGI 0x80D8
#define GL_COLOR_TABLE_WIDTH 0x80D9
#define GL_COLOR_TABLE_WIDTH_SGI 0x80D9
#define GL_COLOR_TABLE_RED_SIZE 0x80DA
#define GL_COLOR_TABLE_RED_SIZE_SGI 0x80DA
#define GL_COLOR_TABLE_GREEN_SIZE 0x80DB
#define GL_COLOR_TABLE_GREEN_SIZE_SGI 0x80DB
#define GL_COLOR_TABLE_BLUE_SIZE 0x80DC
#define GL_COLOR_TABLE_BLUE_SIZE_SGI 0x80DC
#define GL_COLOR_TABLE_ALPHA_SIZE 0x80DD
#define GL_COLOR_TABLE_ALPHA_SIZE_SGI 0x80DD
#define GL_COLOR_TABLE_LUMINANCE_SIZE 0x80DE
#define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
#define GL_COLOR_TABLE_INTENSITY_SIZE 0x80DF
#define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
#define GL_BGR 0x80E0
#define GL_BGR_EXT 0x80E0
#define GL_BGRA 0x80E1
#define GL_BGRA_EXT 0x80E1
#define GL_BGRA_IMG 0x80E1
#define GL_COLOR_INDEX1_EXT 0x80E2
#define GL_COLOR_INDEX2_EXT 0x80E3
#define GL_COLOR_INDEX4_EXT 0x80E4
#define GL_COLOR_INDEX8_EXT 0x80E5
#define GL_COLOR_INDEX12_EXT 0x80E6
#define GL_COLOR_INDEX16_EXT 0x80E7
#define GL_MAX_ELEMENTS_VERTICES 0x80E8
#define GL_MAX_ELEMENTS_VERTICES_EXT 0x80E8
#define GL_MAX_ELEMENTS_INDICES 0x80E9
#define GL_MAX_ELEMENTS_INDICES_EXT 0x80E9
#define GL_PHONG_WIN 0x80EA
#define GL_PHONG_HINT_WIN 0x80EB
#define GL_FOG_SPECULAR_TEXTURE_WIN 0x80EC
#define GL_TEXTURE_INDEX_SIZE_EXT 0x80ED
#define GL_PARAMETER_BUFFER 0x80EE
#define GL_PARAMETER_BUFFER_ARB 0x80EE
#define GL_PARAMETER_BUFFER_BINDING 0x80EF
#define GL_PARAMETER_BUFFER_BINDING_ARB 0x80EF
#define GL_CLIP_VOLUME_CLIPPING_HINT_EXT 0x80F0
#define GL_DUAL_ALPHA4_SGIS 0x8110
#define GL_DUAL_ALPHA8_SGIS 0x8111
#define GL_DUAL_ALPHA12_SGIS 0x8112
#define GL_DUAL_ALPHA16_SGIS 0x8113
#define GL_DUAL_LUMINANCE4_SGIS 0x8114
#define GL_DUAL_LUMINANCE8_SGIS 0x8115
#define GL_DUAL_LUMINANCE12_SGIS 0x8116
#define GL_DUAL_LUMINANCE16_SGIS 0x8117
#define GL_DUAL_INTENSITY4_SGIS 0x8118
#define GL_DUAL_INTENSITY8_SGIS 0x8119
#define GL_DUAL_INTENSITY12_SGIS 0x811A
#define GL_DUAL_INTENSITY16_SGIS 0x811B
#define GL_DUAL_LUMINANCE_ALPHA4_SGIS 0x811C
#define GL_DUAL_LUMINANCE_ALPHA8_SGIS 0x811D
#define GL_QUAD_ALPHA4_SGIS 0x811E
#define GL_QUAD_ALPHA8_SGIS 0x811F
#define GL_QUAD_LUMINANCE4_SGIS 0x8120
#define GL_QUAD_LUMINANCE8_SGIS 0x8121
#define GL_QUAD_INTENSITY4_SGIS 0x8122
#define GL_QUAD_INTENSITY8_SGIS 0x8123
#define GL_DUAL_TEXTURE_SELECT_SGIS 0x8124
#define GL_QUAD_TEXTURE_SELECT_SGIS 0x8125
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_MIN_ARB 0x8126
#define GL_POINT_SIZE_MIN_EXT 0x8126
#define GL_POINT_SIZE_MIN_SGIS 0x8126
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MAX_ARB 0x8127
#define GL_POINT_SIZE_MAX_EXT 0x8127
#define GL_POINT_SIZE_MAX_SGIS 0x8127
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_ARB 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_EXT 0x8128
#define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
#define GL_DISTANCE_ATTENUATION_EXT 0x8129
#define GL_DISTANCE_ATTENUATION_SGIS 0x8129
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
#define GL_FOG_FUNC_SGIS 0x812A
#define GL_FOG_FUNC_POINTS_SGIS 0x812B
#define GL_MAX_FOG_FUNC_POINTS_SGIS 0x812C
#define GL_CLAMP_TO_BORDER 0x812D
#define GL_CLAMP_TO_BORDER_ARB 0x812D
#define GL_CLAMP_TO_BORDER_EXT 0x812D
#define GL_CLAMP_TO_BORDER_NV 0x812D
#define GL_CLAMP_TO_BORDER_OES 0x812D
#define GL_CLAMP_TO_BORDER_SGIS 0x812D
#define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLAMP_TO_EDGE_EXT 0x812F
#define GL_CLAMP_TO_EDGE_SGIS 0x812F
#define GL_PACK_SKIP_VOLUMES_SGIS 0x8130
#define GL_PACK_IMAGE_DEPTH_SGIS 0x8131
#define GL_UNPACK_SKIP_VOLUMES_SGIS 0x8132
#define GL_UNPACK_IMAGE_DEPTH_SGIS 0x8133
#define GL_TEXTURE_4D_SGIS 0x8134
#define GL_PROXY_TEXTURE_4D_SGIS 0x8135
#define GL_TEXTURE_4DSIZE_SGIS 0x8136
#define GL_TEXTURE_WRAP_Q_SGIS 0x8137
#define GL_MAX_4D_TEXTURE_SIZE_SGIS 0x8138
#define GL_PIXEL_TEX_GEN_SGIX 0x8139
#define GL_TEXTURE_MIN_LOD 0x813A
#define GL_TEXTURE_MIN_LOD_SGIS 0x813A
#define GL_TEXTURE_MAX_LOD 0x813B
#define GL_TEXTURE_MAX_LOD_SGIS 0x813B
#define GL_TEXTURE_BASE_LEVEL 0x813C
#define GL_TEXTURE_BASE_LEVEL_SGIS 0x813C
#define GL_TEXTURE_MAX_LEVEL 0x813D
#define GL_TEXTURE_MAX_LEVEL_APPLE 0x813D
#define GL_TEXTURE_MAX_LEVEL_SGIS 0x813D
#define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
#define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
#define GL_PIXEL_TILE_WIDTH_SGIX 0x8140
#define GL_PIXEL_TILE_HEIGHT_SGIX 0x8141
#define GL_PIXEL_TILE_GRID_WIDTH_SGIX 0x8142
#define GL_PIXEL_TILE_GRID_HEIGHT_SGIX 0x8143
#define GL_PIXEL_TILE_GRID_DEPTH_SGIX 0x8144
#define GL_PIXEL_TILE_CACHE_SIZE_SGIX 0x8145
#define GL_FILTER4_SGIS 0x8146
#define GL_TEXTURE_FILTER4_SIZE_SGIS 0x8147
#define GL_SPRITE_SGIX 0x8148
#define GL_SPRITE_MODE_SGIX 0x8149
#define GL_SPRITE_AXIS_SGIX 0x814A
#define GL_SPRITE_TRANSLATION_SGIX 0x814B
#define GL_SPRITE_AXIAL_SGIX 0x814C
#define GL_SPRITE_OBJECT_ALIGNED_SGIX 0x814D
#define GL_SPRITE_EYE_ALIGNED_SGIX 0x814E
#define GL_TEXTURE_4D_BINDING_SGIS 0x814F
#define GL_IGNORE_BORDER_HP 0x8150
#define GL_CONSTANT_BORDER 0x8151
#define GL_CONSTANT_BORDER_HP 0x8151
#define GL_REPLICATE_BORDER 0x8153
#define GL_REPLICATE_BORDER_HP 0x8153
#define GL_CONVOLUTION_BORDER_COLOR 0x8154
#define GL_CONVOLUTION_BORDER_COLOR_HP 0x8154
#define GL_IMAGE_SCALE_X_HP 0x8155
#define GL_IMAGE_SCALE_Y_HP 0x8156
#define GL_IMAGE_TRANSLATE_X_HP 0x8157
#define GL_IMAGE_TRANSLATE_Y_HP 0x8158
#define GL_IMAGE_ROTATE_ANGLE_HP 0x8159
#define GL_IMAGE_ROTATE_ORIGIN_X_HP 0x815A
#define GL_IMAGE_ROTATE_ORIGIN_Y_HP 0x815B
#define GL_IMAGE_MAG_FILTER_HP 0x815C
#define GL_IMAGE_MIN_FILTER_HP 0x815D
#define GL_IMAGE_CUBIC_WEIGHT_HP 0x815E
#define GL_CUBIC_HP 0x815F
#define GL_AVERAGE_HP 0x8160
#define GL_IMAGE_TRANSFORM_2D_HP 0x8161
#define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
#define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
#define GL_OCCLUSION_TEST_HP 0x8165
#define GL_OCCLUSION_TEST_RESULT_HP 0x8166
#define GL_TEXTURE_LIGHTING_MODE_HP 0x8167
#define GL_TEXTURE_POST_SPECULAR_HP 0x8168
#define GL_TEXTURE_PRE_SPECULAR_HP 0x8169
#define GL_LINEAR_CLIPMAP_LINEAR_SGIX 0x8170
#define GL_TEXTURE_CLIPMAP_CENTER_SGIX 0x8171
#define GL_TEXTURE_CLIPMAP_FRAME_SGIX 0x8172
#define GL_TEXTURE_CLIPMAP_OFFSET_SGIX 0x8173
#define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
#define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
#define GL_TEXTURE_CLIPMAP_DEPTH_SGIX 0x8176
#define GL_MAX_CLIPMAP_DEPTH_SGIX 0x8177
#define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
#define GL_POST_TEXTURE_FILTER_BIAS_SGIX 0x8179
#define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
#define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
#define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
#define GL_REFERENCE_PLANE_SGIX 0x817D
#define GL_REFERENCE_PLANE_EQUATION_SGIX 0x817E
#define GL_IR_INSTRUMENT1_SGIX 0x817F
#define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
#define GL_INSTRUMENT_MEASUREMENTS_SGIX 0x8181
#define GL_LIST_PRIORITY_SGIX 0x8182
#define GL_CALLIGRAPHIC_FRAGMENT_SGIX 0x8183
#define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX 0x8184
#define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX 0x8185
#define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX 0x8186
#define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
#define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
#define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX 0x8189
#define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX 0x818A
#define GL_FRAMEZOOM_SGIX 0x818B
#define GL_FRAMEZOOM_FACTOR_SGIX 0x818C
#define GL_MAX_FRAMEZOOM_FACTOR_SGIX 0x818D
#define GL_TEXTURE_LOD_BIAS_S_SGIX 0x818E
#define GL_TEXTURE_LOD_BIAS_T_SGIX 0x818F
#define GL_TEXTURE_LOD_BIAS_R_SGIX 0x8190
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_SGIS 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GENERATE_MIPMAP_HINT_SGIS 0x8192
#define GL_GEOMETRY_DEFORMATION_SGIX 0x8194
#define GL_TEXTURE_DEFORMATION_SGIX 0x8195
#define GL_DEFORMATIONS_MASK_SGIX 0x8196
#define GL_MAX_DEFORMATION_ORDER_SGIX 0x8197
#define GL_FOG_OFFSET_SGIX 0x8198
#define GL_FOG_OFFSET_VALUE_SGIX 0x8199
#define GL_TEXTURE_COMPARE_SGIX 0x819A
#define GL_TEXTURE_COMPARE_OPERATOR_SGIX 0x819B
#define GL_TEXTURE_LEQUAL_R_SGIX 0x819C
#define GL_TEXTURE_GEQUAL_R_SGIX 0x819D
#define GL_DEPTH_COMPONENT16 0x81A5
#define GL_DEPTH_COMPONENT16_ARB 0x81A5
#define GL_DEPTH_COMPONENT16_OES 0x81A5
#define GL_DEPTH_COMPONENT16_SGIX 0x81A5
#define GL_DEPTH_COMPONENT24 0x81A6
#define GL_DEPTH_COMPONENT24_ARB 0x81A6
#define GL_DEPTH_COMPONENT24_OES 0x81A6
#define GL_DEPTH_COMPONENT24_SGIX 0x81A6
#define GL_DEPTH_COMPONENT32 0x81A7
#define GL_DEPTH_COMPONENT32_ARB 0x81A7
#define GL_DEPTH_COMPONENT32_OES 0x81A7
#define GL_DEPTH_COMPONENT32_SGIX 0x81A7
#define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT 0x81A8
#define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT 0x81A9
#define GL_CULL_VERTEX_EXT 0x81AA
#define GL_CULL_VERTEX_EYE_POSITION_EXT 0x81AB
#define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
#define GL_IUI_V2F_EXT 0x81AD
#define GL_IUI_V3F_EXT 0x81AE
#define GL_IUI_N3F_V2F_EXT 0x81AF
#define GL_IUI_N3F_V3F_EXT 0x81B0
#define GL_T2F_IUI_V2F_EXT 0x81B1
#define GL_T2F_IUI_V3F_EXT 0x81B2
#define GL_T2F_IUI_N3F_V2F_EXT 0x81B3
#define GL_T2F_IUI_N3F_V3F_EXT 0x81B4
#define GL_INDEX_TEST_EXT 0x81B5
#define GL_INDEX_TEST_FUNC_EXT 0x81B6
#define GL_INDEX_TEST_REF_EXT 0x81B7
#define GL_INDEX_MATERIAL_EXT 0x81B8
#define GL_INDEX_MATERIAL_PARAMETER_EXT 0x81B9
#define GL_INDEX_MATERIAL_FACE_EXT 0x81BA
#define GL_YCRCB_422_SGIX 0x81BB
#define GL_YCRCB_444_SGIX 0x81BC
#define GL_WRAP_BORDER_SUN 0x81D4
#define GL_UNPACK_CONSTANT_DATA_SUNX 0x81D5
#define GL_TEXTURE_CONSTANT_DATA_SUNX 0x81D6
#define GL_TRIANGLE_LIST_SUN 0x81D7
#define GL_REPLACEMENT_CODE_SUN 0x81D8
#define GL_GLOBAL_ALPHA_SUN 0x81D9
#define GL_GLOBAL_ALPHA_FACTOR_SUN 0x81DA
#define GL_TEXTURE_COLOR_WRITEMASK_SGIS 0x81EF
#define GL_EYE_DISTANCE_TO_POINT_SGIS 0x81F0
#define GL_OBJECT_DISTANCE_TO_POINT_SGIS 0x81F1
#define GL_EYE_DISTANCE_TO_LINE_SGIS 0x81F2
#define GL_OBJECT_DISTANCE_TO_LINE_SGIS 0x81F3
#define GL_EYE_POINT_SGIS 0x81F4
#define GL_OBJECT_POINT_SGIS 0x81F5
#define GL_EYE_LINE_SGIS 0x81F6
#define GL_OBJECT_LINE_SGIS 0x81F7
#define GL_LIGHT_MODEL_COLOR_CONTROL 0x81F8
#define GL_LIGHT_MODEL_COLOR_CONTROL_EXT 0x81F8
#define GL_SINGLE_COLOR 0x81F9
#define GL_SINGLE_COLOR_EXT 0x81F9
#define GL_SEPARATE_SPECULAR_COLOR 0x81FA
#define GL_SEPARATE_SPECULAR_COLOR_EXT 0x81FA
#define GL_SHARED_TEXTURE_PALETTE_EXT 0x81FB
#define GL_TEXT_FRAGMENT_SHADER_ATI 0x8200
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT 0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT 0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
#define GL_FRAMEBUFFER_DEFAULT 0x8218
#define GL_FRAMEBUFFER_UNDEFINED 0x8219
#define GL_FRAMEBUFFER_UNDEFINED_OES 0x8219
#define GL_DEPTH_STENCIL_ATTACHMENT 0x821A
#define GL_MAJOR_VERSION 0x821B
#define GL_MINOR_VERSION 0x821C
#define GL_NUM_EXTENSIONS 0x821D
#define GL_CONTEXT_FLAGS 0x821E
#define GL_BUFFER_IMMUTABLE_STORAGE 0x821F
#define GL_BUFFER_IMMUTABLE_STORAGE_EXT 0x821F
#define GL_BUFFER_STORAGE_FLAGS 0x8220
#define GL_BUFFER_STORAGE_FLAGS_EXT 0x8220
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0x8221
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES 0x8221
#define GL_INDEX 0x8222
#define GL_COMPRESSED_RED 0x8225
#define GL_COMPRESSED_RG 0x8226
#define GL_RG 0x8227
#define GL_RG_EXT 0x8227
#define GL_RG_INTEGER 0x8228
#define GL_R8 0x8229
#define GL_R8_EXT 0x8229
#define GL_R16 0x822A
#define GL_R16_EXT 0x822A
#define GL_RG8 0x822B
#define GL_RG8_EXT 0x822B
#define GL_RG16 0x822C
#define GL_RG16_EXT 0x822C
#define GL_R16F 0x822D
#define GL_R16F_EXT 0x822D
#define GL_R32F 0x822E
#define GL_R32F_EXT 0x822E
#define GL_RG16F 0x822F
#define GL_RG16F_EXT 0x822F
#define GL_RG32F 0x8230
#define GL_RG32F_EXT 0x8230
#define GL_R8I 0x8231
#define GL_R8UI 0x8232
#define GL_R16I 0x8233
#define GL_R16UI 0x8234
#define GL_R32I 0x8235
#define GL_R32UI 0x8236
#define GL_RG8I 0x8237
#define GL_RG8UI 0x8238
#define GL_RG16I 0x8239
#define GL_RG16UI 0x823A
#define GL_RG32I 0x823B
#define GL_RG32UI 0x823C
#define GL_SYNC_CL_EVENT_ARB 0x8240
#define GL_SYNC_CL_EVENT_COMPLETE_ARB 0x8241
#define GL_DEBUG_OUTPUT_SYNCHRONOUS 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0x8242
#define GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR 0x8242
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR 0x8243
#define GL_DEBUG_CALLBACK_FUNCTION 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_ARB 0x8244
#define GL_DEBUG_CALLBACK_FUNCTION_KHR 0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0x8245
#define GL_DEBUG_CALLBACK_USER_PARAM_KHR 0x8245
#define GL_DEBUG_SOURCE_API 0x8246
#define GL_DEBUG_SOURCE_API_ARB 0x8246
#define GL_DEBUG_SOURCE_API_KHR 0x8246
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR 0x8247
#define GL_DEBUG_SOURCE_SHADER_COMPILER 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
#define GL_DEBUG_SOURCE_SHADER_COMPILER_KHR 0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0x8249
#define GL_DEBUG_SOURCE_THIRD_PARTY_KHR 0x8249
#define GL_DEBUG_SOURCE_APPLICATION 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_ARB 0x824A
#define GL_DEBUG_SOURCE_APPLICATION_KHR 0x824A
#define GL_DEBUG_SOURCE_OTHER 0x824B
#define GL_DEBUG_SOURCE_OTHER_ARB 0x824B
#define GL_DEBUG_SOURCE_OTHER_KHR 0x824B
#define GL_DEBUG_TYPE_ERROR 0x824C
#define GL_DEBUG_TYPE_ERROR_ARB 0x824C
#define GL_DEBUG_TYPE_ERROR_KHR 0x824C
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR 0x824D
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR 0x824E
#define GL_DEBUG_TYPE_PORTABILITY 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_ARB 0x824F
#define GL_DEBUG_TYPE_PORTABILITY_KHR 0x824F
#define GL_DEBUG_TYPE_PERFORMANCE 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_ARB 0x8250
#define GL_DEBUG_TYPE_PERFORMANCE_KHR 0x8250
#define GL_DEBUG_TYPE_OTHER 0x8251
#define GL_DEBUG_TYPE_OTHER_ARB 0x8251
#define GL_DEBUG_TYPE_OTHER_KHR 0x8251
#define GL_LOSE_CONTEXT_ON_RESET 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_ARB 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_EXT 0x8252
#define GL_LOSE_CONTEXT_ON_RESET_KHR 0x8252
#define GL_GUILTY_CONTEXT_RESET 0x8253
#define GL_GUILTY_CONTEXT_RESET_ARB 0x8253
#define GL_GUILTY_CONTEXT_RESET_EXT 0x8253
#define GL_GUILTY_CONTEXT_RESET_KHR 0x8253
#define GL_INNOCENT_CONTEXT_RESET 0x8254
#define GL_INNOCENT_CONTEXT_RESET_ARB 0x8254
#define GL_INNOCENT_CONTEXT_RESET_EXT 0x8254
#define GL_INNOCENT_CONTEXT_RESET_KHR 0x8254
#define GL_UNKNOWN_CONTEXT_RESET 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_ARB 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_EXT 0x8255
#define GL_UNKNOWN_CONTEXT_RESET_KHR 0x8255
#define GL_RESET_NOTIFICATION_STRATEGY 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_EXT 0x8256
#define GL_RESET_NOTIFICATION_STRATEGY_KHR 0x8256
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
#define GL_PROGRAM_SEPARABLE 0x8258
#define GL_PROGRAM_SEPARABLE_EXT 0x8258
#define GL_ACTIVE_PROGRAM 0x8259
#define GL_ACTIVE_PROGRAM_EXT 0x8259 /* for gles2 */
#define GL_PROGRAM_PIPELINE_BINDING 0x825A
#define GL_PROGRAM_PIPELINE_BINDING_EXT 0x825A
#define GL_MAX_VIEWPORTS 0x825B
#define GL_MAX_VIEWPORTS_NV 0x825B
#define GL_MAX_VIEWPORTS_OES 0x825B
#define GL_VIEWPORT_SUBPIXEL_BITS 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_EXT 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_NV 0x825C
#define GL_VIEWPORT_SUBPIXEL_BITS_OES 0x825C
#define GL_VIEWPORT_BOUNDS_RANGE 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_EXT 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_NV 0x825D
#define GL_VIEWPORT_BOUNDS_RANGE_OES 0x825D
#define GL_LAYER_PROVOKING_VERTEX 0x825E
#define GL_LAYER_PROVOKING_VERTEX_EXT 0x825E
#define GL_LAYER_PROVOKING_VERTEX_OES 0x825E
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV 0x825F
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES 0x825F
#define GL_UNDEFINED_VERTEX 0x8260
#define GL_UNDEFINED_VERTEX_EXT 0x8260
#define GL_UNDEFINED_VERTEX_OES 0x8260
#define GL_NO_RESET_NOTIFICATION 0x8261
#define GL_NO_RESET_NOTIFICATION_ARB 0x8261
#define GL_NO_RESET_NOTIFICATION_EXT 0x8261
#define GL_NO_RESET_NOTIFICATION_KHR 0x8261
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0x8262
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0x8263
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0x8264
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0x8265
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0x8266
#define GL_COMPUTE_WORK_GROUP_SIZE 0x8267
#define GL_DEBUG_TYPE_MARKER 0x8268
#define GL_DEBUG_TYPE_MARKER_KHR 0x8268
#define GL_DEBUG_TYPE_PUSH_GROUP 0x8269
#define GL_DEBUG_TYPE_PUSH_GROUP_KHR 0x8269
#define GL_DEBUG_TYPE_POP_GROUP 0x826A
#define GL_DEBUG_TYPE_POP_GROUP_KHR 0x826A
#define GL_DEBUG_SEVERITY_NOTIFICATION 0x826B
#define GL_DEBUG_SEVERITY_NOTIFICATION_KHR 0x826B
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0x826C
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR 0x826C
#define GL_DEBUG_GROUP_STACK_DEPTH 0x826D
#define GL_DEBUG_GROUP_STACK_DEPTH_KHR 0x826D
#define GL_MAX_UNIFORM_LOCATIONS 0x826E
#define GL_INTERNALFORMAT_SUPPORTED 0x826F
#define GL_INTERNALFORMAT_PREFERRED 0x8270
#define GL_INTERNALFORMAT_RED_SIZE 0x8271
#define GL_INTERNALFORMAT_GREEN_SIZE 0x8272
#define GL_INTERNALFORMAT_BLUE_SIZE 0x8273
#define GL_INTERNALFORMAT_ALPHA_SIZE 0x8274
#define GL_INTERNALFORMAT_DEPTH_SIZE 0x8275
#define GL_INTERNALFORMAT_STENCIL_SIZE 0x8276
#define GL_INTERNALFORMAT_SHARED_SIZE 0x8277
#define GL_INTERNALFORMAT_RED_TYPE 0x8278
#define GL_INTERNALFORMAT_GREEN_TYPE 0x8279
#define GL_INTERNALFORMAT_BLUE_TYPE 0x827A
#define GL_INTERNALFORMAT_ALPHA_TYPE 0x827B
#define GL_INTERNALFORMAT_DEPTH_TYPE 0x827C
#define GL_INTERNALFORMAT_STENCIL_TYPE 0x827D
#define GL_MAX_WIDTH 0x827E
#define GL_MAX_HEIGHT 0x827F
#define GL_MAX_DEPTH 0x8280
#define GL_MAX_LAYERS 0x8281
#define GL_MAX_COMBINED_DIMENSIONS 0x8282
#define GL_COLOR_COMPONENTS 0x8283
#define GL_DEPTH_COMPONENTS 0x8284
#define GL_STENCIL_COMPONENTS 0x8285
#define GL_COLOR_RENDERABLE 0x8286
#define GL_DEPTH_RENDERABLE 0x8287
#define GL_STENCIL_RENDERABLE 0x8288
#define GL_FRAMEBUFFER_RENDERABLE 0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0x828A
#define GL_FRAMEBUFFER_BLEND 0x828B
#define GL_READ_PIXELS 0x828C
#define GL_READ_PIXELS_FORMAT 0x828D
#define GL_READ_PIXELS_TYPE 0x828E
#define GL_TEXTURE_IMAGE_FORMAT 0x828F
#define GL_TEXTURE_IMAGE_TYPE 0x8290
#define GL_GET_TEXTURE_IMAGE_FORMAT 0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE 0x8292
#define GL_MIPMAP 0x8293
#define GL_MANUAL_GENERATE_MIPMAP 0x8294
#define GL_AUTO_GENERATE_MIPMAP 0x8295
#define GL_COLOR_ENCODING 0x8296
#define GL_SRGB_READ 0x8297
#define GL_SRGB_WRITE 0x8298
#define GL_SRGB_DECODE_ARB 0x8299
#define GL_FILTER 0x829A
#define GL_VERTEX_TEXTURE 0x829B
#define GL_TESS_CONTROL_TEXTURE 0x829C
#define GL_TESS_EVALUATION_TEXTURE 0x829D
#define GL_GEOMETRY_TEXTURE 0x829E
#define GL_FRAGMENT_TEXTURE 0x829F
#define GL_COMPUTE_TEXTURE 0x82A0
#define GL_TEXTURE_SHADOW 0x82A1
#define GL_TEXTURE_GATHER 0x82A2
#define GL_TEXTURE_GATHER_SHADOW 0x82A3
#define GL_SHADER_IMAGE_LOAD 0x82A4
#define GL_SHADER_IMAGE_STORE 0x82A5
#define GL_SHADER_IMAGE_ATOMIC 0x82A6
#define GL_IMAGE_TEXEL_SIZE 0x82A7
#define GL_IMAGE_COMPATIBILITY_CLASS 0x82A8
#define GL_IMAGE_PIXEL_FORMAT 0x82A9
#define GL_IMAGE_PIXEL_TYPE 0x82AA
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0x82AF
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0x82B1
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0x82B3
#define GL_CLEAR_BUFFER 0x82B4
#define GL_TEXTURE_VIEW 0x82B5
#define GL_VIEW_COMPATIBILITY_CLASS 0x82B6
#define GL_FULL_SUPPORT 0x82B7
#define GL_CAVEAT_SUPPORT 0x82B8
#define GL_IMAGE_CLASS_4_X_32 0x82B9
#define GL_IMAGE_CLASS_2_X_32 0x82BA
#define GL_IMAGE_CLASS_1_X_32 0x82BB
#define GL_IMAGE_CLASS_4_X_16 0x82BC
#define GL_IMAGE_CLASS_2_X_16 0x82BD
#define GL_IMAGE_CLASS_1_X_16 0x82BE
#define GL_IMAGE_CLASS_4_X_8 0x82BF
#define GL_IMAGE_CLASS_2_X_8 0x82C0
#define GL_IMAGE_CLASS_1_X_8 0x82C1
#define GL_IMAGE_CLASS_11_11_10 0x82C2
#define GL_IMAGE_CLASS_10_10_10_2 0x82C3
#define GL_VIEW_CLASS_128_BITS 0x82C4
#define GL_VIEW_CLASS_96_BITS 0x82C5
#define GL_VIEW_CLASS_64_BITS 0x82C6
#define GL_VIEW_CLASS_48_BITS 0x82C7
#define GL_VIEW_CLASS_32_BITS 0x82C8
#define GL_VIEW_CLASS_24_BITS 0x82C9
#define GL_VIEW_CLASS_16_BITS 0x82CA
#define GL_VIEW_CLASS_8_BITS 0x82CB
#define GL_VIEW_CLASS_S3TC_DXT1_RGB 0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0x82CF
#define GL_VIEW_CLASS_RGTC1_RED 0x82D0
#define GL_VIEW_CLASS_RGTC2_RG 0x82D1
#define GL_VIEW_CLASS_BPTC_UNORM 0x82D2
#define GL_VIEW_CLASS_BPTC_FLOAT 0x82D3
#define GL_VERTEX_ATTRIB_BINDING 0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
#define GL_VERTEX_BINDING_DIVISOR 0x82D6
#define GL_VERTEX_BINDING_OFFSET 0x82D7
#define GL_VERTEX_BINDING_STRIDE 0x82D8
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
#define GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA
#define GL_TEXTURE_VIEW_MIN_LEVEL 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_EXT 0x82DB
#define GL_TEXTURE_VIEW_MIN_LEVEL_OES 0x82DB
#define GL_TEXTURE_VIEW_NUM_LEVELS 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_EXT 0x82DC
#define GL_TEXTURE_VIEW_NUM_LEVELS_OES 0x82DC
#define GL_TEXTURE_VIEW_MIN_LAYER 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_EXT 0x82DD
#define GL_TEXTURE_VIEW_MIN_LAYER_OES 0x82DD
#define GL_TEXTURE_VIEW_NUM_LAYERS 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_EXT 0x82DE
#define GL_TEXTURE_VIEW_NUM_LAYERS_OES 0x82DE
#define GL_TEXTURE_IMMUTABLE_LEVELS 0x82DF
#define GL_BUFFER 0x82E0
#define GL_BUFFER_KHR 0x82E0
#define GL_SHADER 0x82E1
#define GL_SHADER_KHR 0x82E1
#define GL_PROGRAM 0x82E2
#define GL_PROGRAM_KHR 0x82E2
#define GL_QUERY 0x82E3
#define GL_QUERY_KHR 0x82E3
#define GL_PROGRAM_PIPELINE 0x82E4
#define GL_PROGRAM_PIPELINE_KHR 0x82E4
#define GL_MAX_VERTEX_ATTRIB_STRIDE 0x82E5
#define GL_SAMPLER 0x82E6
#define GL_SAMPLER_KHR 0x82E6
#define GL_DISPLAY_LIST 0x82E7
#define GL_MAX_LABEL_LENGTH 0x82E8
#define GL_MAX_LABEL_LENGTH_KHR 0x82E8
#define GL_NUM_SHADING_LANGUAGE_VERSIONS 0x82E9
#define GL_QUERY_TARGET 0x82EA
#define GL_TRANSFORM_FEEDBACK_OVERFLOW 0x82EC
#define GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB 0x82EC
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW 0x82ED
#define GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB 0x82ED
#define GL_VERTICES_SUBMITTED 0x82EE
#define GL_VERTICES_SUBMITTED_ARB 0x82EE
#define GL_PRIMITIVES_SUBMITTED 0x82EF
#define GL_PRIMITIVES_SUBMITTED_ARB 0x82EF
#define GL_VERTEX_SHADER_INVOCATIONS 0x82F0
#define GL_VERTEX_SHADER_INVOCATIONS_ARB 0x82F0
#define GL_TESS_CONTROL_SHADER_PATCHES 0x82F1
#define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0x82F1
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS 0x82F2
#define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0x82F2
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED 0x82F3
#define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0x82F3
#define GL_FRAGMENT_SHADER_INVOCATIONS 0x82F4
#define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0x82F4
#define GL_COMPUTE_SHADER_INVOCATIONS 0x82F5
#define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0x82F5
#define GL_CLIPPING_INPUT_PRIMITIVES 0x82F6
#define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0x82F6
#define GL_CLIPPING_OUTPUT_PRIMITIVES 0x82F7
#define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0x82F7
#define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0x82F8
#define GL_MAX_CULL_DISTANCES 0x82F9
#define GL_MAX_CULL_DISTANCES_EXT 0x82F9
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0x82FA
#define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT 0x82FA
#define GL_CONTEXT_RELEASE_BEHAVIOR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_KHR 0x82FB
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0x82FC
#define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR 0x82FC
#define GL_ROBUST_GPU_TIMEOUT_MS_KHR 0x82FD
#define GL_DEPTH_PASS_INSTRUMENT_SGIX 0x8310
#define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
#define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
#define GL_FRAGMENTS_INSTRUMENT_SGIX 0x8313
#define GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX 0x8314
#define GL_FRAGMENTS_INSTRUMENT_MAX_SGIX 0x8315
#define GL_CONVOLUTION_HINT_SGIX 0x8316
#define GL_YCRCB_SGIX 0x8318
#define GL_YCRCBA_SGIX 0x8319
#define GL_UNPACK_COMPRESSED_SIZE_SGIX 0x831A
#define GL_PACK_MAX_COMPRESSED_SIZE_SGIX 0x831B
#define GL_PACK_COMPRESSED_SIZE_SGIX 0x831C
#define GL_SLIM8U_SGIX 0x831D
#define GL_SLIM10U_SGIX 0x831E
#define GL_SLIM12S_SGIX 0x831F
#define GL_ALPHA_MIN_SGIX 0x8320
#define GL_ALPHA_MAX_SGIX 0x8321
#define GL_SCALEBIAS_HINT_SGIX 0x8322
#define GL_ASYNC_MARKER_SGIX 0x8329
#define GL_PIXEL_TEX_GEN_MODE_SGIX 0x832B
#define GL_ASYNC_HISTOGRAM_SGIX 0x832C
#define GL_MAX_ASYNC_HISTOGRAM_SGIX 0x832D
#define GL_PIXEL_TRANSFORM_2D_EXT 0x8330
#define GL_PIXEL_MAG_FILTER_EXT 0x8331
#define GL_PIXEL_MIN_FILTER_EXT 0x8332
#define GL_PIXEL_CUBIC_WEIGHT_EXT 0x8333
#define GL_CUBIC_EXT 0x8334
#define GL_AVERAGE_EXT 0x8335
#define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
#define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
#define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT 0x8338
#define GL_FRAGMENT_MATERIAL_EXT 0x8349
#define GL_FRAGMENT_NORMAL_EXT 0x834A
#define GL_FRAGMENT_COLOR_EXT 0x834C
#define GL_ATTENUATION_EXT 0x834D
#define GL_SHADOW_ATTENUATION_EXT 0x834E
#define GL_TEXTURE_APPLICATION_MODE_EXT 0x834F
#define GL_TEXTURE_LIGHT_EXT 0x8350
#define GL_TEXTURE_MATERIAL_FACE_EXT 0x8351
#define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
#define GL_PIXEL_TEXTURE_SGIS 0x8353
#define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
#define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
#define GL_PIXEL_GROUP_COLOR_SGIS 0x8356
#define GL_LINE_QUALITY_HINT_SGIX 0x835B
#define GL_ASYNC_TEX_IMAGE_SGIX 0x835C
#define GL_ASYNC_DRAW_PIXELS_SGIX 0x835D
#define GL_ASYNC_READ_PIXELS_SGIX 0x835E
#define GL_MAX_ASYNC_TEX_IMAGE_SGIX 0x835F
#define GL_MAX_ASYNC_DRAW_PIXELS_SGIX 0x8360
#define GL_MAX_ASYNC_READ_PIXELS_SGIX 0x8361
#define GL_UNSIGNED_BYTE_2_3_3_REV 0x8362
#define GL_UNSIGNED_BYTE_2_3_3_REV_EXT 0x8362
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_EXT 0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV 0x8364
#define GL_UNSIGNED_SHORT_5_6_5_REV_EXT 0x8364
#define GL_UNSIGNED_SHORT_4_4_4_4_REV 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT 0x8365
#define GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG 0x8365
#define GL_UNSIGNED_SHORT_1_5_5_5_REV 0x8366
#define GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT 0x8366
#define GL_UNSIGNED_INT_8_8_8_8_REV 0x8367
#define GL_UNSIGNED_INT_8_8_8_8_REV_EXT 0x8367
#define GL_UNSIGNED_INT_2_10_10_10_REV 0x8368
#define GL_UNSIGNED_INT_2_10_10_10_REV_EXT 0x8368
#define GL_TEXTURE_MAX_CLAMP_S_SGIX 0x8369
#define GL_TEXTURE_MAX_CLAMP_T_SGIX 0x836A
#define GL_TEXTURE_MAX_CLAMP_R_SGIX 0x836B
#define GL_MIRRORED_REPEAT 0x8370
#define GL_MIRRORED_REPEAT_ARB 0x8370
#define GL_MIRRORED_REPEAT_IBM 0x8370
#define GL_MIRRORED_REPEAT_OES 0x8370
#define GL_RGB_S3TC 0x83A0
#define GL_RGB4_S3TC 0x83A1
#define GL_RGBA_S3TC 0x83A2
#define GL_RGBA4_S3TC 0x83A3
#define GL_RGBA_DXT5_S3TC 0x83A4
#define GL_RGBA4_DXT5_S3TC 0x83A5
#define GL_VERTEX_PRECLIP_SGIX 0x83EE
#define GL_VERTEX_PRECLIP_HINT_SGIX 0x83EF
#define GL_COMPRESSED_RGB_S3TC_DXT1_EXT 0x83F0
#define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT 0x83F1
#define GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT 0x83F2
#define GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE 0x83F3
#define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT 0x83F3
#define GL_PARALLEL_ARRAYS_INTEL 0x83F4
#define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
#define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
#define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
#define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
#define GL_PERFQUERY_DONOT_FLUSH_INTEL 0x83F9
#define GL_PERFQUERY_FLUSH_INTEL 0x83FA
#define GL_PERFQUERY_WAIT_INTEL 0x83FB
#define GL_CONSERVATIVE_RASTERIZATION_INTEL 0x83FE
#define GL_TEXTURE_MEMORY_LAYOUT_INTEL 0x83FF
#define GL_FRAGMENT_LIGHTING_SGIX 0x8400
#define GL_FRAGMENT_COLOR_MATERIAL_SGIX 0x8401
#define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
#define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
#define GL_MAX_FRAGMENT_LIGHTS_SGIX 0x8404
#define GL_MAX_ACTIVE_LIGHTS_SGIX 0x8405
#define GL_CURRENT_RASTER_NORMAL_SGIX 0x8406
#define GL_LIGHT_ENV_MODE_SGIX 0x8407
#define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
#define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
#define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
#define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
#define GL_FRAGMENT_LIGHT0_SGIX 0x840C
#define GL_FRAGMENT_LIGHT1_SGIX 0x840D
#define GL_FRAGMENT_LIGHT2_SGIX 0x840E
#define GL_FRAGMENT_LIGHT3_SGIX 0x840F
#define GL_FRAGMENT_LIGHT4_SGIX 0x8410
#define GL_FRAGMENT_LIGHT5_SGIX 0x8411
#define GL_FRAGMENT_LIGHT6_SGIX 0x8412
#define GL_FRAGMENT_LIGHT7_SGIX 0x8413
#define GL_PACK_RESAMPLE_SGIX 0x842E
#define GL_UNPACK_RESAMPLE_SGIX 0x842F
#define GL_RESAMPLE_DECIMATE_SGIX 0x8430
#define GL_RESAMPLE_REPLICATE_SGIX 0x8433
#define GL_RESAMPLE_ZERO_FILL_SGIX 0x8434
#define GL_TANGENT_ARRAY_EXT 0x8439
#define GL_BINORMAL_ARRAY_EXT 0x843A
#define GL_CURRENT_TANGENT_EXT 0x843B
#define GL_CURRENT_BINORMAL_EXT 0x843C
#define GL_TANGENT_ARRAY_TYPE_EXT 0x843E
#define GL_TANGENT_ARRAY_STRIDE_EXT 0x843F
#define GL_BINORMAL_ARRAY_TYPE_EXT 0x8440
#define GL_BINORMAL_ARRAY_STRIDE_EXT 0x8441
#define GL_TANGENT_ARRAY_POINTER_EXT 0x8442
#define GL_BINORMAL_ARRAY_POINTER_EXT 0x8443
#define GL_MAP1_TANGENT_EXT 0x8444
#define GL_MAP2_TANGENT_EXT 0x8445
#define GL_MAP1_BINORMAL_EXT 0x8446
#define GL_MAP2_BINORMAL_EXT 0x8447
#define GL_NEAREST_CLIPMAP_NEAREST_SGIX 0x844D
#define GL_NEAREST_CLIPMAP_LINEAR_SGIX 0x844E
#define GL_LINEAR_CLIPMAP_NEAREST_SGIX 0x844F
#define GL_FOG_COORDINATE_SOURCE 0x8450
#define GL_FOG_COORDINATE_SOURCE_EXT 0x8450
#define GL_FOG_COORD_SRC 0x8450
#define GL_FOG_COORD 0x8451
#define GL_FOG_COORDINATE 0x8451
#define GL_FOG_COORDINATE_EXT 0x8451
#define GL_FRAGMENT_DEPTH 0x8452
#define GL_FRAGMENT_DEPTH_EXT 0x8452
#define GL_CURRENT_FOG_COORD 0x8453
#define GL_CURRENT_FOG_COORDINATE 0x8453
#define GL_CURRENT_FOG_COORDINATE_EXT 0x8453
#define GL_FOG_COORDINATE_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_TYPE_EXT 0x8454
#define GL_FOG_COORD_ARRAY_TYPE 0x8454
#define GL_FOG_COORDINATE_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
#define GL_FOG_COORD_ARRAY_STRIDE 0x8455
#define GL_FOG_COORDINATE_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
#define GL_FOG_COORD_ARRAY_POINTER 0x8456
#define GL_FOG_COORDINATE_ARRAY 0x8457
#define GL_FOG_COORDINATE_ARRAY_EXT 0x8457
#define GL_FOG_COORD_ARRAY 0x8457
#define GL_COLOR_SUM 0x8458
#define GL_COLOR_SUM_ARB 0x8458
#define GL_COLOR_SUM_EXT 0x8458
#define GL_CURRENT_SECONDARY_COLOR 0x8459
#define GL_CURRENT_SECONDARY_COLOR_EXT 0x8459
#define GL_SECONDARY_COLOR_ARRAY_SIZE 0x845A
#define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
#define GL_SECONDARY_COLOR_ARRAY_TYPE 0x845B
#define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
#define GL_SECONDARY_COLOR_ARRAY_STRIDE 0x845C
#define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
#define GL_SECONDARY_COLOR_ARRAY_POINTER 0x845D
#define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
#define GL_SECONDARY_COLOR_ARRAY 0x845E
#define GL_SECONDARY_COLOR_ARRAY_EXT 0x845E
#define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_SCREEN_COORDINATES_REND 0x8490
#define GL_INVERTED_SCREEN_W_REND 0x8491
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE0_ARB 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE1_ARB 0x84C1
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE2_ARB 0x84C2
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE3_ARB 0x84C3
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE4_ARB 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE5_ARB 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE6_ARB 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE7_ARB 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE8_ARB 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE9_ARB 0x84C9
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE10_ARB 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE11_ARB 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE12_ARB 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE13_ARB 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE14_ARB 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE15_ARB 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE16_ARB 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE17_ARB 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE18_ARB 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE19_ARB 0x84D3
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE20_ARB 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE21_ARB 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE22_ARB 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE23_ARB 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE24_ARB 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE25_ARB 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE26_ARB 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE27_ARB 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE28_ARB 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE29_ARB 0x84DD
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE30_ARB 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE31_ARB 0x84DF
#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ACTIVE_TEXTURE_ARB 0x84E0
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIENT_ACTIVE_TEXTURE_ARB 0x84E1
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_TEXTURE_UNITS_ARB 0x84E2
#define GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX 0x84E3
#define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
#define GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX 0x84E4
#define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX 0x84E5
#define GL_TRANSPOSE_TEXTURE_MATRIX_ARB 0x84E5
#define GL_TRANSPOSE_COLOR_MATRIX 0x84E6
#define GL_TRANSPOSE_COLOR_MATRIX_ARB 0x84E6
#define GL_SUBTRACT 0x84E7
#define GL_SUBTRACT_ARB 0x84E7
#define GL_MAX_RENDERBUFFER_SIZE 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_EXT 0x84E8
#define GL_MAX_RENDERBUFFER_SIZE_OES 0x84E8
#define GL_COMPRESSED_ALPHA 0x84E9
#define GL_COMPRESSED_ALPHA_ARB 0x84E9
#define GL_COMPRESSED_LUMINANCE 0x84EA
#define GL_COMPRESSED_LUMINANCE_ARB 0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA 0x84EB
#define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
#define GL_COMPRESSED_INTENSITY 0x84EC
#define GL_COMPRESSED_INTENSITY_ARB 0x84EC
#define GL_COMPRESSED_RGB 0x84ED
#define GL_COMPRESSED_RGB_ARB 0x84ED
#define GL_COMPRESSED_RGBA 0x84EE
#define GL_COMPRESSED_RGBA_ARB 0x84EE
#define GL_TEXTURE_COMPRESSION_HINT 0x84EF
#define GL_TEXTURE_COMPRESSION_HINT_ARB 0x84EF
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
#define GL_ALL_COMPLETED_NV 0x84F2
#define GL_FENCE_STATUS_NV 0x84F3
#define GL_FENCE_CONDITION_NV 0x84F4
#define GL_TEXTURE_RECTANGLE 0x84F5
#define GL_TEXTURE_RECTANGLE_ARB 0x84F5
#define GL_TEXTURE_RECTANGLE_NV 0x84F5
#define GL_TEXTURE_BINDING_RECTANGLE 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_ARB 0x84F6
#define GL_TEXTURE_BINDING_RECTANGLE_NV 0x84F6
#define GL_PROXY_TEXTURE_RECTANGLE 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_ARB 0x84F7
#define GL_PROXY_TEXTURE_RECTANGLE_NV 0x84F7
#define GL_MAX_RECTANGLE_TEXTURE_SIZE 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
#define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV 0x84F8
#define GL_DEPTH_STENCIL 0x84F9
#define GL_DEPTH_STENCIL_EXT 0x84F9
#define GL_DEPTH_STENCIL_NV 0x84F9
#define GL_DEPTH_STENCIL_OES 0x84F9
#define GL_UNSIGNED_INT_24_8 0x84FA
#define GL_UNSIGNED_INT_24_8_EXT 0x84FA
#define GL_UNSIGNED_INT_24_8_NV 0x84FA
#define GL_UNSIGNED_INT_24_8_OES 0x84FA
#define GL_MAX_TEXTURE_LOD_BIAS 0x84FD
#define GL_MAX_TEXTURE_LOD_BIAS_EXT 0x84FD
#define GL_TEXTURE_MAX_ANISOTROPY 0x84FE
#define GL_TEXTURE_MAX_ANISOTROPY_EXT 0x84FE
#define GL_MAX_TEXTURE_MAX_ANISOTROPY 0x84FF
#define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
#define GL_TEXTURE_FILTER_CONTROL 0x8500
#define GL_TEXTURE_FILTER_CONTROL_EXT 0x8500
#define GL_TEXTURE_LOD_BIAS 0x8501
#define GL_TEXTURE_LOD_BIAS_EXT 0x8501
#define GL_MODELVIEW1_STACK_DEPTH_EXT 0x8502
#define GL_COMBINE4_NV 0x8503
#define GL_MAX_SHININESS_NV 0x8504
#define GL_MAX_SPOT_EXPONENT_NV 0x8505
#define GL_MODELVIEW1_MATRIX_EXT 0x8506
#define GL_INCR_WRAP 0x8507
#define GL_INCR_WRAP_EXT 0x8507
#define GL_INCR_WRAP_OES 0x8507
#define GL_DECR_WRAP 0x8508
#define GL_DECR_WRAP_EXT 0x8508
#define GL_DECR_WRAP_OES 0x8508
#define GL_VERTEX_WEIGHTING_EXT 0x8509
#define GL_MODELVIEW1_ARB 0x850A
#define GL_MODELVIEW1_EXT 0x850A
#define GL_CURRENT_VERTEX_WEIGHT_EXT 0x850B
#define GL_VERTEX_WEIGHT_ARRAY_EXT 0x850C
#define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT 0x850D
#define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT 0x850E
#define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
#define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
#define GL_NORMAL_MAP 0x8511
#define GL_NORMAL_MAP_ARB 0x8511
#define GL_NORMAL_MAP_EXT 0x8511
#define GL_NORMAL_MAP_NV 0x8511
#define GL_NORMAL_MAP_OES 0x8511
#define GL_REFLECTION_MAP 0x8512
#define GL_REFLECTION_MAP_ARB 0x8512
#define GL_REFLECTION_MAP_EXT 0x8512
#define GL_REFLECTION_MAP_NV 0x8512
#define GL_REFLECTION_MAP_OES 0x8512
#define GL_TEXTURE_CUBE_MAP 0x8513
#define GL_TEXTURE_CUBE_MAP_ARB 0x8513
#define GL_TEXTURE_CUBE_MAP_EXT 0x8513
#define GL_TEXTURE_CUBE_MAP_OES 0x8513
#define GL_TEXTURE_BINDING_CUBE_MAP 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_ARB 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_EXT 0x8514
#define GL_TEXTURE_BINDING_CUBE_MAP_OES 0x8514
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES 0x8515
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES 0x8516
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES 0x8517
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES 0x8518
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES 0x8519
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES 0x851A
#define GL_PROXY_TEXTURE_CUBE_MAP 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARB 0x851B
#define GL_PROXY_TEXTURE_CUBE_MAP_EXT 0x851B
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT 0x851C
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES 0x851C
#define GL_VERTEX_ARRAY_RANGE_APPLE 0x851D
#define GL_VERTEX_ARRAY_RANGE_NV 0x851D
#define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
#define GL_VERTEX_ARRAY_RANGE_LENGTH_NV 0x851E
#define GL_VERTEX_ARRAY_RANGE_VALID_NV 0x851F
#define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
#define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
#define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
#define GL_VERTEX_ARRAY_RANGE_POINTER_NV 0x8521
#define GL_REGISTER_COMBINERS_NV 0x8522
#define GL_VARIABLE_A_NV 0x8523
#define GL_VARIABLE_B_NV 0x8524
#define GL_VARIABLE_C_NV 0x8525
#define GL_VARIABLE_D_NV 0x8526
#define GL_VARIABLE_E_NV 0x8527
#define GL_VARIABLE_F_NV 0x8528
#define GL_VARIABLE_G_NV 0x8529
#define GL_CONSTANT_COLOR0_NV 0x852A
#define GL_CONSTANT_COLOR1_NV 0x852B
#define GL_PRIMARY_COLOR_NV 0x852C
#define GL_SECONDARY_COLOR_NV 0x852D
#define GL_SPARE0_NV 0x852E
#define GL_SPARE1_NV 0x852F
#define GL_DISCARD_NV 0x8530
#define GL_E_TIMES_F_NV 0x8531
#define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
#define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
#define GL_MULTISAMPLE_FILTER_HINT_NV 0x8534
#define GL_PER_STAGE_CONSTANTS_NV 0x8535
#define GL_UNSIGNED_IDENTITY_NV 0x8536
#define GL_UNSIGNED_INVERT_NV 0x8537
#define GL_EXPAND_NORMAL_NV 0x8538
#define GL_EXPAND_NEGATE_NV 0x8539
#define GL_HALF_BIAS_NORMAL_NV 0x853A
#define GL_HALF_BIAS_NEGATE_NV 0x853B
#define GL_SIGNED_IDENTITY_NV 0x853C
#define GL_SIGNED_NEGATE_NV 0x853D
#define GL_SCALE_BY_TWO_NV 0x853E
#define GL_SCALE_BY_FOUR_NV 0x853F
#define GL_SCALE_BY_ONE_HALF_NV 0x8540
#define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV 0x8541
#define GL_COMBINER_INPUT_NV 0x8542
#define GL_COMBINER_MAPPING_NV 0x8543
#define GL_COMBINER_COMPONENT_USAGE_NV 0x8544
#define GL_COMBINER_AB_DOT_PRODUCT_NV 0x8545
#define GL_COMBINER_CD_DOT_PRODUCT_NV 0x8546
#define GL_COMBINER_MUX_SUM_NV 0x8547
#define GL_COMBINER_SCALE_NV 0x8548
#define GL_COMBINER_BIAS_NV 0x8549
#define GL_COMBINER_AB_OUTPUT_NV 0x854A
#define GL_COMBINER_CD_OUTPUT_NV 0x854B
#define GL_COMBINER_SUM_OUTPUT_NV 0x854C
#define GL_MAX_GENERAL_COMBINERS_NV 0x854D
#define GL_NUM_GENERAL_COMBINERS_NV 0x854E
#define GL_COLOR_SUM_CLAMP_NV 0x854F
#define GL_COMBINER0_NV 0x8550
#define GL_COMBINER1_NV 0x8551
#define GL_COMBINER2_NV 0x8552
#define GL_COMBINER3_NV 0x8553
#define GL_COMBINER4_NV 0x8554
#define GL_COMBINER5_NV 0x8555
#define GL_COMBINER6_NV 0x8556
#define GL_COMBINER7_NV 0x8557
#define GL_PRIMITIVE_RESTART_NV 0x8558
#define GL_PRIMITIVE_RESTART_INDEX_NV 0x8559
#define GL_FOG_DISTANCE_MODE_NV 0x855A
#define GL_EYE_RADIAL_NV 0x855B
#define GL_EYE_PLANE_ABSOLUTE_NV 0x855C
#define GL_EMBOSS_LIGHT_NV 0x855D
#define GL_EMBOSS_CONSTANT_NV 0x855E
#define GL_EMBOSS_MAP_NV 0x855F
#define GL_RED_MIN_CLAMP_INGR 0x8560
#define GL_GREEN_MIN_CLAMP_INGR 0x8561
#define GL_BLUE_MIN_CLAMP_INGR 0x8562
#define GL_ALPHA_MIN_CLAMP_INGR 0x8563
#define GL_RED_MAX_CLAMP_INGR 0x8564
#define GL_GREEN_MAX_CLAMP_INGR 0x8565
#define GL_BLUE_MAX_CLAMP_INGR 0x8566
#define GL_ALPHA_MAX_CLAMP_INGR 0x8567
#define GL_INTERLACE_READ_INGR 0x8568
#define GL_COMBINE 0x8570
#define GL_COMBINE_ARB 0x8570
#define GL_COMBINE_EXT 0x8570
#define GL_COMBINE_RGB 0x8571
#define GL_COMBINE_RGB_ARB 0x8571
#define GL_COMBINE_RGB_EXT 0x8571
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_ALPHA_ARB 0x8572
#define GL_COMBINE_ALPHA_EXT 0x8572
#define GL_RGB_SCALE 0x8573
#define GL_RGB_SCALE_ARB 0x8573
#define GL_RGB_SCALE_EXT 0x8573
#define GL_ADD_SIGNED 0x8574
#define GL_ADD_SIGNED_ARB 0x8574
#define GL_ADD_SIGNED_EXT 0x8574
#define GL_INTERPOLATE 0x8575
#define GL_INTERPOLATE_ARB 0x8575
#define GL_INTERPOLATE_EXT 0x8575
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ARB 0x8576
#define GL_CONSTANT_EXT 0x8576
#define GL_CONSTANT_NV 0x8576
#define GL_PRIMARY_COLOR 0x8577
#define GL_PRIMARY_COLOR_ARB 0x8577
#define GL_PRIMARY_COLOR_EXT 0x8577
#define GL_PREVIOUS 0x8578
#define GL_PREVIOUS_ARB 0x8578
#define GL_PREVIOUS_EXT 0x8578
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE0_RGB_ARB 0x8580
#define GL_SOURCE0_RGB_EXT 0x8580
#define GL_SRC0_RGB 0x8580
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE1_RGB_ARB 0x8581
#define GL_SOURCE1_RGB_EXT 0x8581
#define GL_SRC1_RGB 0x8581
#define GL_SOURCE2_RGB 0x8582
#define GL_SOURCE2_RGB_ARB 0x8582
#define GL_SOURCE2_RGB_EXT 0x8582
#define GL_SRC2_RGB 0x8582
#define GL_SOURCE3_RGB_NV 0x8583
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_ALPHA_ARB 0x8588
#define GL_SOURCE0_ALPHA_EXT 0x8588
#define GL_SRC0_ALPHA 0x8588
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_ALPHA_ARB 0x8589
#define GL_SOURCE1_ALPHA_EXT 0x8589
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_ALPHA_EXT 0x8589
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_ALPHA_ARB 0x858A
#define GL_SOURCE2_ALPHA_EXT 0x858A
#define GL_SRC2_ALPHA 0x858A
#define GL_SOURCE3_ALPHA_NV 0x858B
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND0_RGB_ARB 0x8590
#define GL_OPERAND0_RGB_EXT 0x8590
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND1_RGB_ARB 0x8591
#define GL_OPERAND1_RGB_EXT 0x8591
#define GL_OPERAND2_RGB 0x8592
#define GL_OPERAND2_RGB_ARB 0x8592
#define GL_OPERAND2_RGB_EXT 0x8592
#define GL_OPERAND3_RGB_NV 0x8593
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_ALPHA_ARB 0x8598
#define GL_OPERAND0_ALPHA_EXT 0x8598
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_ALPHA_ARB 0x8599
#define GL_OPERAND1_ALPHA_EXT 0x8599
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_ALPHA_ARB 0x859A
#define GL_OPERAND2_ALPHA_EXT 0x859A
#define GL_OPERAND3_ALPHA_NV 0x859B
#define GL_PACK_SUBSAMPLE_RATE_SGIX 0x85A0
#define GL_UNPACK_SUBSAMPLE_RATE_SGIX 0x85A1
#define GL_PIXEL_SUBSAMPLE_4444_SGIX 0x85A2
#define GL_PIXEL_SUBSAMPLE_2424_SGIX 0x85A3
#define GL_PIXEL_SUBSAMPLE_4242_SGIX 0x85A4
#define GL_PERTURB_EXT 0x85AE
#define GL_TEXTURE_NORMAL_EXT 0x85AF
#define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
#define GL_TRANSFORM_HINT_APPLE 0x85B1
#define GL_UNPACK_CLIENT_STORAGE_APPLE 0x85B2
#define GL_BUFFER_OBJECT_APPLE 0x85B3
#define GL_STORAGE_CLIENT_APPLE 0x85B4
#define GL_VERTEX_ARRAY_BINDING 0x85B5
#define GL_VERTEX_ARRAY_BINDING_APPLE 0x85B5
#define GL_VERTEX_ARRAY_BINDING_OES 0x85B5
#define GL_TEXTURE_RANGE_LENGTH_APPLE 0x85B7
#define GL_TEXTURE_RANGE_POINTER_APPLE 0x85B8
#define GL_YCBCR_422_APPLE 0x85B9
#define GL_UNSIGNED_SHORT_8_8_APPLE 0x85BA
#define GL_UNSIGNED_SHORT_8_8_MESA 0x85BA
#define GL_UNSIGNED_SHORT_8_8_REV_APPLE 0x85BB
#define GL_UNSIGNED_SHORT_8_8_REV_MESA 0x85BB
#define GL_TEXTURE_STORAGE_HINT_APPLE 0x85BC
#define GL_STORAGE_PRIVATE_APPLE 0x85BD
#define GL_STORAGE_CACHED_APPLE 0x85BE
#define GL_STORAGE_SHARED_APPLE 0x85BF
#define GL_REPLACEMENT_CODE_ARRAY_SUN 0x85C0
#define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
#define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
#define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
#define GL_R1UI_V3F_SUN 0x85C4
#define GL_R1UI_C4UB_V3F_SUN 0x85C5
#define GL_R1UI_C3F_V3F_SUN 0x85C6
#define GL_R1UI_N3F_V3F_SUN 0x85C7
#define GL_R1UI_C4F_N3F_V3F_SUN 0x85C8
#define GL_R1UI_T2F_V3F_SUN 0x85C9
#define GL_R1UI_T2F_N3F_V3F_SUN 0x85CA
#define GL_R1UI_T2F_C4F_N3F_V3F_SUN 0x85CB
#define GL_SLICE_ACCUM_SUN 0x85CC
#define GL_QUAD_MESH_SUN 0x8614
#define GL_TRIANGLE_MESH_SUN 0x8615
#define GL_VERTEX_PROGRAM_ARB 0x8620
#define GL_VERTEX_PROGRAM_NV 0x8620
#define GL_VERTEX_STATE_PROGRAM_NV 0x8621
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0x8622
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
#define GL_ATTRIB_ARRAY_SIZE_NV 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE 0x8623
#define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB 0x8623
#define GL_ATTRIB_ARRAY_STRIDE_NV 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
#define GL_ATTRIB_ARRAY_TYPE_NV 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE 0x8625
#define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB 0x8625
#define GL_CURRENT_ATTRIB_NV 0x8626
#define GL_CURRENT_VERTEX_ATTRIB 0x8626
#define GL_CURRENT_VERTEX_ATTRIB_ARB 0x8626
#define GL_PROGRAM_LENGTH_ARB 0x8627
#define GL_PROGRAM_LENGTH_NV 0x8627
#define GL_PROGRAM_STRING_ARB 0x8628
#define GL_PROGRAM_STRING_NV 0x8628
#define GL_MODELVIEW_PROJECTION_NV 0x8629
#define GL_IDENTITY_NV 0x862A
#define GL_INVERSE_NV 0x862B
#define GL_TRANSPOSE_NV 0x862C
#define GL_INVERSE_TRANSPOSE_NV 0x862D
#define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
#define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
#define GL_MAX_PROGRAM_MATRICES_ARB 0x862F
#define GL_MAX_TRACK_MATRICES_NV 0x862F
#define GL_MATRIX0_NV 0x8630
#define GL_MATRIX1_NV 0x8631
#define GL_MATRIX2_NV 0x8632
#define GL_MATRIX3_NV 0x8633
#define GL_MATRIX4_NV 0x8634
#define GL_MATRIX5_NV 0x8635
#define GL_MATRIX6_NV 0x8636
#define GL_MATRIX7_NV 0x8637
#define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
#define GL_CURRENT_MATRIX_STACK_DEPTH_NV 0x8640
#define GL_CURRENT_MATRIX_ARB 0x8641
#define GL_CURRENT_MATRIX_NV 0x8641
#define GL_PROGRAM_POINT_SIZE 0x8642
#define GL_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_PROGRAM_POINT_SIZE_EXT 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_ARB 0x8642
#define GL_VERTEX_PROGRAM_POINT_SIZE_NV 0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_ARB 0x8643
#define GL_VERTEX_PROGRAM_TWO_SIDE_NV 0x8643
#define GL_PROGRAM_PARAMETER_NV 0x8644
#define GL_ATTRIB_ARRAY_POINTER_NV 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER 0x8645
#define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
#define GL_PROGRAM_TARGET_NV 0x8646
#define GL_PROGRAM_RESIDENT_NV 0x8647
#define GL_TRACK_MATRIX_NV 0x8648
#define GL_TRACK_MATRIX_TRANSFORM_NV 0x8649
#define GL_VERTEX_PROGRAM_BINDING_NV 0x864A
#define GL_PROGRAM_ERROR_POSITION_ARB 0x864B
#define GL_PROGRAM_ERROR_POSITION_NV 0x864B
#define GL_OFFSET_TEXTURE_RECTANGLE_NV 0x864C
#define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
#define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
#define GL_DEPTH_CLAMP 0x864F
#define GL_DEPTH_CLAMP_NV 0x864F
#define GL_VERTEX_ATTRIB_ARRAY0_NV 0x8650
#define GL_VERTEX_ATTRIB_ARRAY1_NV 0x8651
#define GL_VERTEX_ATTRIB_ARRAY2_NV 0x8652
#define GL_VERTEX_ATTRIB_ARRAY3_NV 0x8653
#define GL_VERTEX_ATTRIB_ARRAY4_NV 0x8654
#define GL_VERTEX_ATTRIB_ARRAY5_NV 0x8655
#define GL_VERTEX_ATTRIB_ARRAY6_NV 0x8656
#define GL_VERTEX_ATTRIB_ARRAY7_NV 0x8657
#define GL_VERTEX_ATTRIB_ARRAY8_NV 0x8658
#define GL_VERTEX_ATTRIB_ARRAY9_NV 0x8659
#define GL_VERTEX_ATTRIB_ARRAY10_NV 0x865A
#define GL_VERTEX_ATTRIB_ARRAY11_NV 0x865B
#define GL_VERTEX_ATTRIB_ARRAY12_NV 0x865C
#define GL_VERTEX_ATTRIB_ARRAY13_NV 0x865D
#define GL_VERTEX_ATTRIB_ARRAY14_NV 0x865E
#define GL_VERTEX_ATTRIB_ARRAY15_NV 0x865F
#define GL_MAP1_VERTEX_ATTRIB0_4_NV 0x8660
#define GL_MAP1_VERTEX_ATTRIB1_4_NV 0x8661
#define GL_MAP1_VERTEX_ATTRIB2_4_NV 0x8662
#define GL_MAP1_VERTEX_ATTRIB3_4_NV 0x8663
#define GL_MAP1_VERTEX_ATTRIB4_4_NV 0x8664
#define GL_MAP1_VERTEX_ATTRIB5_4_NV 0x8665
#define GL_MAP1_VERTEX_ATTRIB6_4_NV 0x8666
#define GL_MAP1_VERTEX_ATTRIB7_4_NV 0x8667
#define GL_MAP1_VERTEX_ATTRIB8_4_NV 0x8668
#define GL_MAP1_VERTEX_ATTRIB9_4_NV 0x8669
#define GL_MAP1_VERTEX_ATTRIB10_4_NV 0x866A
#define GL_MAP1_VERTEX_ATTRIB11_4_NV 0x866B
#define GL_MAP1_VERTEX_ATTRIB12_4_NV 0x866C
#define GL_MAP1_VERTEX_ATTRIB13_4_NV 0x866D
#define GL_MAP1_VERTEX_ATTRIB14_4_NV 0x866E
#define GL_MAP1_VERTEX_ATTRIB15_4_NV 0x866F
#define GL_MAP2_VERTEX_ATTRIB0_4_NV 0x8670
#define GL_MAP2_VERTEX_ATTRIB1_4_NV 0x8671
#define GL_MAP2_VERTEX_ATTRIB2_4_NV 0x8672
#define GL_MAP2_VERTEX_ATTRIB3_4_NV 0x8673
#define GL_MAP2_VERTEX_ATTRIB4_4_NV 0x8674
#define GL_MAP2_VERTEX_ATTRIB5_4_NV 0x8675
#define GL_MAP2_VERTEX_ATTRIB6_4_NV 0x8676
#define GL_MAP2_VERTEX_ATTRIB7_4_NV 0x8677
#define GL_PROGRAM_BINDING_ARB 0x8677
#define GL_MAP2_VERTEX_ATTRIB8_4_NV 0x8678
#define GL_MAP2_VERTEX_ATTRIB9_4_NV 0x8679
#define GL_MAP2_VERTEX_ATTRIB10_4_NV 0x867A
#define GL_MAP2_VERTEX_ATTRIB11_4_NV 0x867B
#define GL_MAP2_VERTEX_ATTRIB12_4_NV 0x867C
#define GL_MAP2_VERTEX_ATTRIB13_4_NV 0x867D
#define GL_MAP2_VERTEX_ATTRIB14_4_NV 0x867E
#define GL_MAP2_VERTEX_ATTRIB15_4_NV 0x867F
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0x86A0
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
#define GL_TEXTURE_COMPRESSED 0x86A1
#define GL_TEXTURE_COMPRESSED_ARB 0x86A1
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
#define GL_MAX_VERTEX_UNITS_ARB 0x86A4
#define GL_MAX_VERTEX_UNITS_OES 0x86A4
#define GL_ACTIVE_VERTEX_UNITS_ARB 0x86A5
#define GL_WEIGHT_SUM_UNITY_ARB 0x86A6
#define GL_VERTEX_BLEND_ARB 0x86A7
#define GL_CURRENT_WEIGHT_ARB 0x86A8
#define GL_WEIGHT_ARRAY_TYPE_ARB 0x86A9
#define GL_WEIGHT_ARRAY_TYPE_OES 0x86A9
#define GL_WEIGHT_ARRAY_STRIDE_ARB 0x86AA
#define GL_WEIGHT_ARRAY_STRIDE_OES 0x86AA
#define GL_WEIGHT_ARRAY_SIZE_ARB 0x86AB
#define GL_WEIGHT_ARRAY_SIZE_OES 0x86AB
#define GL_WEIGHT_ARRAY_POINTER_ARB 0x86AC
#define GL_WEIGHT_ARRAY_POINTER_OES 0x86AC
#define GL_WEIGHT_ARRAY_ARB 0x86AD
#define GL_WEIGHT_ARRAY_OES 0x86AD
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGB_ARB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DOT3_RGBA_ARB 0x86AF
#define GL_DOT3_RGBA_IMG 0x86AF
#define GL_COMPRESSED_RGB_FXT1_3DFX 0x86B0
#define GL_COMPRESSED_RGBA_FXT1_3DFX 0x86B1
#define GL_MULTISAMPLE_3DFX 0x86B2
#define GL_SAMPLE_BUFFERS_3DFX 0x86B3
#define GL_SAMPLES_3DFX 0x86B4
#define GL_EVAL_2D_NV 0x86C0
#define GL_EVAL_TRIANGULAR_2D_NV 0x86C1
#define GL_MAP_TESSELLATION_NV 0x86C2
#define GL_MAP_ATTRIB_U_ORDER_NV 0x86C3
#define GL_MAP_ATTRIB_V_ORDER_NV 0x86C4
#define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
#define GL_EVAL_VERTEX_ATTRIB0_NV 0x86C6
#define GL_EVAL_VERTEX_ATTRIB1_NV 0x86C7
#define GL_EVAL_VERTEX_ATTRIB2_NV 0x86C8
#define GL_EVAL_VERTEX_ATTRIB3_NV 0x86C9
#define GL_EVAL_VERTEX_ATTRIB4_NV 0x86CA
#define GL_EVAL_VERTEX_ATTRIB5_NV 0x86CB
#define GL_EVAL_VERTEX_ATTRIB6_NV 0x86CC
#define GL_EVAL_VERTEX_ATTRIB7_NV 0x86CD
#define GL_EVAL_VERTEX_ATTRIB8_NV 0x86CE
#define GL_EVAL_VERTEX_ATTRIB9_NV 0x86CF
#define GL_EVAL_VERTEX_ATTRIB10_NV 0x86D0
#define GL_EVAL_VERTEX_ATTRIB11_NV 0x86D1
#define GL_EVAL_VERTEX_ATTRIB12_NV 0x86D2
#define GL_EVAL_VERTEX_ATTRIB13_NV 0x86D3
#define GL_EVAL_VERTEX_ATTRIB14_NV 0x86D4
#define GL_EVAL_VERTEX_ATTRIB15_NV 0x86D5
#define GL_MAX_MAP_TESSELLATION_NV 0x86D6
#define GL_MAX_RATIONAL_EVAL_ORDER_NV 0x86D7
#define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV 0x86D8
#define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
#define GL_UNSIGNED_INT_S8_S8_8_8_NV 0x86DA
#define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV 0x86DB
#define GL_DSDT_MAG_INTENSITY_NV 0x86DC
#define GL_SHADER_CONSISTENT_NV 0x86DD
#define GL_TEXTURE_SHADER_NV 0x86DE
#define GL_SHADER_OPERATION_NV 0x86DF
#define GL_CULL_MODES_NV 0x86E0
#define GL_OFFSET_TEXTURE_2D_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_MATRIX_NV 0x86E1
#define GL_OFFSET_TEXTURE_2D_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_SCALE_NV 0x86E2
#define GL_OFFSET_TEXTURE_2D_BIAS_NV 0x86E3
#define GL_OFFSET_TEXTURE_BIAS_NV 0x86E3
#define GL_PREVIOUS_TEXTURE_INPUT_NV 0x86E4
#define GL_CONST_EYE_NV 0x86E5
#define GL_PASS_THROUGH_NV 0x86E6
#define GL_CULL_FRAGMENT_NV 0x86E7
#define GL_OFFSET_TEXTURE_2D_NV 0x86E8
#define GL_DEPENDENT_AR_TEXTURE_2D_NV 0x86E9
#define GL_DEPENDENT_GB_TEXTURE_2D_NV 0x86EA
#define GL_SURFACE_STATE_NV 0x86EB
#define GL_DOT_PRODUCT_NV 0x86EC
#define GL_DOT_PRODUCT_DEPTH_REPLACE_NV 0x86ED
#define GL_DOT_PRODUCT_TEXTURE_2D_NV 0x86EE
#define GL_DOT_PRODUCT_TEXTURE_3D_NV 0x86EF
#define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
#define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
#define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
#define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
#define GL_HILO_NV 0x86F4
#define GL_DSDT_NV 0x86F5
#define GL_DSDT_MAG_NV 0x86F6
#define GL_DSDT_MAG_VIB_NV 0x86F7
#define GL_HILO16_NV 0x86F8
#define GL_SIGNED_HILO_NV 0x86F9
#define GL_SIGNED_HILO16_NV 0x86FA
#define GL_SIGNED_RGBA_NV 0x86FB
#define GL_SIGNED_RGBA8_NV 0x86FC
#define GL_SURFACE_REGISTERED_NV 0x86FD
#define GL_SIGNED_RGB_NV 0x86FE
#define GL_SIGNED_RGB8_NV 0x86FF
#define GL_SURFACE_MAPPED_NV 0x8700
#define GL_SIGNED_LUMINANCE_NV 0x8701
#define GL_SIGNED_LUMINANCE8_NV 0x8702
#define GL_SIGNED_LUMINANCE_ALPHA_NV 0x8703
#define GL_SIGNED_LUMINANCE8_ALPHA8_NV 0x8704
#define GL_SIGNED_ALPHA_NV 0x8705
#define GL_SIGNED_ALPHA8_NV 0x8706
#define GL_SIGNED_INTENSITY_NV 0x8707
#define GL_SIGNED_INTENSITY8_NV 0x8708
#define GL_DSDT8_NV 0x8709
#define GL_DSDT8_MAG8_NV 0x870A
#define GL_DSDT8_MAG8_INTENSITY8_NV 0x870B
#define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV 0x870C
#define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
#define GL_HI_SCALE_NV 0x870E
#define GL_LO_SCALE_NV 0x870F
#define GL_DS_SCALE_NV 0x8710
#define GL_DT_SCALE_NV 0x8711
#define GL_MAGNITUDE_SCALE_NV 0x8712
#define GL_VIBRANCE_SCALE_NV 0x8713
#define GL_HI_BIAS_NV 0x8714
#define GL_LO_BIAS_NV 0x8715
#define GL_DS_BIAS_NV 0x8716
#define GL_DT_BIAS_NV 0x8717
#define GL_MAGNITUDE_BIAS_NV 0x8718
#define GL_VIBRANCE_BIAS_NV 0x8719
#define GL_TEXTURE_BORDER_VALUES_NV 0x871A
#define GL_TEXTURE_HI_SIZE_NV 0x871B
#define GL_TEXTURE_LO_SIZE_NV 0x871C
#define GL_TEXTURE_DS_SIZE_NV 0x871D
#define GL_TEXTURE_DT_SIZE_NV 0x871E
#define GL_TEXTURE_MAG_SIZE_NV 0x871F
#define GL_MODELVIEW2_ARB 0x8722
#define GL_MODELVIEW3_ARB 0x8723
#define GL_MODELVIEW4_ARB 0x8724
#define GL_MODELVIEW5_ARB 0x8725
#define GL_MODELVIEW6_ARB 0x8726
#define GL_MODELVIEW7_ARB 0x8727
#define GL_MODELVIEW8_ARB 0x8728
#define GL_MODELVIEW9_ARB 0x8729
#define GL_MODELVIEW10_ARB 0x872A
#define GL_MODELVIEW11_ARB 0x872B
#define GL_MODELVIEW12_ARB 0x872C
#define GL_MODELVIEW13_ARB 0x872D
#define GL_MODELVIEW14_ARB 0x872E
#define GL_MODELVIEW15_ARB 0x872F
#define GL_MODELVIEW16_ARB 0x8730
#define GL_MODELVIEW17_ARB 0x8731
#define GL_MODELVIEW18_ARB 0x8732
#define GL_MODELVIEW19_ARB 0x8733
#define GL_MODELVIEW20_ARB 0x8734
#define GL_MODELVIEW21_ARB 0x8735
#define GL_MODELVIEW22_ARB 0x8736
#define GL_MODELVIEW23_ARB 0x8737
#define GL_MODELVIEW24_ARB 0x8738
#define GL_MODELVIEW25_ARB 0x8739
#define GL_MODELVIEW26_ARB 0x873A
#define GL_MODELVIEW27_ARB 0x873B
#define GL_MODELVIEW28_ARB 0x873C
#define GL_MODELVIEW29_ARB 0x873D
#define GL_MODELVIEW30_ARB 0x873E
#define GL_MODELVIEW31_ARB 0x873F
#define GL_DOT3_RGB_EXT 0x8740
#define GL_Z400_BINARY_AMD 0x8740
#define GL_DOT3_RGBA_EXT 0x8741
#define GL_PROGRAM_BINARY_LENGTH 0x8741
#define GL_PROGRAM_BINARY_LENGTH_OES 0x8741
#define GL_MIRROR_CLAMP_ATI 0x8742
#define GL_MIRROR_CLAMP_EXT 0x8742
#define GL_MIRROR_CLAMP_TO_EDGE 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_ATI 0x8743
#define GL_MIRROR_CLAMP_TO_EDGE_EXT 0x8743
#define GL_MODULATE_ADD_ATI 0x8744
#define GL_MODULATE_SIGNED_ADD_ATI 0x8745
#define GL_MODULATE_SUBTRACT_ATI 0x8746
#define GL_SET_AMD 0x874A
#define GL_REPLACE_VALUE_AMD 0x874B
#define GL_STENCIL_OP_VALUE_AMD 0x874C
#define GL_STENCIL_BACK_OP_VALUE_AMD 0x874D
#define GL_VERTEX_ATTRIB_ARRAY_LONG 0x874E
#define GL_OCCLUSION_QUERY_EVENT_MASK_AMD 0x874F
#define GL_DEPTH_STENCIL_MESA 0x8750
#define GL_UNSIGNED_INT_24_8_MESA 0x8751
#define GL_UNSIGNED_INT_8_24_REV_MESA 0x8752
#define GL_UNSIGNED_SHORT_15_1_MESA 0x8753
#define GL_UNSIGNED_SHORT_1_15_REV_MESA 0x8754
#define GL_TRACE_MASK_MESA 0x8755
#define GL_TRACE_NAME_MESA 0x8756
#define GL_YCBCR_MESA 0x8757
#define GL_PACK_INVERT_MESA 0x8758
#define GL_DEBUG_OBJECT_MESA 0x8759
#define GL_TEXTURE_1D_STACK_MESAX 0x8759
#define GL_DEBUG_PRINT_MESA 0x875A
#define GL_TEXTURE_2D_STACK_MESAX 0x875A
#define GL_DEBUG_ASSERT_MESA 0x875B
#define GL_PROXY_TEXTURE_1D_STACK_MESAX 0x875B
#define GL_PROXY_TEXTURE_2D_STACK_MESAX 0x875C
#define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
#define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
#define GL_PROGRAM_BINARY_FORMAT_MESA 0x875F
#define GL_STATIC_ATI 0x8760
#define GL_DYNAMIC_ATI 0x8761
#define GL_PRESERVE_ATI 0x8762
#define GL_DISCARD_ATI 0x8763
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_SIZE_ARB 0x8764
#define GL_OBJECT_BUFFER_SIZE_ATI 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BUFFER_USAGE_ARB 0x8765
#define GL_OBJECT_BUFFER_USAGE_ATI 0x8765
#define GL_ARRAY_OBJECT_BUFFER_ATI 0x8766
#define GL_ARRAY_OBJECT_OFFSET_ATI 0x8767
#define GL_ELEMENT_ARRAY_ATI 0x8768
#define GL_ELEMENT_ARRAY_TYPE_ATI 0x8769
#define GL_ELEMENT_ARRAY_POINTER_ATI 0x876A
#define GL_MAX_VERTEX_STREAMS_ATI 0x876B
#define GL_VERTEX_STREAM0_ATI 0x876C
#define GL_VERTEX_STREAM1_ATI 0x876D
#define GL_VERTEX_STREAM2_ATI 0x876E
#define GL_VERTEX_STREAM3_ATI 0x876F
#define GL_VERTEX_STREAM4_ATI 0x8770
#define GL_VERTEX_STREAM5_ATI 0x8771
#define GL_VERTEX_STREAM6_ATI 0x8772
#define GL_VERTEX_STREAM7_ATI 0x8773
#define GL_VERTEX_SOURCE_ATI 0x8774
#define GL_BUMP_ROT_MATRIX_ATI 0x8775
#define GL_BUMP_ROT_MATRIX_SIZE_ATI 0x8776
#define GL_BUMP_NUM_TEX_UNITS_ATI 0x8777
#define GL_BUMP_TEX_UNITS_ATI 0x8778
#define GL_DUDV_ATI 0x8779
#define GL_DU8DV8_ATI 0x877A
#define GL_BUMP_ENVMAP_ATI 0x877B
#define GL_BUMP_TARGET_ATI 0x877C
#define GL_VERTEX_SHADER_EXT 0x8780
#define GL_VERTEX_SHADER_BINDING_EXT 0x8781
#define GL_OP_INDEX_EXT 0x8782
#define GL_OP_NEGATE_EXT 0x8783
#define GL_OP_DOT3_EXT 0x8784
#define GL_OP_DOT4_EXT 0x8785
#define GL_OP_MUL_EXT 0x8786
#define GL_OP_ADD_EXT 0x8787
#define GL_OP_MADD_EXT 0x8788
#define GL_OP_FRAC_EXT 0x8789
#define GL_OP_MAX_EXT 0x878A
#define GL_OP_MIN_EXT 0x878B
#define GL_OP_SET_GE_EXT 0x878C
#define GL_OP_SET_LT_EXT 0x878D
#define GL_OP_CLAMP_EXT 0x878E
#define GL_OP_FLOOR_EXT 0x878F
#define GL_OP_ROUND_EXT 0x8790
#define GL_OP_EXP_BASE_2_EXT 0x8791
#define GL_OP_LOG_BASE_2_EXT 0x8792
#define GL_OP_POWER_EXT 0x8793
#define GL_OP_RECIP_EXT 0x8794
#define GL_OP_RECIP_SQRT_EXT 0x8795
#define GL_OP_SUB_EXT 0x8796
#define GL_OP_CROSS_PRODUCT_EXT 0x8797
#define GL_OP_MULTIPLY_MATRIX_EXT 0x8798
#define GL_OP_MOV_EXT 0x8799
#define GL_OUTPUT_VERTEX_EXT 0x879A
#define GL_OUTPUT_COLOR0_EXT 0x879B
#define GL_OUTPUT_COLOR1_EXT 0x879C
#define GL_OUTPUT_TEXTURE_COORD0_EXT 0x879D
#define GL_OUTPUT_TEXTURE_COORD1_EXT 0x879E
#define GL_OUTPUT_TEXTURE_COORD2_EXT 0x879F
#define GL_OUTPUT_TEXTURE_COORD3_EXT 0x87A0
#define GL_OUTPUT_TEXTURE_COORD4_EXT 0x87A1
#define GL_OUTPUT_TEXTURE_COORD5_EXT 0x87A2
#define GL_OUTPUT_TEXTURE_COORD6_EXT 0x87A3
#define GL_OUTPUT_TEXTURE_COORD7_EXT 0x87A4
#define GL_OUTPUT_TEXTURE_COORD8_EXT 0x87A5
#define GL_OUTPUT_TEXTURE_COORD9_EXT 0x87A6
#define GL_OUTPUT_TEXTURE_COORD10_EXT 0x87A7
#define GL_OUTPUT_TEXTURE_COORD11_EXT 0x87A8
#define GL_OUTPUT_TEXTURE_COORD12_EXT 0x87A9
#define GL_OUTPUT_TEXTURE_COORD13_EXT 0x87AA
#define GL_OUTPUT_TEXTURE_COORD14_EXT 0x87AB
#define GL_OUTPUT_TEXTURE_COORD15_EXT 0x87AC
#define GL_OUTPUT_TEXTURE_COORD16_EXT 0x87AD
#define GL_OUTPUT_TEXTURE_COORD17_EXT 0x87AE
#define GL_OUTPUT_TEXTURE_COORD18_EXT 0x87AF
#define GL_OUTPUT_TEXTURE_COORD19_EXT 0x87B0
#define GL_OUTPUT_TEXTURE_COORD20_EXT 0x87B1
#define GL_OUTPUT_TEXTURE_COORD21_EXT 0x87B2
#define GL_OUTPUT_TEXTURE_COORD22_EXT 0x87B3
#define GL_OUTPUT_TEXTURE_COORD23_EXT 0x87B4
#define GL_OUTPUT_TEXTURE_COORD24_EXT 0x87B5
#define GL_OUTPUT_TEXTURE_COORD25_EXT 0x87B6
#define GL_OUTPUT_TEXTURE_COORD26_EXT 0x87B7
#define GL_OUTPUT_TEXTURE_COORD27_EXT 0x87B8
#define GL_OUTPUT_TEXTURE_COORD28_EXT 0x87B9
#define GL_OUTPUT_TEXTURE_COORD29_EXT 0x87BA
#define GL_OUTPUT_TEXTURE_COORD30_EXT 0x87BB
#define GL_OUTPUT_TEXTURE_COORD31_EXT 0x87BC
#define GL_OUTPUT_FOG_EXT 0x87BD
#define GL_SCALAR_EXT 0x87BE
#define GL_VECTOR_EXT 0x87BF
#define GL_MATRIX_EXT 0x87C0
#define GL_VARIANT_EXT 0x87C1
#define GL_INVARIANT_EXT 0x87C2
#define GL_LOCAL_CONSTANT_EXT 0x87C3
#define GL_LOCAL_EXT 0x87C4
#define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
#define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
#define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
#define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
#define GL_MAX_VERTEX_SHADER_LOCALS_EXT 0x87C9
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
#define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
#define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
#define GL_VERTEX_SHADER_VARIANTS_EXT 0x87D0
#define GL_VERTEX_SHADER_INVARIANTS_EXT 0x87D1
#define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
#define GL_VERTEX_SHADER_LOCALS_EXT 0x87D3
#define GL_VERTEX_SHADER_OPTIMIZED_EXT 0x87D4
#define GL_X_EXT 0x87D5
#define GL_Y_EXT 0x87D6
#define GL_Z_EXT 0x87D7
#define GL_W_EXT 0x87D8
#define GL_NEGATIVE_X_EXT 0x87D9
#define GL_NEGATIVE_Y_EXT 0x87DA
#define GL_NEGATIVE_Z_EXT 0x87DB
#define GL_NEGATIVE_W_EXT 0x87DC
#define GL_ZERO_EXT 0x87DD
#define GL_ONE_EXT 0x87DE
#define GL_NEGATIVE_ONE_EXT 0x87DF
#define GL_NORMALIZED_RANGE_EXT 0x87E0
#define GL_FULL_RANGE_EXT 0x87E1
#define GL_CURRENT_VERTEX_EXT 0x87E2
#define GL_MVP_MATRIX_EXT 0x87E3
#define GL_VARIANT_VALUE_EXT 0x87E4
#define GL_VARIANT_DATATYPE_EXT 0x87E5
#define GL_VARIANT_ARRAY_STRIDE_EXT 0x87E6
#define GL_VARIANT_ARRAY_TYPE_EXT 0x87E7
#define GL_VARIANT_ARRAY_EXT 0x87E8
#define GL_VARIANT_ARRAY_POINTER_EXT 0x87E9
#define GL_INVARIANT_VALUE_EXT 0x87EA
#define GL_INVARIANT_DATATYPE_EXT 0x87EB
#define GL_LOCAL_CONSTANT_VALUE_EXT 0x87EC
#define GL_LOCAL_CONSTANT_DATATYPE_EXT 0x87ED
#define GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD 0x87EE
#define GL_PN_TRIANGLES_ATI 0x87F0
#define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
#define GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
#define GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
#define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
#define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
#define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
#define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
#define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
#define GL_3DC_X_AMD 0x87F9
#define GL_3DC_XY_AMD 0x87FA
#define GL_VBO_FREE_MEMORY_ATI 0x87FB
#define GL_TEXTURE_FREE_MEMORY_ATI 0x87FC
#define GL_RENDERBUFFER_FREE_MEMORY_ATI 0x87FD
#define GL_NUM_PROGRAM_BINARY_FORMATS 0x87FE
#define GL_NUM_PROGRAM_BINARY_FORMATS_OES 0x87FE
#define GL_PROGRAM_BINARY_FORMATS 0x87FF
#define GL_PROGRAM_BINARY_FORMATS_OES 0x87FF
#define GL_STENCIL_BACK_FUNC 0x8800
#define GL_STENCIL_BACK_FUNC_ATI 0x8800
#define GL_STENCIL_BACK_FAIL 0x8801
#define GL_STENCIL_BACK_FAIL_ATI 0x8801
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS 0x8803
#define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
#define GL_FRAGMENT_PROGRAM_ARB 0x8804
#define GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
#define GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
#define GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
#define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
#define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
#define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
#define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
#define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
#define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
#define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
#define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
#define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
#define GL_RGBA32F 0x8814
#define GL_RGBA32F_ARB 0x8814
#define GL_RGBA32F_EXT 0x8814
#define GL_RGBA_FLOAT32_APPLE 0x8814
#define GL_RGBA_FLOAT32_ATI 0x8814
#define GL_RGB32F 0x8815
#define GL_RGB32F_ARB 0x8815
#define GL_RGB32F_EXT 0x8815
#define GL_RGB_FLOAT32_APPLE 0x8815
#define GL_RGB_FLOAT32_ATI 0x8815
#define GL_ALPHA32F_ARB 0x8816
#define GL_ALPHA32F_EXT 0x8816
#define GL_ALPHA_FLOAT32_APPLE 0x8816
#define GL_ALPHA_FLOAT32_ATI 0x8816
#define GL_INTENSITY32F_ARB 0x8817
#define GL_INTENSITY_FLOAT32_APPLE 0x8817
#define GL_INTENSITY_FLOAT32_ATI 0x8817
#define GL_LUMINANCE32F_ARB 0x8818
#define GL_LUMINANCE32F_EXT 0x8818
#define GL_LUMINANCE_FLOAT32_APPLE 0x8818
#define GL_LUMINANCE_FLOAT32_ATI 0x8818
#define GL_LUMINANCE_ALPHA32F_ARB 0x8819
#define GL_LUMINANCE_ALPHA32F_EXT 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_APPLE 0x8819
#define GL_LUMINANCE_ALPHA_FLOAT32_ATI 0x8819
#define GL_RGBA16F 0x881A
#define GL_RGBA16F_ARB 0x881A
#define GL_RGBA16F_EXT 0x881A
#define GL_RGBA_FLOAT16_APPLE 0x881A
#define GL_RGBA_FLOAT16_ATI 0x881A
#define GL_RGB16F 0x881B
#define GL_RGB16F_ARB 0x881B
#define GL_RGB16F_EXT 0x881B
#define GL_RGB_FLOAT16_APPLE 0x881B
#define GL_RGB_FLOAT16_ATI 0x881B
#define GL_ALPHA16F_ARB 0x881C
#define GL_ALPHA16F_EXT 0x881C
#define GL_ALPHA_FLOAT16_APPLE 0x881C
#define GL_ALPHA_FLOAT16_ATI 0x881C
#define GL_INTENSITY16F_ARB 0x881D
#define GL_INTENSITY_FLOAT16_APPLE 0x881D
#define GL_INTENSITY_FLOAT16_ATI 0x881D
#define GL_LUMINANCE16F_ARB 0x881E
#define GL_LUMINANCE16F_EXT 0x881E
#define GL_LUMINANCE_FLOAT16_APPLE 0x881E
#define GL_LUMINANCE_FLOAT16_ATI 0x881E
#define GL_LUMINANCE_ALPHA16F_ARB 0x881F
#define GL_LUMINANCE_ALPHA16F_EXT 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_APPLE 0x881F
#define GL_LUMINANCE_ALPHA_FLOAT16_ATI 0x881F
#define GL_RGBA_FLOAT_MODE_ARB 0x8820
#define GL_RGBA_FLOAT_MODE_ATI 0x8820
#define GL_WRITEONLY_RENDERING_QCOM 0x8823
#define GL_MAX_DRAW_BUFFERS 0x8824
#define GL_MAX_DRAW_BUFFERS_ARB 0x8824
#define GL_MAX_DRAW_BUFFERS_ATI 0x8824
#define GL_MAX_DRAW_BUFFERS_EXT 0x8824
#define GL_MAX_DRAW_BUFFERS_NV 0x8824
#define GL_DRAW_BUFFER0 0x8825
#define GL_DRAW_BUFFER0_ARB 0x8825
#define GL_DRAW_BUFFER0_ATI 0x8825
#define GL_DRAW_BUFFER0_EXT 0x8825
#define GL_DRAW_BUFFER0_NV 0x8825
#define GL_DRAW_BUFFER1 0x8826
#define GL_DRAW_BUFFER1_ARB 0x8826
#define GL_DRAW_BUFFER1_ATI 0x8826
#define GL_DRAW_BUFFER1_EXT 0x8826
#define GL_DRAW_BUFFER1_NV 0x8826
#define GL_DRAW_BUFFER2 0x8827
#define GL_DRAW_BUFFER2_ARB 0x8827
#define GL_DRAW_BUFFER2_ATI 0x8827
#define GL_DRAW_BUFFER2_EXT 0x8827
#define GL_DRAW_BUFFER2_NV 0x8827
#define GL_DRAW_BUFFER3 0x8828
#define GL_DRAW_BUFFER3_ARB 0x8828
#define GL_DRAW_BUFFER3_ATI 0x8828
#define GL_DRAW_BUFFER3_EXT 0x8828
#define GL_DRAW_BUFFER3_NV 0x8828
#define GL_DRAW_BUFFER4 0x8829
#define GL_DRAW_BUFFER4_ARB 0x8829
#define GL_DRAW_BUFFER4_ATI 0x8829
#define GL_DRAW_BUFFER4_EXT 0x8829
#define GL_DRAW_BUFFER4_NV 0x8829
#define GL_DRAW_BUFFER5 0x882A
#define GL_DRAW_BUFFER5_ARB 0x882A
#define GL_DRAW_BUFFER5_ATI 0x882A
#define GL_DRAW_BUFFER5_EXT 0x882A
#define GL_DRAW_BUFFER5_NV 0x882A
#define GL_DRAW_BUFFER6 0x882B
#define GL_DRAW_BUFFER6_ARB 0x882B
#define GL_DRAW_BUFFER6_ATI 0x882B
#define GL_DRAW_BUFFER6_EXT 0x882B
#define GL_DRAW_BUFFER6_NV 0x882B
#define GL_DRAW_BUFFER7 0x882C
#define GL_DRAW_BUFFER7_ARB 0x882C
#define GL_DRAW_BUFFER7_ATI 0x882C
#define GL_DRAW_BUFFER7_EXT 0x882C
#define GL_DRAW_BUFFER7_NV 0x882C
#define GL_DRAW_BUFFER8 0x882D
#define GL_DRAW_BUFFER8_ARB 0x882D
#define GL_DRAW_BUFFER8_ATI 0x882D
#define GL_DRAW_BUFFER8_EXT 0x882D
#define GL_DRAW_BUFFER8_NV 0x882D
#define GL_DRAW_BUFFER9 0x882E
#define GL_DRAW_BUFFER9_ARB 0x882E
#define GL_DRAW_BUFFER9_ATI 0x882E
#define GL_DRAW_BUFFER9_EXT 0x882E
#define GL_DRAW_BUFFER9_NV 0x882E
#define GL_DRAW_BUFFER10 0x882F
#define GL_DRAW_BUFFER10_ARB 0x882F
#define GL_DRAW_BUFFER10_ATI 0x882F
#define GL_DRAW_BUFFER10_EXT 0x882F
#define GL_DRAW_BUFFER10_NV 0x882F
#define GL_DRAW_BUFFER11 0x8830
#define GL_DRAW_BUFFER11_ARB 0x8830
#define GL_DRAW_BUFFER11_ATI 0x8830
#define GL_DRAW_BUFFER11_EXT 0x8830
#define GL_DRAW_BUFFER11_NV 0x8830
#define GL_DRAW_BUFFER12 0x8831
#define GL_DRAW_BUFFER12_ARB 0x8831
#define GL_DRAW_BUFFER12_ATI 0x8831
#define GL_DRAW_BUFFER12_EXT 0x8831
#define GL_DRAW_BUFFER12_NV 0x8831
#define GL_DRAW_BUFFER13 0x8832
#define GL_DRAW_BUFFER13_ARB 0x8832
#define GL_DRAW_BUFFER13_ATI 0x8832
#define GL_DRAW_BUFFER13_EXT 0x8832
#define GL_DRAW_BUFFER13_NV 0x8832
#define GL_DRAW_BUFFER14 0x8833
#define GL_DRAW_BUFFER14_ARB 0x8833
#define GL_DRAW_BUFFER14_ATI 0x8833
#define GL_DRAW_BUFFER14_EXT 0x8833
#define GL_DRAW_BUFFER14_NV 0x8833
#define GL_DRAW_BUFFER15 0x8834
#define GL_DRAW_BUFFER15_ARB 0x8834
#define GL_DRAW_BUFFER15_ATI 0x8834
#define GL_DRAW_BUFFER15_EXT 0x8834
#define GL_DRAW_BUFFER15_NV 0x8834
#define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
#define GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI 0x8837
#define GL_BLEND_EQUATION_ALPHA 0x883D
#define GL_BLEND_EQUATION_ALPHA_EXT 0x883D
#define GL_BLEND_EQUATION_ALPHA_OES 0x883D
#define GL_SUBSAMPLE_DISTANCE_AMD 0x883F
#define GL_MATRIX_PALETTE_ARB 0x8840
#define GL_MATRIX_PALETTE_OES 0x8840
#define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
#define GL_MAX_PALETTE_MATRICES_ARB 0x8842
#define GL_MAX_PALETTE_MATRICES_OES 0x8842
#define GL_CURRENT_PALETTE_MATRIX_ARB 0x8843
#define GL_CURRENT_PALETTE_MATRIX_OES 0x8843
#define GL_MATRIX_INDEX_ARRAY_ARB 0x8844
#define GL_MATRIX_INDEX_ARRAY_OES 0x8844
#define GL_CURRENT_MATRIX_INDEX_ARB 0x8845
#define GL_MATRIX_INDEX_ARRAY_SIZE_ARB 0x8846
#define GL_MATRIX_INDEX_ARRAY_SIZE_OES 0x8846
#define GL_MATRIX_INDEX_ARRAY_TYPE_ARB 0x8847
#define GL_MATRIX_INDEX_ARRAY_TYPE_OES 0x8847
#define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB 0x8848
#define GL_MATRIX_INDEX_ARRAY_STRIDE_OES 0x8848
#define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
#define GL_MATRIX_INDEX_ARRAY_POINTER_OES 0x8849
#define GL_TEXTURE_DEPTH_SIZE 0x884A
#define GL_TEXTURE_DEPTH_SIZE_ARB 0x884A
#define GL_DEPTH_TEXTURE_MODE 0x884B
#define GL_DEPTH_TEXTURE_MODE_ARB 0x884B
#define GL_TEXTURE_COMPARE_MODE 0x884C
#define GL_TEXTURE_COMPARE_MODE_ARB 0x884C
#define GL_TEXTURE_COMPARE_MODE_EXT 0x884C
#define GL_TEXTURE_COMPARE_FUNC 0x884D
#define GL_TEXTURE_COMPARE_FUNC_ARB 0x884D
#define GL_TEXTURE_COMPARE_FUNC_EXT 0x884D
#define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_REF_TO_TEXTURE 0x884E
#define GL_COMPARE_REF_TO_TEXTURE_EXT 0x884E
#define GL_COMPARE_R_TO_TEXTURE 0x884E
#define GL_COMPARE_R_TO_TEXTURE_ARB 0x884E
#define GL_TEXTURE_CUBE_MAP_SEAMLESS 0x884F
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
#define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
#define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
#define GL_OFFSET_HILO_TEXTURE_2D_NV 0x8854
#define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
#define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
#define GL_DEPENDENT_HILO_TEXTURE_2D_NV 0x8858
#define GL_DEPENDENT_RGB_TEXTURE_3D_NV 0x8859
#define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
#define GL_DOT_PRODUCT_PASS_THROUGH_NV 0x885B
#define GL_DOT_PRODUCT_TEXTURE_1D_NV 0x885C
#define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
#define GL_HILO8_NV 0x885E
#define GL_SIGNED_HILO8_NV 0x885F
#define GL_FORCE_BLUE_TO_ONE_NV 0x8860
#define GL_POINT_SPRITE 0x8861
#define GL_POINT_SPRITE_ARB 0x8861
#define GL_POINT_SPRITE_NV 0x8861
#define GL_POINT_SPRITE_OES 0x8861
#define GL_COORD_REPLACE 0x8862
#define GL_COORD_REPLACE_ARB 0x8862
#define GL_COORD_REPLACE_NV 0x8862
#define GL_COORD_REPLACE_OES 0x8862
#define GL_POINT_SPRITE_R_MODE_NV 0x8863
#define GL_PIXEL_COUNTER_BITS_NV 0x8864
#define GL_QUERY_COUNTER_BITS 0x8864
#define GL_QUERY_COUNTER_BITS_ARB 0x8864
#define GL_QUERY_COUNTER_BITS_EXT 0x8864
#define GL_CURRENT_OCCLUSION_QUERY_ID_NV 0x8865
#define GL_CURRENT_QUERY 0x8865
#define GL_CURRENT_QUERY_ARB 0x8865
#define GL_CURRENT_QUERY_EXT 0x8865
#define GL_PIXEL_COUNT_NV 0x8866
#define GL_QUERY_RESULT 0x8866
#define GL_QUERY_RESULT_ARB 0x8866
#define GL_QUERY_RESULT_EXT 0x8866
#define GL_PIXEL_COUNT_AVAILABLE_NV 0x8867
#define GL_QUERY_RESULT_AVAILABLE 0x8867
#define GL_QUERY_RESULT_AVAILABLE_ARB 0x8867
#define GL_QUERY_RESULT_AVAILABLE_EXT 0x8867
#define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
#define GL_MAX_VERTEX_ATTRIBS 0x8869
#define GL_MAX_VERTEX_ATTRIBS_ARB 0x8869
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT 0x886C
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES 0x886C
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT 0x886D
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES 0x886D
#define GL_DEPTH_STENCIL_TO_RGBA_NV 0x886E
#define GL_DEPTH_STENCIL_TO_BGRA_NV 0x886F
#define GL_FRAGMENT_PROGRAM_NV 0x8870
#define GL_MAX_TEXTURE_COORDS 0x8871
#define GL_MAX_TEXTURE_COORDS_ARB 0x8871
#define GL_MAX_TEXTURE_COORDS_NV 0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872
#define GL_MAX_TEXTURE_IMAGE_UNITS_NV 0x8872
#define GL_FRAGMENT_PROGRAM_BINDING_NV 0x8873
#define GL_PROGRAM_ERROR_STRING_ARB 0x8874
#define GL_PROGRAM_ERROR_STRING_NV 0x8874
#define GL_PROGRAM_FORMAT_ASCII_ARB 0x8875
#define GL_PROGRAM_FORMAT_ARB 0x8876
#define GL_WRITE_PIXEL_DATA_RANGE_NV 0x8878
#define GL_READ_PIXEL_DATA_RANGE_NV 0x8879
#define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
#define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
#define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
#define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
#define GL_GEOMETRY_SHADER_INVOCATIONS 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_EXT 0x887F
#define GL_GEOMETRY_SHADER_INVOCATIONS_OES 0x887F
#define GL_FLOAT_R_NV 0x8880
#define GL_FLOAT_RG_NV 0x8881
#define GL_FLOAT_RGB_NV 0x8882
#define GL_FLOAT_RGBA_NV 0x8883
#define GL_FLOAT_R16_NV 0x8884
#define GL_FLOAT_R32_NV 0x8885
#define GL_FLOAT_RG16_NV 0x8886
#define GL_FLOAT_RG32_NV 0x8887
#define GL_FLOAT_RGB16_NV 0x8888
#define GL_FLOAT_RGB32_NV 0x8889
#define GL_FLOAT_RGBA16_NV 0x888A
#define GL_FLOAT_RGBA32_NV 0x888B
#define GL_TEXTURE_FLOAT_COMPONENTS_NV 0x888C
#define GL_FLOAT_CLEAR_COLOR_VALUE_NV 0x888D
#define GL_FLOAT_RGBA_MODE_NV 0x888E
#define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
#define GL_DEPTH_BOUNDS_TEST_EXT 0x8890
#define GL_DEPTH_BOUNDS_EXT 0x8891
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_ARB 0x8892
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_ARB 0x8893
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_ARRAY_BUFFER_BINDING_ARB 0x8894
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
#define GL_INDEX_ARRAY_BUFFER_BINDING 0x8899
#define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
#define GL_WEIGHT_ARRAY_BUFFER_BINDING 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
#define GL_WEIGHT_ARRAY_BUFFER_BINDING_OES 0x889E
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
#define GL_PROGRAM_INSTRUCTIONS_ARB 0x88A0
#define GL_MAX_PROGRAM_INSTRUCTIONS_ARB 0x88A1
#define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
#define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
#define GL_PROGRAM_TEMPORARIES_ARB 0x88A4
#define GL_MAX_PROGRAM_TEMPORARIES_ARB 0x88A5
#define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
#define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
#define GL_PROGRAM_PARAMETERS_ARB 0x88A8
#define GL_MAX_PROGRAM_PARAMETERS_ARB 0x88A9
#define GL_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AA
#define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
#define GL_PROGRAM_ATTRIBS_ARB 0x88AC
#define GL_MAX_PROGRAM_ATTRIBS_ARB 0x88AD
#define GL_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AE
#define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
#define GL_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B0
#define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
#define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
#define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
#define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
#define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
#define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
#define GL_TRANSPOSE_CURRENT_MATRIX_ARB 0x88B7
#define GL_READ_ONLY 0x88B8
#define GL_READ_ONLY_ARB 0x88B8
#define GL_WRITE_ONLY 0x88B9
#define GL_WRITE_ONLY_ARB 0x88B9
#define GL_WRITE_ONLY_OES 0x88B9
#define GL_READ_WRITE 0x88BA
#define GL_READ_WRITE_ARB 0x88BA
#define GL_BUFFER_ACCESS 0x88BB
#define GL_BUFFER_ACCESS_ARB 0x88BB
#define GL_BUFFER_ACCESS_OES 0x88BB
#define GL_BUFFER_MAPPED 0x88BC
#define GL_BUFFER_MAPPED_ARB 0x88BC
#define GL_BUFFER_MAPPED_OES 0x88BC
#define GL_BUFFER_MAP_POINTER 0x88BD
#define GL_BUFFER_MAP_POINTER_ARB 0x88BD
#define GL_BUFFER_MAP_POINTER_OES 0x88BD
#define GL_WRITE_DISCARD_NV 0x88BE
#define GL_TIME_ELAPSED 0x88BF
#define GL_TIME_ELAPSED_EXT 0x88BF
#define GL_MATRIX0_ARB 0x88C0
#define GL_MATRIX1_ARB 0x88C1
#define GL_MATRIX2_ARB 0x88C2
#define GL_MATRIX3_ARB 0x88C3
#define GL_MATRIX4_ARB 0x88C4
#define GL_MATRIX5_ARB 0x88C5
#define GL_MATRIX6_ARB 0x88C6
#define GL_MATRIX7_ARB 0x88C7
#define GL_MATRIX8_ARB 0x88C8
#define GL_MATRIX9_ARB 0x88C9
#define GL_MATRIX10_ARB 0x88CA
#define GL_MATRIX11_ARB 0x88CB
#define GL_MATRIX12_ARB 0x88CC
#define GL_MATRIX13_ARB 0x88CD
#define GL_MATRIX14_ARB 0x88CE
#define GL_MATRIX15_ARB 0x88CF
#define GL_MATRIX16_ARB 0x88D0
#define GL_MATRIX17_ARB 0x88D1
#define GL_MATRIX18_ARB 0x88D2
#define GL_MATRIX19_ARB 0x88D3
#define GL_MATRIX20_ARB 0x88D4
#define GL_MATRIX21_ARB 0x88D5
#define GL_MATRIX22_ARB 0x88D6
#define GL_MATRIX23_ARB 0x88D7
#define GL_MATRIX24_ARB 0x88D8
#define GL_MATRIX25_ARB 0x88D9
#define GL_MATRIX26_ARB 0x88DA
#define GL_MATRIX27_ARB 0x88DB
#define GL_MATRIX28_ARB 0x88DC
#define GL_MATRIX29_ARB 0x88DD
#define GL_MATRIX30_ARB 0x88DE
#define GL_MATRIX31_ARB 0x88DF
#define GL_STREAM_DRAW 0x88E0
#define GL_STREAM_DRAW_ARB 0x88E0
#define GL_STREAM_READ 0x88E1
#define GL_STREAM_READ_ARB 0x88E1
#define GL_STREAM_COPY 0x88E2
#define GL_STREAM_COPY_ARB 0x88E2
#define GL_STATIC_DRAW 0x88E4
#define GL_STATIC_DRAW_ARB 0x88E4
#define GL_STATIC_READ 0x88E5
#define GL_STATIC_READ_ARB 0x88E5
#define GL_STATIC_COPY 0x88E6
#define GL_STATIC_COPY_ARB 0x88E6
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_DYNAMIC_DRAW_ARB 0x88E8
#define GL_DYNAMIC_READ 0x88E9
#define GL_DYNAMIC_READ_ARB 0x88E9
#define GL_DYNAMIC_COPY 0x88EA
#define GL_DYNAMIC_COPY_ARB 0x88EA
#define GL_PIXEL_PACK_BUFFER 0x88EB
#define GL_PIXEL_PACK_BUFFER_ARB 0x88EB
#define GL_PIXEL_PACK_BUFFER_EXT 0x88EB
#define GL_PIXEL_PACK_BUFFER_NV 0x88EB
#define GL_PIXEL_UNPACK_BUFFER 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_ARB 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_EXT 0x88EC
#define GL_PIXEL_UNPACK_BUFFER_NV 0x88EC
#define GL_PIXEL_PACK_BUFFER_BINDING 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_ARB 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_EXT 0x88ED
#define GL_PIXEL_PACK_BUFFER_BINDING_NV 0x88ED
#define GL_ETC1_SRGB8_NV 0x88EE
#define GL_PIXEL_UNPACK_BUFFER_BINDING 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
#define GL_PIXEL_UNPACK_BUFFER_BINDING_NV 0x88EF
#define GL_DEPTH24_STENCIL8 0x88F0
#define GL_DEPTH24_STENCIL8_EXT 0x88F0
#define GL_DEPTH24_STENCIL8_OES 0x88F0
#define GL_TEXTURE_STENCIL_SIZE 0x88F1
#define GL_TEXTURE_STENCIL_SIZE_EXT 0x88F1
#define GL_STENCIL_TAG_BITS_EXT 0x88F2
#define GL_STENCIL_CLEAR_TAG_VALUE_EXT 0x88F3
#define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
#define GL_MAX_PROGRAM_CALL_DEPTH_NV 0x88F5
#define GL_MAX_PROGRAM_IF_DEPTH_NV 0x88F6
#define GL_MAX_PROGRAM_LOOP_DEPTH_NV 0x88F7
#define GL_MAX_PROGRAM_LOOP_COUNT_NV 0x88F8
#define GL_SRC1_COLOR 0x88F9
#define GL_SRC1_COLOR_EXT 0x88F9
#define GL_ONE_MINUS_SRC1_COLOR 0x88FA
#define GL_ONE_MINUS_SRC1_COLOR_EXT 0x88FA
#define GL_ONE_MINUS_SRC1_ALPHA 0x88FB
#define GL_ONE_MINUS_SRC1_ALPHA_EXT 0x88FB
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0x88FC
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT 0x88FC
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT 0x88FE
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV 0x88FE
#define GL_MAX_ARRAY_TEXTURE_LAYERS 0x88FF
#define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT 0x88FF
#define GL_MIN_PROGRAM_TEXEL_OFFSET 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_EXT 0x8904
#define GL_MIN_PROGRAM_TEXEL_OFFSET_NV 0x8904
#define GL_MAX_PROGRAM_TEXEL_OFFSET 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_EXT 0x8905
#define GL_MAX_PROGRAM_TEXEL_OFFSET_NV 0x8905
#define GL_PROGRAM_ATTRIB_COMPONENTS_NV 0x8906
#define GL_PROGRAM_RESULT_COMPONENTS_NV 0x8907
#define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
#define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
#define GL_CG_VERTEX_SHADER_EXT 0x890E
#define GL_CG_FRAGMENT_SHADER_EXT 0x890F
#define GL_STENCIL_TEST_TWO_SIDE_EXT 0x8910
#define GL_ACTIVE_STENCIL_FACE_EXT 0x8911
#define GL_MIRROR_CLAMP_TO_BORDER_EXT 0x8912
#define GL_SAMPLES_PASSED 0x8914
#define GL_SAMPLES_PASSED_ARB 0x8914
#define GL_GEOMETRY_LINKED_VERTICES_OUT_EXT 0x8916
#define GL_GEOMETRY_LINKED_VERTICES_OUT_OES 0x8916
#define GL_GEOMETRY_VERTICES_OUT 0x8916
#define GL_GEOMETRY_INPUT_TYPE 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_EXT 0x8917
#define GL_GEOMETRY_LINKED_INPUT_TYPE_OES 0x8917
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT 0x8918
#define GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES 0x8918
#define GL_GEOMETRY_OUTPUT_TYPE 0x8918
#define GL_SAMPLER_BINDING 0x8919
#define GL_CLAMP_VERTEX_COLOR 0x891A
#define GL_CLAMP_VERTEX_COLOR_ARB 0x891A
#define GL_CLAMP_FRAGMENT_COLOR 0x891B
#define GL_CLAMP_FRAGMENT_COLOR_ARB 0x891B
#define GL_CLAMP_READ_COLOR 0x891C
#define GL_CLAMP_READ_COLOR_ARB 0x891C
#define GL_FIXED_ONLY 0x891D
#define GL_FIXED_ONLY_ARB 0x891D
#define GL_TESS_CONTROL_PROGRAM_NV 0x891E
#define GL_TESS_EVALUATION_PROGRAM_NV 0x891F
#define GL_FRAGMENT_SHADER_ATI 0x8920
#define GL_REG_0_ATI 0x8921
#define GL_REG_1_ATI 0x8922
#define GL_REG_2_ATI 0x8923
#define GL_REG_3_ATI 0x8924
#define GL_REG_4_ATI 0x8925
#define GL_REG_5_ATI 0x8926
#define GL_REG_6_ATI 0x8927
#define GL_REG_7_ATI 0x8928
#define GL_REG_8_ATI 0x8929
#define GL_REG_9_ATI 0x892A
#define GL_REG_10_ATI 0x892B
#define GL_REG_11_ATI 0x892C
#define GL_REG_12_ATI 0x892D
#define GL_REG_13_ATI 0x892E
#define GL_REG_14_ATI 0x892F
#define GL_REG_15_ATI 0x8930
#define GL_REG_16_ATI 0x8931
#define GL_REG_17_ATI 0x8932
#define GL_REG_18_ATI 0x8933
#define GL_REG_19_ATI 0x8934
#define GL_REG_20_ATI 0x8935
#define GL_REG_21_ATI 0x8936
#define GL_REG_22_ATI 0x8937
#define GL_REG_23_ATI 0x8938
#define GL_REG_24_ATI 0x8939
#define GL_REG_25_ATI 0x893A
#define GL_REG_26_ATI 0x893B
#define GL_REG_27_ATI 0x893C
#define GL_REG_28_ATI 0x893D
#define GL_REG_29_ATI 0x893E
#define GL_REG_30_ATI 0x893F
#define GL_REG_31_ATI 0x8940
#define GL_CON_0_ATI 0x8941
#define GL_CON_1_ATI 0x8942
#define GL_CON_2_ATI 0x8943
#define GL_CON_3_ATI 0x8944
#define GL_CON_4_ATI 0x8945
#define GL_CON_5_ATI 0x8946
#define GL_CON_6_ATI 0x8947
#define GL_CON_7_ATI 0x8948
#define GL_CON_8_ATI 0x8949
#define GL_CON_9_ATI 0x894A
#define GL_CON_10_ATI 0x894B
#define GL_CON_11_ATI 0x894C
#define GL_CON_12_ATI 0x894D
#define GL_CON_13_ATI 0x894E
#define GL_CON_14_ATI 0x894F
#define GL_CON_15_ATI 0x8950
#define GL_CON_16_ATI 0x8951
#define GL_CON_17_ATI 0x8952
#define GL_CON_18_ATI 0x8953
#define GL_CON_19_ATI 0x8954
#define GL_CON_20_ATI 0x8955
#define GL_CON_21_ATI 0x8956
#define GL_CON_22_ATI 0x8957
#define GL_CON_23_ATI 0x8958
#define GL_CON_24_ATI 0x8959
#define GL_CON_25_ATI 0x895A
#define GL_CON_26_ATI 0x895B
#define GL_CON_27_ATI 0x895C
#define GL_CON_28_ATI 0x895D
#define GL_CON_29_ATI 0x895E
#define GL_CON_30_ATI 0x895F
#define GL_CON_31_ATI 0x8960
#define GL_MOV_ATI 0x8961
#define GL_ADD_ATI 0x8963
#define GL_MUL_ATI 0x8964
#define GL_SUB_ATI 0x8965
#define GL_DOT3_ATI 0x8966
#define GL_DOT4_ATI 0x8967
#define GL_MAD_ATI 0x8968
#define GL_LERP_ATI 0x8969
#define GL_CND_ATI 0x896A
#define GL_CND0_ATI 0x896B
#define GL_DOT2_ADD_ATI 0x896C
#define GL_SECONDARY_INTERPOLATOR_ATI 0x896D
#define GL_NUM_FRAGMENT_REGISTERS_ATI 0x896E
#define GL_NUM_FRAGMENT_CONSTANTS_ATI 0x896F
#define GL_NUM_PASSES_ATI 0x8970
#define GL_NUM_INSTRUCTIONS_PER_PASS_ATI 0x8971
#define GL_NUM_INSTRUCTIONS_TOTAL_ATI 0x8972
#define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
#define GL_NUM_LOOPBACK_COMPONENTS_ATI 0x8974
#define GL_COLOR_ALPHA_PAIRING_ATI 0x8975
#define GL_SWIZZLE_STR_ATI 0x8976
#define GL_SWIZZLE_STQ_ATI 0x8977
#define GL_SWIZZLE_STR_DR_ATI 0x8978
#define GL_SWIZZLE_STQ_DQ_ATI 0x8979
#define GL_SWIZZLE_STRQ_ATI 0x897A
#define GL_SWIZZLE_STRQ_DQ_ATI 0x897B
#define GL_INTERLACE_OML 0x8980
#define GL_INTERLACE_READ_OML 0x8981
#define GL_FORMAT_SUBSAMPLE_24_24_OML 0x8982
#define GL_FORMAT_SUBSAMPLE_244_244_OML 0x8983
#define GL_PACK_RESAMPLE_OML 0x8984
#define GL_UNPACK_RESAMPLE_OML 0x8985
#define GL_RESAMPLE_REPLICATE_OML 0x8986
#define GL_RESAMPLE_ZERO_FILL_OML 0x8987
#define GL_RESAMPLE_AVERAGE_OML 0x8988
#define GL_RESAMPLE_DECIMATE_OML 0x8989
#define GL_POINT_SIZE_ARRAY_TYPE_OES 0x898A
#define GL_POINT_SIZE_ARRAY_STRIDE_OES 0x898B
#define GL_POINT_SIZE_ARRAY_POINTER_OES 0x898C
#define GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES 0x898D
#define GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES 0x898E
#define GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES 0x898F
#define GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
#define GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
#define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
#define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
#define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
#define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
#define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
#define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
#define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
#define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
#define GL_DRAW_PIXELS_APPLE 0x8A0A
#define GL_FENCE_APPLE 0x8A0B
#define GL_ELEMENT_ARRAY_APPLE 0x8A0C
#define GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
#define GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E
#define GL_COLOR_FLOAT_APPLE 0x8A0F
#define GL_UNIFORM_BUFFER 0x8A11
#define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
#define GL_BUFFER_FLUSHING_UNMAP_APPLE 0x8A13
#define GL_AUX_DEPTH_STENCIL_APPLE 0x8A14
#define GL_PACK_ROW_BYTES_APPLE 0x8A15
#define GL_UNPACK_ROW_BYTES_APPLE 0x8A16
#define GL_RELEASED_APPLE 0x8A19
#define GL_VOLATILE_APPLE 0x8A1A
#define GL_RETAINED_APPLE 0x8A1B
#define GL_UNDEFINED_APPLE 0x8A1C
#define GL_PURGEABLE_APPLE 0x8A1D
#define GL_RGB_422_APPLE 0x8A1F
#define GL_UNIFORM_BUFFER_BINDING 0x8A28
#define GL_UNIFORM_BUFFER_START 0x8A29
#define GL_UNIFORM_BUFFER_SIZE 0x8A2A
#define GL_MAX_VERTEX_UNIFORM_BLOCKS 0x8A2B
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT 0x8A2C
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES 0x8A2C
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0x8A2D
#define GL_MAX_COMBINED_UNIFORM_BLOCKS 0x8A2E
#define GL_MAX_UNIFORM_BUFFER_BINDINGS 0x8A2F
#define GL_MAX_UNIFORM_BLOCK_SIZE 0x8A30
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8A32
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8A32
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
#define GL_ACTIVE_UNIFORM_BLOCKS 0x8A36
#define GL_UNIFORM_TYPE 0x8A37
#define GL_UNIFORM_SIZE 0x8A38
#define GL_UNIFORM_NAME_LENGTH 0x8A39
#define GL_UNIFORM_BLOCK_INDEX 0x8A3A
#define GL_UNIFORM_OFFSET 0x8A3B
#define GL_UNIFORM_ARRAY_STRIDE 0x8A3C
#define GL_UNIFORM_MATRIX_STRIDE 0x8A3D
#define GL_UNIFORM_IS_ROW_MAJOR 0x8A3E
#define GL_UNIFORM_BLOCK_BINDING 0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE 0x8A40
#define GL_UNIFORM_BLOCK_NAME_LENGTH 0x8A41
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
#define GL_TEXTURE_SRGB_DECODE_EXT 0x8A48
#define GL_DECODE_EXT 0x8A49
#define GL_SKIP_DECODE_EXT 0x8A4A
#define GL_PROGRAM_PIPELINE_OBJECT_EXT 0x8A4F
#define GL_RGB_RAW_422_APPLE 0x8A51
#define GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT 0x8A52
#define GL_SYNC_OBJECT_APPLE 0x8A53
#define GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT 0x8A54
#define GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT 0x8A55
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT 0x8A56
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT 0x8A57
#define GL_FRAGMENT_SHADER 0x8B30
#define GL_FRAGMENT_SHADER_ARB 0x8B30
#define GL_VERTEX_SHADER 0x8B31
#define GL_VERTEX_SHADER_ARB 0x8B31
#define GL_PROGRAM_OBJECT_ARB 0x8B40
#define GL_PROGRAM_OBJECT_EXT 0x8B40
#define GL_SHADER_OBJECT_ARB 0x8B48
#define GL_SHADER_OBJECT_EXT 0x8B48
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0x8B4A
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
#define GL_MAX_VARYING_COMPONENTS 0x8B4B
#define GL_MAX_VARYING_COMPONENTS_EXT 0x8B4B
#define GL_MAX_VARYING_FLOATS 0x8B4B
#define GL_MAX_VARYING_FLOATS_ARB 0x8B4B
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
#define GL_OBJECT_TYPE_ARB 0x8B4E
#define GL_OBJECT_SUBTYPE_ARB 0x8B4F
#define GL_SHADER_TYPE 0x8B4F
#define GL_FLOAT_VEC2 0x8B50
#define GL_FLOAT_VEC2_ARB 0x8B50
#define GL_FLOAT_VEC3 0x8B51
#define GL_FLOAT_VEC3_ARB 0x8B51
#define GL_FLOAT_VEC4 0x8B52
#define GL_FLOAT_VEC4_ARB 0x8B52
#define GL_INT_VEC2 0x8B53
#define GL_INT_VEC2_ARB 0x8B53
#define GL_INT_VEC3 0x8B54
#define GL_INT_VEC3_ARB 0x8B54
#define GL_INT_VEC4 0x8B55
#define GL_INT_VEC4_ARB 0x8B55
#define GL_BOOL 0x8B56
#define GL_BOOL_ARB 0x8B56
#define GL_BOOL_VEC2 0x8B57
#define GL_BOOL_VEC2_ARB 0x8B57
#define GL_BOOL_VEC3 0x8B58
#define GL_BOOL_VEC3_ARB 0x8B58
#define GL_BOOL_VEC4 0x8B59
#define GL_BOOL_VEC4_ARB 0x8B59
#define GL_FLOAT_MAT2 0x8B5A
#define GL_FLOAT_MAT2_ARB 0x8B5A
#define GL_FLOAT_MAT3 0x8B5B
#define GL_FLOAT_MAT3_ARB 0x8B5B
#define GL_FLOAT_MAT4 0x8B5C
#define GL_FLOAT_MAT4_ARB 0x8B5C
#define GL_SAMPLER_1D 0x8B5D
#define GL_SAMPLER_1D_ARB 0x8B5D
#define GL_SAMPLER_2D 0x8B5E
#define GL_SAMPLER_2D_ARB 0x8B5E
#define GL_SAMPLER_3D 0x8B5F
#define GL_SAMPLER_3D_ARB 0x8B5F
#define GL_SAMPLER_3D_OES 0x8B5F
#define GL_SAMPLER_CUBE 0x8B60
#define GL_SAMPLER_CUBE_ARB 0x8B60
#define GL_SAMPLER_1D_SHADOW 0x8B61
#define GL_SAMPLER_1D_SHADOW_ARB 0x8B61
#define GL_SAMPLER_2D_SHADOW 0x8B62
#define GL_SAMPLER_2D_SHADOW_ARB 0x8B62
#define GL_SAMPLER_2D_SHADOW_EXT 0x8B62
#define GL_SAMPLER_2D_RECT 0x8B63
#define GL_SAMPLER_2D_RECT_ARB 0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW 0x8B64
#define GL_SAMPLER_2D_RECT_SHADOW_ARB 0x8B64
#define GL_FLOAT_MAT2x3 0x8B65
#define GL_FLOAT_MAT2x3_NV 0x8B65
#define GL_FLOAT_MAT2x4 0x8B66
#define GL_FLOAT_MAT2x4_NV 0x8B66
#define GL_FLOAT_MAT3x2 0x8B67
#define GL_FLOAT_MAT3x2_NV 0x8B67
#define GL_FLOAT_MAT3x4 0x8B68
#define GL_FLOAT_MAT3x4_NV 0x8B68
#define GL_FLOAT_MAT4x2 0x8B69
#define GL_FLOAT_MAT4x2_NV 0x8B69
#define GL_FLOAT_MAT4x3 0x8B6A
#define GL_FLOAT_MAT4x3_NV 0x8B6A
#define GL_DELETE_STATUS 0x8B80
#define GL_OBJECT_DELETE_STATUS_ARB 0x8B80
#define GL_COMPILE_STATUS 0x8B81
#define GL_OBJECT_COMPILE_STATUS_ARB 0x8B81
#define GL_LINK_STATUS 0x8B82
#define GL_OBJECT_LINK_STATUS_ARB 0x8B82
#define GL_OBJECT_VALIDATE_STATUS_ARB 0x8B83
#define GL_VALIDATE_STATUS 0x8B83
#define GL_INFO_LOG_LENGTH 0x8B84
#define GL_OBJECT_INFO_LOG_LENGTH_ARB 0x8B84
#define GL_ATTACHED_SHADERS 0x8B85
#define GL_OBJECT_ATTACHED_OBJECTS_ARB 0x8B85
#define GL_ACTIVE_UNIFORMS 0x8B86
#define GL_OBJECT_ACTIVE_UNIFORMS_ARB 0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH 0x8B87
#define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
#define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
#define GL_SHADER_SOURCE_LENGTH 0x8B88
#define GL_ACTIVE_ATTRIBUTES 0x8B89
#define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB 0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0x8B8A
#define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES 0x8B8B
#define GL_SHADING_LANGUAGE_VERSION 0x8B8C
#define GL_SHADING_LANGUAGE_VERSION_ARB 0x8B8C
#define GL_CURRENT_PROGRAM 0x8B8D
#define GL_PALETTE4_RGB8_OES 0x8B90
#define GL_PALETTE4_RGBA8_OES 0x8B91
#define GL_PALETTE4_R5_G6_B5_OES 0x8B92
#define GL_PALETTE4_RGBA4_OES 0x8B93
#define GL_PALETTE4_RGB5_A1_OES 0x8B94
#define GL_PALETTE8_RGB8_OES 0x8B95
#define GL_PALETTE8_RGBA8_OES 0x8B96
#define GL_PALETTE8_R5_G6_B5_OES 0x8B97
#define GL_PALETTE8_RGBA4_OES 0x8B98
#define GL_PALETTE8_RGB5_A1_OES 0x8B99
#define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
#define GL_POINT_SIZE_ARRAY_OES 0x8B9C
#define GL_TEXTURE_CROP_RECT_OES 0x8B9D
#define GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES 0x8B9E
#define GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES 0x8B9F
#define GL_FRAGMENT_PROGRAM_POSITION_MESA 0x8BB0
#define GL_FRAGMENT_PROGRAM_CALLBACK_MESA 0x8BB1
#define GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA 0x8BB2
#define GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA 0x8BB3
#define GL_VERTEX_PROGRAM_POSITION_MESA 0x8BB4
#define GL_VERTEX_PROGRAM_CALLBACK_MESA 0x8BB5
#define GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA 0x8BB6
#define GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA 0x8BB7
#define GL_TILE_RASTER_ORDER_FIXED_MESA 0x8BB8
#define GL_TILE_RASTER_ORDER_INCREASING_X_MESA 0x8BB9
#define GL_TILE_RASTER_ORDER_INCREASING_Y_MESA 0x8BBA
#define GL_COUNTER_TYPE_AMD 0x8BC0
#define GL_COUNTER_RANGE_AMD 0x8BC1
#define GL_UNSIGNED_INT64_AMD 0x8BC2
#define GL_PERCENTAGE_AMD 0x8BC3
#define GL_PERFMON_RESULT_AVAILABLE_AMD 0x8BC4
#define GL_PERFMON_RESULT_SIZE_AMD 0x8BC5
#define GL_PERFMON_RESULT_AMD 0x8BC6
#define GL_TEXTURE_WIDTH_QCOM 0x8BD2
#define GL_TEXTURE_HEIGHT_QCOM 0x8BD3
#define GL_TEXTURE_DEPTH_QCOM 0x8BD4
#define GL_TEXTURE_INTERNAL_FORMAT_QCOM 0x8BD5
#define GL_TEXTURE_FORMAT_QCOM 0x8BD6
#define GL_TEXTURE_TYPE_QCOM 0x8BD7
#define GL_TEXTURE_IMAGE_VALID_QCOM 0x8BD8
#define GL_TEXTURE_NUM_LEVELS_QCOM 0x8BD9
#define GL_TEXTURE_TARGET_QCOM 0x8BDA
#define GL_TEXTURE_OBJECT_VALID_QCOM 0x8BDB
#define GL_STATE_RESTORE 0x8BDC
#define GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT 0x8BE7
#define GL_TEXTURE_PROTECTED_EXT 0x8BFA
#define GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM 0x8BFB
#define GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM 0x8BFC
#define GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM 0x8BFD
#define GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM 0x8BFE
#define GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM 0x8BFF
#define GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG 0x8C00
#define GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG 0x8C01
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG 0x8C02
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG 0x8C03
#define GL_MODULATE_COLOR_IMG 0x8C04
#define GL_RECIP_ADD_SIGNED_ALPHA_IMG 0x8C05
#define GL_TEXTURE_ALPHA_MODULATE_IMG 0x8C06
#define GL_FACTOR_ALPHA_MODULATE_IMG 0x8C07
#define GL_FRAGMENT_ALPHA_MODULATE_IMG 0x8C08
#define GL_ADD_BLEND_IMG 0x8C09
#define GL_SGX_BINARY_IMG 0x8C0A
#define GL_TEXTURE_RED_TYPE 0x8C10
#define GL_TEXTURE_RED_TYPE_ARB 0x8C10
#define GL_TEXTURE_GREEN_TYPE 0x8C11
#define GL_TEXTURE_GREEN_TYPE_ARB 0x8C11
#define GL_TEXTURE_BLUE_TYPE 0x8C12
#define GL_TEXTURE_BLUE_TYPE_ARB 0x8C12
#define GL_TEXTURE_ALPHA_TYPE 0x8C13
#define GL_TEXTURE_ALPHA_TYPE_ARB 0x8C13
#define GL_TEXTURE_LUMINANCE_TYPE 0x8C14
#define GL_TEXTURE_LUMINANCE_TYPE_ARB 0x8C14
#define GL_TEXTURE_INTENSITY_TYPE 0x8C15
#define GL_TEXTURE_INTENSITY_TYPE_ARB 0x8C15
#define GL_TEXTURE_DEPTH_TYPE 0x8C16
#define GL_TEXTURE_DEPTH_TYPE_ARB 0x8C16
#define GL_UNSIGNED_NORMALIZED 0x8C17
#define GL_UNSIGNED_NORMALIZED_ARB 0x8C17
#define GL_UNSIGNED_NORMALIZED_EXT 0x8C17
#define GL_TEXTURE_1D_ARRAY 0x8C18
#define GL_TEXTURE_1D_ARRAY_EXT 0x8C18
#define GL_PROXY_TEXTURE_1D_ARRAY 0x8C19
#define GL_PROXY_TEXTURE_1D_ARRAY_EXT 0x8C19
#define GL_TEXTURE_2D_ARRAY 0x8C1A
#define GL_TEXTURE_2D_ARRAY_EXT 0x8C1A
#define GL_PROXY_TEXTURE_2D_ARRAY 0x8C1B
#define GL_PROXY_TEXTURE_2D_ARRAY_EXT 0x8C1B
#define GL_TEXTURE_BINDING_1D_ARRAY 0x8C1C
#define GL_TEXTURE_BINDING_1D_ARRAY_EXT 0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY 0x8C1D
#define GL_TEXTURE_BINDING_2D_ARRAY_EXT 0x8C1D
#define GL_GEOMETRY_PROGRAM_NV 0x8C26
#define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
#define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES 0x8C29
#define GL_TEXTURE_BUFFER 0x8C2A
#define GL_TEXTURE_BUFFER_ARB 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_BINDING_OES 0x8C2A
#define GL_TEXTURE_BUFFER_EXT 0x8C2A
#define GL_TEXTURE_BUFFER_OES 0x8C2A
#define GL_MAX_TEXTURE_BUFFER_SIZE 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_ARB 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_EXT 0x8C2B
#define GL_MAX_TEXTURE_BUFFER_SIZE_OES 0x8C2B
#define GL_TEXTURE_BINDING_BUFFER 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_ARB 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_EXT 0x8C2C
#define GL_TEXTURE_BINDING_BUFFER_OES 0x8C2C
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES 0x8C2D
#define GL_TEXTURE_BUFFER_FORMAT_ARB 0x8C2E
#define GL_TEXTURE_BUFFER_FORMAT_EXT 0x8C2E
#define GL_ANY_SAMPLES_PASSED 0x8C2F
#define GL_ANY_SAMPLES_PASSED_EXT 0x8C2F
#define GL_SAMPLE_SHADING 0x8C36
#define GL_SAMPLE_SHADING_ARB 0x8C36
#define GL_SAMPLE_SHADING_OES 0x8C36
#define GL_MIN_SAMPLE_SHADING_VALUE 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0x8C37
#define GL_MIN_SAMPLE_SHADING_VALUE_OES 0x8C37
#define GL_R11F_G11F_B10F 0x8C3A
#define GL_R11F_G11F_B10F_APPLE 0x8C3A
#define GL_R11F_G11F_B10F_EXT 0x8C3A
#define GL_UNSIGNED_INT_10F_11F_11F_REV 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE 0x8C3B
#define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
#define GL_RGBA_SIGNED_COMPONENTS_EXT 0x8C3C
#define GL_RGB9_E5 0x8C3D
#define GL_RGB9_E5_APPLE 0x8C3D
#define GL_RGB9_E5_EXT 0x8C3D
#define GL_UNSIGNED_INT_5_9_9_9_REV 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_APPLE 0x8C3E
#define GL_UNSIGNED_INT_5_9_9_9_REV_EXT 0x8C3E
#define GL_TEXTURE_SHARED_SIZE 0x8C3F
#define GL_TEXTURE_SHARED_SIZE_EXT 0x8C3F
#define GL_SRGB 0x8C40
#define GL_SRGB_EXT 0x8C40
#define GL_SRGB8 0x8C41
#define GL_SRGB8_EXT 0x8C41
#define GL_SRGB8_NV 0x8C41
#define GL_SRGB_ALPHA 0x8C42
#define GL_SRGB_ALPHA_EXT 0x8C42
#define GL_SRGB8_ALPHA8 0x8C43
#define GL_SRGB8_ALPHA8_EXT 0x8C43
#define GL_SLUMINANCE_ALPHA 0x8C44
#define GL_SLUMINANCE_ALPHA_EXT 0x8C44
#define GL_SLUMINANCE_ALPHA_NV 0x8C44
#define GL_SLUMINANCE8_ALPHA8 0x8C45
#define GL_SLUMINANCE8_ALPHA8_EXT 0x8C45
#define GL_SLUMINANCE8_ALPHA8_NV 0x8C45
#define GL_SLUMINANCE 0x8C46
#define GL_SLUMINANCE_EXT 0x8C46
#define GL_SLUMINANCE_NV 0x8C46
#define GL_SLUMINANCE8 0x8C47
#define GL_SLUMINANCE8_EXT 0x8C47
#define GL_SLUMINANCE8_NV 0x8C47
#define GL_COMPRESSED_SRGB 0x8C48
#define GL_COMPRESSED_SRGB_EXT 0x8C48
#define GL_COMPRESSED_SRGB_ALPHA 0x8C49
#define GL_COMPRESSED_SRGB_ALPHA_EXT 0x8C49
#define GL_COMPRESSED_SLUMINANCE 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_EXT 0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA 0x8C4B
#define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
#define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT 0x8C4C
#define GL_COMPRESSED_SRGB_S3TC_DXT1_NV 0x8C4C
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV 0x8C4D
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV 0x8C4E
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
#define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV 0x8C4F
#define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
#define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
#define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
#define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
#define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
#define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
#define GL_BACK_PRIMARY_COLOR_NV 0x8C77
#define GL_BACK_SECONDARY_COLOR_NV 0x8C78
#define GL_TEXTURE_COORD_NV 0x8C79
#define GL_CLIP_DISTANCE_NV 0x8C7A
#define GL_VERTEX_ID_NV 0x8C7B
#define GL_PRIMITIVE_ID_NV 0x8C7C
#define GL_GENERIC_ATTRIB_NV 0x8C7D
#define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV 0x8C7E
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
#define GL_ACTIVE_VARYINGS_NV 0x8C81
#define GL_ACTIVE_VARYING_MAX_LENGTH_NV 0x8C82
#define GL_TRANSFORM_FEEDBACK_VARYINGS 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
#define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
#define GL_TRANSFORM_FEEDBACK_RECORD_NV 0x8C86
#define GL_PRIMITIVES_GENERATED 0x8C87
#define GL_PRIMITIVES_GENERATED_EXT 0x8C87
#define GL_PRIMITIVES_GENERATED_NV 0x8C87
#define GL_PRIMITIVES_GENERATED_OES 0x8C87
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
#define GL_RASTERIZER_DISCARD 0x8C89
#define GL_RASTERIZER_DISCARD_EXT 0x8C89
#define GL_RASTERIZER_DISCARD_NV 0x8C89
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV 0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
#define GL_INTERLEAVED_ATTRIBS 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_EXT 0x8C8C
#define GL_INTERLEAVED_ATTRIBS_NV 0x8C8C
#define GL_SEPARATE_ATTRIBS 0x8C8D
#define GL_SEPARATE_ATTRIBS_EXT 0x8C8D
#define GL_SEPARATE_ATTRIBS_NV 0x8C8D
#define GL_TRANSFORM_FEEDBACK_BUFFER 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_EXT 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_NV 0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
#define GL_ATC_RGB_AMD 0x8C92
#define GL_ATC_RGBA_EXPLICIT_ALPHA_AMD 0x8C93
#define GL_POINT_SPRITE_COORD_ORIGIN 0x8CA0
#define GL_LOWER_LEFT 0x8CA1
#define GL_LOWER_LEFT_EXT 0x8CA1
#define GL_UPPER_LEFT 0x8CA2
#define GL_UPPER_LEFT_EXT 0x8CA2
#define GL_STENCIL_BACK_REF 0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK 0x8CA4
#define GL_STENCIL_BACK_WRITEMASK 0x8CA5
#define GL_DRAW_FRAMEBUFFER_BINDING 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_APPLE 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_DRAW_FRAMEBUFFER_BINDING_NV 0x8CA6
#define GL_FRAMEBUFFER_BINDING 0x8CA6
#define GL_FRAMEBUFFER_BINDING_ANGLE 0x8CA6
#define GL_FRAMEBUFFER_BINDING_EXT 0x8CA6
#define GL_FRAMEBUFFER_BINDING_OES 0x8CA6
#define GL_RENDERBUFFER_BINDING 0x8CA7
#define GL_RENDERBUFFER_BINDING_ANGLE 0x8CA7
#define GL_RENDERBUFFER_BINDING_EXT 0x8CA7
#define GL_RENDERBUFFER_BINDING_OES 0x8CA7
#define GL_READ_FRAMEBUFFER 0x8CA8
#define GL_READ_FRAMEBUFFER_ANGLE 0x8CA8
#define GL_READ_FRAMEBUFFER_APPLE 0x8CA8
#define GL_READ_FRAMEBUFFER_EXT 0x8CA8
#define GL_READ_FRAMEBUFFER_NV 0x8CA8
#define GL_DRAW_FRAMEBUFFER 0x8CA9
#define GL_DRAW_FRAMEBUFFER_ANGLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_APPLE 0x8CA9
#define GL_DRAW_FRAMEBUFFER_EXT 0x8CA9
#define GL_DRAW_FRAMEBUFFER_NV 0x8CA9
#define GL_READ_FRAMEBUFFER_BINDING 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_ANGLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_APPLE 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_EXT 0x8CAA
#define GL_READ_FRAMEBUFFER_BINDING_NV 0x8CAA
#define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
#define GL_RENDERBUFFER_SAMPLES 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_ANGLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_APPLE 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_EXT 0x8CAB
#define GL_RENDERBUFFER_SAMPLES_NV 0x8CAB
#define GL_DEPTH_COMPONENT32F 0x8CAC
#define GL_DEPTH32F_STENCIL8 0x8CAD
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES 0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES 0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES 0x8CD2
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES 0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
#define GL_FRAMEBUFFER_COMPLETE 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_EXT 0x8CD5
#define GL_FRAMEBUFFER_COMPLETE_OES 0x8CD5
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES 0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES 0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES 0x8CD9
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES 0x8CDA
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES 0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES 0x8CDC
#define GL_FRAMEBUFFER_UNSUPPORTED 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_EXT 0x8CDD
#define GL_FRAMEBUFFER_UNSUPPORTED_OES 0x8CDD
#define GL_MAX_COLOR_ATTACHMENTS 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_EXT 0x8CDF
#define GL_MAX_COLOR_ATTACHMENTS_NV 0x8CDF
#define GL_COLOR_ATTACHMENT0 0x8CE0
#define GL_COLOR_ATTACHMENT0_EXT 0x8CE0
#define GL_COLOR_ATTACHMENT0_NV 0x8CE0
#define GL_COLOR_ATTACHMENT0_OES 0x8CE0
#define GL_COLOR_ATTACHMENT1 0x8CE1
#define GL_COLOR_ATTACHMENT1_EXT 0x8CE1
#define GL_COLOR_ATTACHMENT1_NV 0x8CE1
#define GL_COLOR_ATTACHMENT2 0x8CE2
#define GL_COLOR_ATTACHMENT2_EXT 0x8CE2
#define GL_COLOR_ATTACHMENT2_NV 0x8CE2
#define GL_COLOR_ATTACHMENT3 0x8CE3
#define GL_COLOR_ATTACHMENT3_EXT 0x8CE3
#define GL_COLOR_ATTACHMENT3_NV 0x8CE3
#define GL_COLOR_ATTACHMENT4 0x8CE4
#define GL_COLOR_ATTACHMENT4_EXT 0x8CE4
#define GL_COLOR_ATTACHMENT4_NV 0x8CE4
#define GL_COLOR_ATTACHMENT5 0x8CE5
#define GL_COLOR_ATTACHMENT5_EXT 0x8CE5
#define GL_COLOR_ATTACHMENT5_NV 0x8CE5
#define GL_COLOR_ATTACHMENT6 0x8CE6
#define GL_COLOR_ATTACHMENT6_EXT 0x8CE6
#define GL_COLOR_ATTACHMENT6_NV 0x8CE6
#define GL_COLOR_ATTACHMENT7 0x8CE7
#define GL_COLOR_ATTACHMENT7_EXT 0x8CE7
#define GL_COLOR_ATTACHMENT7_NV 0x8CE7
#define GL_COLOR_ATTACHMENT8 0x8CE8
#define GL_COLOR_ATTACHMENT8_EXT 0x8CE8
#define GL_COLOR_ATTACHMENT8_NV 0x8CE8
#define GL_COLOR_ATTACHMENT9 0x8CE9
#define GL_COLOR_ATTACHMENT9_EXT 0x8CE9
#define GL_COLOR_ATTACHMENT9_NV 0x8CE9
#define GL_COLOR_ATTACHMENT10 0x8CEA
#define GL_COLOR_ATTACHMENT10_EXT 0x8CEA
#define GL_COLOR_ATTACHMENT10_NV 0x8CEA
#define GL_COLOR_ATTACHMENT11 0x8CEB
#define GL_COLOR_ATTACHMENT11_EXT 0x8CEB
#define GL_COLOR_ATTACHMENT11_NV 0x8CEB
#define GL_COLOR_ATTACHMENT12 0x8CEC
#define GL_COLOR_ATTACHMENT12_EXT 0x8CEC
#define GL_COLOR_ATTACHMENT12_NV 0x8CEC
#define GL_COLOR_ATTACHMENT13 0x8CED
#define GL_COLOR_ATTACHMENT13_EXT 0x8CED
#define GL_COLOR_ATTACHMENT13_NV 0x8CED
#define GL_COLOR_ATTACHMENT14 0x8CEE
#define GL_COLOR_ATTACHMENT14_EXT 0x8CEE
#define GL_COLOR_ATTACHMENT14_NV 0x8CEE
#define GL_COLOR_ATTACHMENT15 0x8CEF
#define GL_COLOR_ATTACHMENT15_EXT 0x8CEF
#define GL_COLOR_ATTACHMENT15_NV 0x8CEF
#define GL_COLOR_ATTACHMENT16 0x8CF0
#define GL_COLOR_ATTACHMENT17 0x8CF1
#define GL_COLOR_ATTACHMENT18 0x8CF2
#define GL_COLOR_ATTACHMENT19 0x8CF3
#define GL_COLOR_ATTACHMENT20 0x8CF4
#define GL_COLOR_ATTACHMENT21 0x8CF5
#define GL_COLOR_ATTACHMENT22 0x8CF6
#define GL_COLOR_ATTACHMENT23 0x8CF7
#define GL_COLOR_ATTACHMENT24 0x8CF8
#define GL_COLOR_ATTACHMENT25 0x8CF9
#define GL_COLOR_ATTACHMENT26 0x8CFA
#define GL_COLOR_ATTACHMENT27 0x8CFB
#define GL_COLOR_ATTACHMENT28 0x8CFC
#define GL_COLOR_ATTACHMENT29 0x8CFD
#define GL_COLOR_ATTACHMENT30 0x8CFE
#define GL_COLOR_ATTACHMENT31 0x8CFF
#define GL_DEPTH_ATTACHMENT 0x8D00
#define GL_DEPTH_ATTACHMENT_EXT 0x8D00
#define GL_DEPTH_ATTACHMENT_OES 0x8D00
#define GL_STENCIL_ATTACHMENT 0x8D20
#define GL_STENCIL_ATTACHMENT_EXT 0x8D20
#define GL_STENCIL_ATTACHMENT_OES 0x8D20
#define GL_FRAMEBUFFER 0x8D40
#define GL_FRAMEBUFFER_EXT 0x8D40
#define GL_FRAMEBUFFER_OES 0x8D40
#define GL_RENDERBUFFER 0x8D41
#define GL_RENDERBUFFER_EXT 0x8D41
#define GL_RENDERBUFFER_OES 0x8D41
#define GL_RENDERBUFFER_WIDTH 0x8D42
#define GL_RENDERBUFFER_WIDTH_EXT 0x8D42
#define GL_RENDERBUFFER_WIDTH_OES 0x8D42
#define GL_RENDERBUFFER_HEIGHT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_EXT 0x8D43
#define GL_RENDERBUFFER_HEIGHT_OES 0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
#define GL_RENDERBUFFER_INTERNAL_FORMAT_OES 0x8D44
#define GL_STENCIL_INDEX1 0x8D46
#define GL_STENCIL_INDEX1_EXT 0x8D46
#define GL_STENCIL_INDEX1_OES 0x8D46
#define GL_STENCIL_INDEX4 0x8D47
#define GL_STENCIL_INDEX4_EXT 0x8D47
#define GL_STENCIL_INDEX4_OES 0x8D47
#define GL_STENCIL_INDEX8 0x8D48
#define GL_STENCIL_INDEX8_EXT 0x8D48
#define GL_STENCIL_INDEX8_OES 0x8D48
#define GL_STENCIL_INDEX16 0x8D49
#define GL_STENCIL_INDEX16_EXT 0x8D49
#define GL_RENDERBUFFER_RED_SIZE 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_EXT 0x8D50
#define GL_RENDERBUFFER_RED_SIZE_OES 0x8D50
#define GL_RENDERBUFFER_GREEN_SIZE 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_EXT 0x8D51
#define GL_RENDERBUFFER_GREEN_SIZE_OES 0x8D51
#define GL_RENDERBUFFER_BLUE_SIZE 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_EXT 0x8D52
#define GL_RENDERBUFFER_BLUE_SIZE_OES 0x8D52
#define GL_RENDERBUFFER_ALPHA_SIZE 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_EXT 0x8D53
#define GL_RENDERBUFFER_ALPHA_SIZE_OES 0x8D53
#define GL_RENDERBUFFER_DEPTH_SIZE 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_EXT 0x8D54
#define GL_RENDERBUFFER_DEPTH_SIZE_OES 0x8D54
#define GL_RENDERBUFFER_STENCIL_SIZE 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_EXT 0x8D55
#define GL_RENDERBUFFER_STENCIL_SIZE_OES 0x8D55
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV 0x8D56
#define GL_MAX_SAMPLES 0x8D57
#define GL_MAX_SAMPLES_ANGLE 0x8D57
#define GL_MAX_SAMPLES_APPLE 0x8D57
#define GL_MAX_SAMPLES_EXT 0x8D57
#define GL_MAX_SAMPLES_NV 0x8D57
#define GL_TEXTURE_GEN_STR_OES 0x8D60
#define GL_HALF_FLOAT_OES 0x8D61
#define GL_RGB565 0x8D62
#define GL_RGB565_OES 0x8D62
#define GL_ETC1_RGB8_OES 0x8D64
#define GL_TEXTURE_EXTERNAL_OES 0x8D65
#define GL_SAMPLER_EXTERNAL_OES 0x8D66
#define GL_TEXTURE_BINDING_EXTERNAL_OES 0x8D67
#define GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES 0x8D68
#define GL_PRIMITIVE_RESTART_FIXED_INDEX 0x8D69
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0x8D6A
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT 0x8D6A
#define GL_MAX_ELEMENT_INDEX 0x8D6B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT 0x8D6C
#define GL_RGBA32UI 0x8D70
#define GL_RGBA32UI_EXT 0x8D70
#define GL_RGB32UI 0x8D71
#define GL_RGB32UI_EXT 0x8D71
#define GL_ALPHA32UI_EXT 0x8D72
#define GL_INTENSITY32UI_EXT 0x8D73
#define GL_LUMINANCE32UI_EXT 0x8D74
#define GL_LUMINANCE_ALPHA32UI_EXT 0x8D75
#define GL_RGBA16UI 0x8D76
#define GL_RGBA16UI_EXT 0x8D76
#define GL_RGB16UI 0x8D77
#define GL_RGB16UI_EXT 0x8D77
#define GL_ALPHA16UI_EXT 0x8D78
#define GL_INTENSITY16UI_EXT 0x8D79
#define GL_LUMINANCE16UI_EXT 0x8D7A
#define GL_LUMINANCE_ALPHA16UI_EXT 0x8D7B
#define GL_RGBA8UI 0x8D7C
#define GL_RGBA8UI_EXT 0x8D7C
#define GL_RGB8UI 0x8D7D
#define GL_RGB8UI_EXT 0x8D7D
#define GL_ALPHA8UI_EXT 0x8D7E
#define GL_INTENSITY8UI_EXT 0x8D7F
#define GL_LUMINANCE8UI_EXT 0x8D80
#define GL_LUMINANCE_ALPHA8UI_EXT 0x8D81
#define GL_RGBA32I 0x8D82
#define GL_RGBA32I_EXT 0x8D82
#define GL_RGB32I 0x8D83
#define GL_RGB32I_EXT 0x8D83
#define GL_ALPHA32I_EXT 0x8D84
#define GL_INTENSITY32I_EXT 0x8D85
#define GL_LUMINANCE32I_EXT 0x8D86
#define GL_LUMINANCE_ALPHA32I_EXT 0x8D87
#define GL_RGBA16I 0x8D88
#define GL_RGBA16I_EXT 0x8D88
#define GL_RGB16I 0x8D89
#define GL_RGB16I_EXT 0x8D89
#define GL_ALPHA16I_EXT 0x8D8A
#define GL_INTENSITY16I_EXT 0x8D8B
#define GL_LUMINANCE16I_EXT 0x8D8C
#define GL_LUMINANCE_ALPHA16I_EXT 0x8D8D
#define GL_RGBA8I 0x8D8E
#define GL_RGBA8I_EXT 0x8D8E
#define GL_RGB8I 0x8D8F
#define GL_RGB8I_EXT 0x8D8F
#define GL_ALPHA8I_EXT 0x8D90
#define GL_INTENSITY8I_EXT 0x8D91
#define GL_LUMINANCE8I_EXT 0x8D92
#define GL_LUMINANCE_ALPHA8I_EXT 0x8D93
#define GL_RED_INTEGER 0x8D94
#define GL_RED_INTEGER_EXT 0x8D94
#define GL_GREEN_INTEGER 0x8D95
#define GL_GREEN_INTEGER_EXT 0x8D95
#define GL_BLUE_INTEGER 0x8D96
#define GL_BLUE_INTEGER_EXT 0x8D96
#define GL_ALPHA_INTEGER 0x8D97
#define GL_ALPHA_INTEGER_EXT 0x8D97
#define GL_RGB_INTEGER 0x8D98
#define GL_RGB_INTEGER_EXT 0x8D98
#define GL_RGBA_INTEGER 0x8D99
#define GL_RGBA_INTEGER_EXT 0x8D99
#define GL_BGR_INTEGER 0x8D9A
#define GL_BGR_INTEGER_EXT 0x8D9A
#define GL_BGRA_INTEGER 0x8D9B
#define GL_BGRA_INTEGER_EXT 0x8D9B
#define GL_LUMINANCE_INTEGER_EXT 0x8D9C
#define GL_LUMINANCE_ALPHA_INTEGER_EXT 0x8D9D
#define GL_RGBA_INTEGER_MODE_EXT 0x8D9E
#define GL_INT_2_10_10_10_REV 0x8D9F
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
#define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
#define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
#define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
#define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
#define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
#define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES 0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES 0x8DA8
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
#define GL_LAYER_NV 0x8DAA
#define GL_DEPTH_COMPONENT32F_NV 0x8DAB
#define GL_DEPTH32F_STENCIL8_NV 0x8DAC
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
#define GL_SHADER_INCLUDE_ARB 0x8DAE
#define GL_DEPTH_BUFFER_FLOAT_MODE_NV 0x8DAF
#define GL_FRAMEBUFFER_SRGB 0x8DB9
#define GL_FRAMEBUFFER_SRGB_EXT 0x8DB9
#define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT 0x8DBA
#define GL_COMPRESSED_RED_RGTC1 0x8DBB
#define GL_COMPRESSED_RED_RGTC1_EXT 0x8DBB
#define GL_COMPRESSED_SIGNED_RED_RGTC1 0x8DBC
#define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
#define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
#define GL_COMPRESSED_RG_RGTC2 0x8DBD
#define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
#define GL_COMPRESSED_SIGNED_RG_RGTC2 0x8DBE
#define GL_SAMPLER_1D_ARRAY 0x8DC0
#define GL_SAMPLER_1D_ARRAY_EXT 0x8DC0
#define GL_SAMPLER_2D_ARRAY 0x8DC1
#define GL_SAMPLER_2D_ARRAY_EXT 0x8DC1
#define GL_SAMPLER_BUFFER 0x8DC2
#define GL_SAMPLER_BUFFER_EXT 0x8DC2
#define GL_SAMPLER_BUFFER_OES 0x8DC2
#define GL_SAMPLER_1D_ARRAY_SHADOW 0x8DC3
#define GL_SAMPLER_1D_ARRAY_SHADOW_EXT 0x8DC3
#define GL_SAMPLER_2D_ARRAY_SHADOW 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_EXT 0x8DC4
#define GL_SAMPLER_2D_ARRAY_SHADOW_NV 0x8DC4
#define GL_SAMPLER_CUBE_SHADOW 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_EXT 0x8DC5
#define GL_SAMPLER_CUBE_SHADOW_NV 0x8DC5
#define GL_UNSIGNED_INT_VEC2 0x8DC6
#define GL_UNSIGNED_INT_VEC2_EXT 0x8DC6
#define GL_UNSIGNED_INT_VEC3 0x8DC7
#define GL_UNSIGNED_INT_VEC3_EXT 0x8DC7
#define GL_UNSIGNED_INT_VEC4 0x8DC8
#define GL_UNSIGNED_INT_VEC4_EXT 0x8DC8
#define GL_INT_SAMPLER_1D 0x8DC9
#define GL_INT_SAMPLER_1D_EXT 0x8DC9
#define GL_INT_SAMPLER_2D 0x8DCA
#define GL_INT_SAMPLER_2D_EXT 0x8DCA
#define GL_INT_SAMPLER_3D 0x8DCB
#define GL_INT_SAMPLER_3D_EXT 0x8DCB
#define GL_INT_SAMPLER_CUBE 0x8DCC
#define GL_INT_SAMPLER_CUBE_EXT 0x8DCC
#define GL_INT_SAMPLER_2D_RECT 0x8DCD
#define GL_INT_SAMPLER_2D_RECT_EXT 0x8DCD
#define GL_INT_SAMPLER_1D_ARRAY 0x8DCE
#define GL_INT_SAMPLER_1D_ARRAY_EXT 0x8DCE
#define GL_INT_SAMPLER_2D_ARRAY 0x8DCF
#define GL_INT_SAMPLER_2D_ARRAY_EXT 0x8DCF
#define GL_INT_SAMPLER_BUFFER 0x8DD0
#define GL_INT_SAMPLER_BUFFER_EXT 0x8DD0
#define GL_INT_SAMPLER_BUFFER_OES 0x8DD0
#define GL_UNSIGNED_INT_SAMPLER_1D 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_EXT 0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_2D 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_EXT 0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_3D 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_3D_EXT 0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT 0x8DD4
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_BUFFER 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_OES 0x8DD8
#define GL_GEOMETRY_SHADER 0x8DD9
#define GL_GEOMETRY_SHADER_ARB 0x8DD9
#define GL_GEOMETRY_SHADER_EXT 0x8DD9
#define GL_GEOMETRY_SHADER_OES 0x8DD9
#define GL_GEOMETRY_VERTICES_OUT_ARB 0x8DDA
#define GL_GEOMETRY_VERTICES_OUT_EXT 0x8DDA
#define GL_GEOMETRY_INPUT_TYPE_ARB 0x8DDB
#define GL_GEOMETRY_INPUT_TYPE_EXT 0x8DDB
#define GL_GEOMETRY_OUTPUT_TYPE_ARB 0x8DDC
#define GL_GEOMETRY_OUTPUT_TYPE_EXT 0x8DDC
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
#define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
#define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
#define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES 0x8DDF
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES 0x8DE0
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES 0x8DE1
#define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
#define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
#define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
#define GL_ACTIVE_SUBROUTINES 0x8DE5
#define GL_ACTIVE_SUBROUTINE_UNIFORMS 0x8DE6
#define GL_MAX_SUBROUTINES 0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
#define GL_NAMED_STRING_LENGTH_ARB 0x8DE9
#define GL_NAMED_STRING_TYPE_ARB 0x8DEA
#define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
#define GL_UNIFORM_BUFFER_EXT 0x8DEE
#define GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF
#define GL_LOW_FLOAT 0x8DF0
#define GL_MEDIUM_FLOAT 0x8DF1
#define GL_HIGH_FLOAT 0x8DF2
#define GL_LOW_INT 0x8DF3
#define GL_MEDIUM_INT 0x8DF4
#define GL_HIGH_INT 0x8DF5
#define GL_UNSIGNED_INT_10_10_10_2_OES 0x8DF6
#define GL_INT_10_10_10_2_OES 0x8DF7
#define GL_SHADER_BINARY_FORMATS 0x8DF8
#define GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
#define GL_SHADER_COMPILER 0x8DFA
#define GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
#define GL_MAX_VARYING_VECTORS 0x8DFC
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
#define GL_RENDERBUFFER_COLOR_SAMPLES_NV 0x8E10
#define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
#define GL_MULTISAMPLE_COVERAGE_MODES_NV 0x8E12
#define GL_QUERY_WAIT 0x8E13
#define GL_QUERY_WAIT_NV 0x8E13
#define GL_QUERY_NO_WAIT 0x8E14
#define GL_QUERY_NO_WAIT_NV 0x8E14
#define GL_QUERY_BY_REGION_WAIT 0x8E15
#define GL_QUERY_BY_REGION_WAIT_NV 0x8E15
#define GL_QUERY_BY_REGION_NO_WAIT 0x8E16
#define GL_QUERY_BY_REGION_NO_WAIT_NV 0x8E16
#define GL_QUERY_WAIT_INVERTED 0x8E17
#define GL_QUERY_NO_WAIT_INVERTED 0x8E18
#define GL_QUERY_BY_REGION_WAIT_INVERTED 0x8E19
#define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0x8E1A
#define GL_POLYGON_OFFSET_CLAMP 0x8E1B
#define GL_POLYGON_OFFSET_CLAMP_EXT 0x8E1B
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E1E
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E1F
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E1F
#define GL_COLOR_SAMPLES_NV 0x8E20
#define GL_TRANSFORM_FEEDBACK 0x8E22
#define GL_TRANSFORM_FEEDBACK_NV 0x8E22
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
#define GL_TRANSFORM_FEEDBACK_PAUSED 0x8E23
#define GL_TRANSFORM_FEEDBACK_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
#define GL_TRANSFORM_FEEDBACK_BINDING 0x8E25
#define GL_TRANSFORM_FEEDBACK_BINDING_NV 0x8E25
#define GL_FRAME_NV 0x8E26
#define GL_FIELDS_NV 0x8E27
#define GL_CURRENT_TIME_NV 0x8E28
#define GL_TIMESTAMP 0x8E28
#define GL_TIMESTAMP_EXT 0x8E28
#define GL_NUM_FILL_STREAMS_NV 0x8E29
#define GL_PRESENT_TIME_NV 0x8E2A
#define GL_PRESENT_DURATION_NV 0x8E2B
#define GL_DEPTH_COMPONENT16_NONLINEAR_NV 0x8E2C
#define GL_PROGRAM_MATRIX_EXT 0x8E2D
#define GL_TRANSPOSE_PROGRAM_MATRIX_EXT 0x8E2E
#define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
#define GL_TEXTURE_SWIZZLE_R 0x8E42
#define GL_TEXTURE_SWIZZLE_R_EXT 0x8E42
#define GL_TEXTURE_SWIZZLE_G 0x8E43
#define GL_TEXTURE_SWIZZLE_G_EXT 0x8E43
#define GL_TEXTURE_SWIZZLE_B 0x8E44
#define GL_TEXTURE_SWIZZLE_B_EXT 0x8E44
#define GL_TEXTURE_SWIZZLE_A 0x8E45
#define GL_TEXTURE_SWIZZLE_A_EXT 0x8E45
#define GL_TEXTURE_SWIZZLE_RGBA 0x8E46
#define GL_TEXTURE_SWIZZLE_RGBA_EXT 0x8E46
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
#define GL_NUM_COMPATIBLE_SUBROUTINES 0x8E4A
#define GL_COMPATIBLE_SUBROUTINES 0x8E4B
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
#define GL_FIRST_VERTEX_CONVENTION 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_EXT 0x8E4D
#define GL_FIRST_VERTEX_CONVENTION_OES 0x8E4D
#define GL_LAST_VERTEX_CONVENTION 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_EXT 0x8E4E
#define GL_LAST_VERTEX_CONVENTION_OES 0x8E4E
#define GL_PROVOKING_VERTEX 0x8E4F
#define GL_PROVOKING_VERTEX_EXT 0x8E4F
#define GL_SAMPLE_LOCATION_ARB 0x8E50
#define GL_SAMPLE_LOCATION_NV 0x8E50
#define GL_SAMPLE_POSITION 0x8E50
#define GL_SAMPLE_POSITION_NV 0x8E50
#define GL_SAMPLE_MASK 0x8E51
#define GL_SAMPLE_MASK_NV 0x8E51
#define GL_SAMPLE_MASK_VALUE 0x8E52
#define GL_SAMPLE_MASK_VALUE_NV 0x8E52
#define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
#define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
#define GL_TEXTURE_RENDERBUFFER_NV 0x8E55
#define GL_SAMPLER_RENDERBUFFER_NV 0x8E56
#define GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
#define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
#define GL_MAX_SAMPLE_MASK_WORDS 0x8E59
#define GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59
#define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT 0x8E5A
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES 0x8E5A
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5B
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES 0x8E5C
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES 0x8E5D
#define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV 0x8E5F
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
#define GL_MAX_VERTEX_STREAMS 0x8E71
#define GL_PATCH_VERTICES 0x8E72
#define GL_PATCH_VERTICES_EXT 0x8E72
#define GL_PATCH_VERTICES_OES 0x8E72
#define GL_PATCH_DEFAULT_INNER_LEVEL 0x8E73
#define GL_PATCH_DEFAULT_INNER_LEVEL_EXT 0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL 0x8E74
#define GL_PATCH_DEFAULT_OUTER_LEVEL_EXT 0x8E74
#define GL_TESS_CONTROL_OUTPUT_VERTICES 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_EXT 0x8E75
#define GL_TESS_CONTROL_OUTPUT_VERTICES_OES 0x8E75
#define GL_TESS_GEN_MODE 0x8E76
#define GL_TESS_GEN_MODE_EXT 0x8E76
#define GL_TESS_GEN_MODE_OES 0x8E76
#define GL_TESS_GEN_SPACING 0x8E77
#define GL_TESS_GEN_SPACING_EXT 0x8E77
#define GL_TESS_GEN_SPACING_OES 0x8E77
#define GL_TESS_GEN_VERTEX_ORDER 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_EXT 0x8E78
#define GL_TESS_GEN_VERTEX_ORDER_OES 0x8E78
#define GL_TESS_GEN_POINT_MODE 0x8E79
#define GL_TESS_GEN_POINT_MODE_EXT 0x8E79
#define GL_TESS_GEN_POINT_MODE_OES 0x8E79
#define GL_ISOLINES 0x8E7A
#define GL_ISOLINES_EXT 0x8E7A
#define GL_ISOLINES_OES 0x8E7A
#define GL_FRACTIONAL_ODD 0x8E7B
#define GL_FRACTIONAL_ODD_EXT 0x8E7B
#define GL_FRACTIONAL_ODD_OES 0x8E7B
#define GL_FRACTIONAL_EVEN 0x8E7C
#define GL_FRACTIONAL_EVEN_EXT 0x8E7C
#define GL_FRACTIONAL_EVEN_OES 0x8E7C
#define GL_MAX_PATCH_VERTICES 0x8E7D
#define GL_MAX_PATCH_VERTICES_EXT 0x8E7D
#define GL_MAX_PATCH_VERTICES_OES 0x8E7D
#define GL_MAX_TESS_GEN_LEVEL 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_EXT 0x8E7E
#define GL_MAX_TESS_GEN_LEVEL_OES 0x8E7E
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT 0x8E7F
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES 0x8E7F
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT 0x8E80
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES 0x8E80
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT 0x8E81
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES 0x8E81
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT 0x8E82
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES 0x8E82
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT 0x8E83
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES 0x8E83
#define GL_MAX_TESS_PATCH_COMPONENTS 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_EXT 0x8E84
#define GL_MAX_TESS_PATCH_COMPONENTS_OES 0x8E84
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT 0x8E85
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES 0x8E85
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT 0x8E86
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES 0x8E86
#define GL_TESS_EVALUATION_SHADER 0x8E87
#define GL_TESS_EVALUATION_SHADER_EXT 0x8E87
#define GL_TESS_EVALUATION_SHADER_OES 0x8E87
#define GL_TESS_CONTROL_SHADER 0x8E88
#define GL_TESS_CONTROL_SHADER_EXT 0x8E88
#define GL_TESS_CONTROL_SHADER_OES 0x8E88
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT 0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES 0x8E89
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT 0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES 0x8E8A
#define GL_COMPRESSED_RGBA_BPTC_UNORM 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
#define GL_COMPRESSED_RGBA_BPTC_UNORM_EXT 0x8E8C
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT 0x8E8D
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT 0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT 0x8E8F
#define GL_COVERAGE_COMPONENT_NV 0x8ED0
#define GL_COVERAGE_COMPONENT4_NV 0x8ED1
#define GL_COVERAGE_ATTACHMENT_NV 0x8ED2
#define GL_COVERAGE_BUFFERS_NV 0x8ED3
#define GL_COVERAGE_SAMPLES_NV 0x8ED4
#define GL_COVERAGE_ALL_FRAGMENTS_NV 0x8ED5
#define GL_COVERAGE_EDGE_FRAGMENTS_NV 0x8ED6
#define GL_COVERAGE_AUTOMATIC_NV 0x8ED7
#define GL_INCLUSIVE_EXT 0x8F10
#define GL_EXCLUSIVE_EXT 0x8F11
#define GL_WINDOW_RECTANGLE_EXT 0x8F12
#define GL_WINDOW_RECTANGLE_MODE_EXT 0x8F13
#define GL_MAX_WINDOW_RECTANGLES_EXT 0x8F14
#define GL_NUM_WINDOW_RECTANGLES_EXT 0x8F15
#define GL_BUFFER_GPU_ADDRESS_NV 0x8F1D
#define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
#define GL_ELEMENT_ARRAY_UNIFIED_NV 0x8F1F
#define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
#define GL_VERTEX_ARRAY_ADDRESS_NV 0x8F21
#define GL_NORMAL_ARRAY_ADDRESS_NV 0x8F22
#define GL_COLOR_ARRAY_ADDRESS_NV 0x8F23
#define GL_INDEX_ARRAY_ADDRESS_NV 0x8F24
#define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
#define GL_EDGE_FLAG_ARRAY_ADDRESS_NV 0x8F26
#define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
#define GL_FOG_COORD_ARRAY_ADDRESS_NV 0x8F28
#define GL_ELEMENT_ARRAY_ADDRESS_NV 0x8F29
#define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV 0x8F2A
#define GL_VERTEX_ARRAY_LENGTH_NV 0x8F2B
#define GL_NORMAL_ARRAY_LENGTH_NV 0x8F2C
#define GL_COLOR_ARRAY_LENGTH_NV 0x8F2D
#define GL_INDEX_ARRAY_LENGTH_NV 0x8F2E
#define GL_TEXTURE_COORD_ARRAY_LENGTH_NV 0x8F2F
#define GL_EDGE_FLAG_ARRAY_LENGTH_NV 0x8F30
#define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
#define GL_FOG_COORD_ARRAY_LENGTH_NV 0x8F32
#define GL_ELEMENT_ARRAY_LENGTH_NV 0x8F33
#define GL_GPU_ADDRESS_NV 0x8F34
#define GL_MAX_SHADER_BUFFER_ADDRESS_NV 0x8F35
#define GL_COPY_READ_BUFFER 0x8F36
#define GL_COPY_READ_BUFFER_BINDING 0x8F36
#define GL_COPY_READ_BUFFER_NV 0x8F36
#define GL_COPY_WRITE_BUFFER 0x8F37
#define GL_COPY_WRITE_BUFFER_BINDING 0x8F37
#define GL_COPY_WRITE_BUFFER_NV 0x8F37
#define GL_MAX_IMAGE_UNITS 0x8F38
#define GL_MAX_IMAGE_UNITS_EXT 0x8F38
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0x8F39
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39
#define GL_IMAGE_BINDING_NAME 0x8F3A
#define GL_IMAGE_BINDING_NAME_EXT 0x8F3A
#define GL_IMAGE_BINDING_LEVEL 0x8F3B
#define GL_IMAGE_BINDING_LEVEL_EXT 0x8F3B
#define GL_IMAGE_BINDING_LAYERED 0x8F3C
#define GL_IMAGE_BINDING_LAYERED_EXT 0x8F3C
#define GL_IMAGE_BINDING_LAYER 0x8F3D
#define GL_IMAGE_BINDING_LAYER_EXT 0x8F3D
#define GL_IMAGE_BINDING_ACCESS 0x8F3E
#define GL_IMAGE_BINDING_ACCESS_EXT 0x8F3E
#define GL_DRAW_INDIRECT_BUFFER 0x8F3F
#define GL_DRAW_INDIRECT_UNIFIED_NV 0x8F40
#define GL_DRAW_INDIRECT_ADDRESS_NV 0x8F41
#define GL_DRAW_INDIRECT_LENGTH_NV 0x8F42
#define GL_DRAW_INDIRECT_BUFFER_BINDING 0x8F43
#define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
#define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV 0x8F45
#define GL_DOUBLE_MAT2 0x8F46
#define GL_DOUBLE_MAT2_EXT 0x8F46
#define GL_DOUBLE_MAT3 0x8F47
#define GL_DOUBLE_MAT3_EXT 0x8F47
#define GL_DOUBLE_MAT4 0x8F48
#define GL_DOUBLE_MAT4_EXT 0x8F48
#define GL_DOUBLE_MAT2x3 0x8F49
#define GL_DOUBLE_MAT2x3_EXT 0x8F49
#define GL_DOUBLE_MAT2x4 0x8F4A
#define GL_DOUBLE_MAT2x4_EXT 0x8F4A
#define GL_DOUBLE_MAT3x2 0x8F4B
#define GL_DOUBLE_MAT3x2_EXT 0x8F4B
#define GL_DOUBLE_MAT3x4 0x8F4C
#define GL_DOUBLE_MAT3x4_EXT 0x8F4C
#define GL_DOUBLE_MAT4x2 0x8F4D
#define GL_DOUBLE_MAT4x2_EXT 0x8F4D
#define GL_DOUBLE_MAT4x3 0x8F4E
#define GL_DOUBLE_MAT4x3_EXT 0x8F4E
#define GL_VERTEX_BINDING_BUFFER 0x8F4F
#define GL_MALI_SHADER_BINARY_ARM 0x8F60
#define GL_MALI_PROGRAM_BINARY_ARM 0x8F61
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT 0x8F63
#define GL_SHADER_PIXEL_LOCAL_STORAGE_EXT 0x8F64
#define GL_FETCH_PER_SAMPLE_ARM 0x8F65
#define GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM 0x8F66
#define GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT 0x8F67
#define GL_TEXTURE_ASTC_DECODE_PRECISION_EXT 0x8F69
#define GL_RED_SNORM 0x8F90
#define GL_RG_SNORM 0x8F91
#define GL_RGB_SNORM 0x8F92
#define GL_RGBA_SNORM 0x8F93
#define GL_R8_SNORM 0x8F94
#define GL_RG8_SNORM 0x8F95
#define GL_RGB8_SNORM 0x8F96
#define GL_RGBA8_SNORM 0x8F97
#define GL_R16_SNORM 0x8F98
#define GL_R16_SNORM_EXT 0x8F98
#define GL_RG16_SNORM 0x8F99
#define GL_RG16_SNORM_EXT 0x8F99
#define GL_RGB16_SNORM 0x8F9A
#define GL_RGB16_SNORM_EXT 0x8F9A
#define GL_RGBA16_SNORM 0x8F9B
#define GL_RGBA16_SNORM_EXT 0x8F9B
#define GL_SIGNED_NORMALIZED 0x8F9C
#define GL_PRIMITIVE_RESTART 0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX 0x8F9E
#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB 0x8F9F
#define GL_PERFMON_GLOBAL_MODE_QCOM 0x8FA0
#define GL_BINNING_CONTROL_HINT_QCOM 0x8FB0
#define GL_CPU_OPTIMIZED_QCOM 0x8FB1
#define GL_GPU_OPTIMIZED_QCOM 0x8FB2
#define GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM 0x8FB3
#define GL_GPU_DISJOINT_EXT 0x8FBB
#define GL_SR8_EXT 0x8FBD
#define GL_SRG8_EXT 0x8FBE
#define GL_SHADER_BINARY_VIV 0x8FC4
#define GL_INT8_NV 0x8FE0
#define GL_INT8_VEC2_NV 0x8FE1
#define GL_INT8_VEC3_NV 0x8FE2
#define GL_INT8_VEC4_NV 0x8FE3
#define GL_INT16_NV 0x8FE4
#define GL_INT16_VEC2_NV 0x8FE5
#define GL_INT16_VEC3_NV 0x8FE6
#define GL_INT16_VEC4_NV 0x8FE7
#define GL_INT64_VEC2_ARB 0x8FE9
#define GL_INT64_VEC2_NV 0x8FE9
#define GL_INT64_VEC3_ARB 0x8FEA
#define GL_INT64_VEC3_NV 0x8FEA
#define GL_INT64_VEC4_ARB 0x8FEB
#define GL_INT64_VEC4_NV 0x8FEB
#define GL_UNSIGNED_INT8_NV 0x8FEC
#define GL_UNSIGNED_INT8_VEC2_NV 0x8FED
#define GL_UNSIGNED_INT8_VEC3_NV 0x8FEE
#define GL_UNSIGNED_INT8_VEC4_NV 0x8FEF
#define GL_UNSIGNED_INT16_NV 0x8FF0
#define GL_UNSIGNED_INT16_VEC2_NV 0x8FF1
#define GL_UNSIGNED_INT16_VEC3_NV 0x8FF2
#define GL_UNSIGNED_INT16_VEC4_NV 0x8FF3
#define GL_UNSIGNED_INT64_VEC2_ARB 0x8FF5
#define GL_UNSIGNED_INT64_VEC2_NV 0x8FF5
#define GL_UNSIGNED_INT64_VEC3_ARB 0x8FF6
#define GL_UNSIGNED_INT64_VEC3_NV 0x8FF6
#define GL_UNSIGNED_INT64_VEC4_ARB 0x8FF7
#define GL_UNSIGNED_INT64_VEC4_NV 0x8FF7
#define GL_FLOAT16_NV 0x8FF8
#define GL_FLOAT16_VEC2_NV 0x8FF9
#define GL_FLOAT16_VEC3_NV 0x8FFA
#define GL_FLOAT16_VEC4_NV 0x8FFB
#define GL_DOUBLE_VEC2 0x8FFC
#define GL_DOUBLE_VEC2_EXT 0x8FFC
#define GL_DOUBLE_VEC3 0x8FFD
#define GL_DOUBLE_VEC3_EXT 0x8FFD
#define GL_DOUBLE_VEC4 0x8FFE
#define GL_DOUBLE_VEC4_EXT 0x8FFE
#define GL_SAMPLER_BUFFER_AMD 0x9001
#define GL_INT_SAMPLER_BUFFER_AMD 0x9002
#define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
#define GL_TESSELLATION_MODE_AMD 0x9004
#define GL_TESSELLATION_FACTOR_AMD 0x9005
#define GL_DISCRETE_AMD 0x9006
#define GL_CONTINUOUS_AMD 0x9007
#define GL_TEXTURE_CUBE_MAP_ARRAY 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_EXT 0x9009
#define GL_TEXTURE_CUBE_MAP_ARRAY_OES 0x9009
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT 0x900A
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES 0x900A
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0x900B
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_OES 0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT 0x900D
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES 0x900D
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900E
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900E
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT 0x900F
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES 0x900F
#define GL_ALPHA_SNORM 0x9010
#define GL_LUMINANCE_SNORM 0x9011
#define GL_LUMINANCE_ALPHA_SNORM 0x9012
#define GL_INTENSITY_SNORM 0x9013
#define GL_ALPHA8_SNORM 0x9014
#define GL_LUMINANCE8_SNORM 0x9015
#define GL_LUMINANCE8_ALPHA8_SNORM 0x9016
#define GL_INTENSITY8_SNORM 0x9017
#define GL_ALPHA16_SNORM 0x9018
#define GL_LUMINANCE16_SNORM 0x9019
#define GL_LUMINANCE16_ALPHA16_SNORM 0x901A
#define GL_INTENSITY16_SNORM 0x901B
#define GL_FACTOR_MIN_AMD 0x901C
#define GL_FACTOR_MAX_AMD 0x901D
#define GL_DEPTH_CLAMP_NEAR_AMD 0x901E
#define GL_DEPTH_CLAMP_FAR_AMD 0x901F
#define GL_VIDEO_BUFFER_NV 0x9020
#define GL_VIDEO_BUFFER_BINDING_NV 0x9021
#define GL_FIELD_UPPER_NV 0x9022
#define GL_FIELD_LOWER_NV 0x9023
#define GL_NUM_VIDEO_CAPTURE_STREAMS_NV 0x9024
#define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
#define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
#define GL_LAST_VIDEO_CAPTURE_STATUS_NV 0x9027
#define GL_VIDEO_BUFFER_PITCH_NV 0x9028
#define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
#define GL_VIDEO_COLOR_CONVERSION_MAX_NV 0x902A
#define GL_VIDEO_COLOR_CONVERSION_MIN_NV 0x902B
#define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
#define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
#define GL_PARTIAL_SUCCESS_NV 0x902E
#define GL_SUCCESS_NV 0x902F
#define GL_FAILURE_NV 0x9030
#define GL_YCBYCR8_422_NV 0x9031
#define GL_YCBAYCR8A_4224_NV 0x9032
#define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV 0x9033
#define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
#define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV 0x9035
#define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
#define GL_Z4Y12Z4CB12Z4CR12_444_NV 0x9037
#define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV 0x9038
#define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV 0x9039
#define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
#define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
#define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
#define GL_TEXTURE_COVERAGE_SAMPLES_NV 0x9045
#define GL_TEXTURE_COLOR_SAMPLES_NV 0x9046
#define GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX 0x9047
#define GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX 0x9048
#define GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX 0x9049
#define GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX 0x904A
#define GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX 0x904B
#define GL_IMAGE_1D 0x904C
#define GL_IMAGE_1D_EXT 0x904C
#define GL_IMAGE_2D 0x904D
#define GL_IMAGE_2D_EXT 0x904D
#define GL_IMAGE_3D 0x904E
#define GL_IMAGE_3D_EXT 0x904E
#define GL_IMAGE_2D_RECT 0x904F
#define GL_IMAGE_2D_RECT_EXT 0x904F
#define GL_IMAGE_CUBE 0x9050
#define GL_IMAGE_CUBE_EXT 0x9050
#define GL_IMAGE_BUFFER 0x9051
#define GL_IMAGE_BUFFER_EXT 0x9051
#define GL_IMAGE_BUFFER_OES 0x9051
#define GL_IMAGE_1D_ARRAY 0x9052
#define GL_IMAGE_1D_ARRAY_EXT 0x9052
#define GL_IMAGE_2D_ARRAY 0x9053
#define GL_IMAGE_2D_ARRAY_EXT 0x9053
#define GL_IMAGE_CUBE_MAP_ARRAY 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_EXT 0x9054
#define GL_IMAGE_CUBE_MAP_ARRAY_OES 0x9054
#define GL_IMAGE_2D_MULTISAMPLE 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_EXT 0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0x9056
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
#define GL_INT_IMAGE_1D 0x9057
#define GL_INT_IMAGE_1D_EXT 0x9057
#define GL_INT_IMAGE_2D 0x9058
#define GL_INT_IMAGE_2D_EXT 0x9058
#define GL_INT_IMAGE_3D 0x9059
#define GL_INT_IMAGE_3D_EXT 0x9059
#define GL_INT_IMAGE_2D_RECT 0x905A
#define GL_INT_IMAGE_2D_RECT_EXT 0x905A
#define GL_INT_IMAGE_CUBE 0x905B
#define GL_INT_IMAGE_CUBE_EXT 0x905B
#define GL_INT_IMAGE_BUFFER 0x905C
#define GL_INT_IMAGE_BUFFER_EXT 0x905C
#define GL_INT_IMAGE_BUFFER_OES 0x905C
#define GL_INT_IMAGE_1D_ARRAY 0x905D
#define GL_INT_IMAGE_1D_ARRAY_EXT 0x905D
#define GL_INT_IMAGE_2D_ARRAY 0x905E
#define GL_INT_IMAGE_2D_ARRAY_EXT 0x905E
#define GL_INT_IMAGE_CUBE_MAP_ARRAY 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x905F
#define GL_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x905F
#define GL_INT_IMAGE_2D_MULTISAMPLE 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_EXT 0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x9061
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
#define GL_UNSIGNED_INT_IMAGE_1D 0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_EXT 0x9062
#define GL_UNSIGNED_INT_IMAGE_2D 0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_EXT 0x9063
#define GL_UNSIGNED_INT_IMAGE_3D 0x9064
#define GL_UNSIGNED_INT_IMAGE_3D_EXT 0x9064
#define GL_UNSIGNED_INT_IMAGE_2D_RECT 0x9065
#define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
#define GL_UNSIGNED_INT_IMAGE_CUBE 0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_EXT 0x9066
#define GL_UNSIGNED_INT_IMAGE_BUFFER 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT 0x9067
#define GL_UNSIGNED_INT_IMAGE_BUFFER_OES 0x9067
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0x9068
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES 0x906A
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
#define GL_MAX_IMAGE_SAMPLES 0x906D
#define GL_MAX_IMAGE_SAMPLES_EXT 0x906D
#define GL_IMAGE_BINDING_FORMAT 0x906E
#define GL_IMAGE_BINDING_FORMAT_EXT 0x906E
#define GL_RGB10_A2UI 0x906F
#define GL_PATH_FORMAT_SVG_NV 0x9070
#define GL_PATH_FORMAT_PS_NV 0x9071
#define GL_STANDARD_FONT_NAME_NV 0x9072
#define GL_SYSTEM_FONT_NAME_NV 0x9073
#define GL_FILE_NAME_NV 0x9074
#define GL_PATH_STROKE_WIDTH_NV 0x9075
#define GL_PATH_END_CAPS_NV 0x9076
#define GL_PATH_INITIAL_END_CAP_NV 0x9077
#define GL_PATH_TERMINAL_END_CAP_NV 0x9078
#define GL_PATH_JOIN_STYLE_NV 0x9079
#define GL_PATH_MITER_LIMIT_NV 0x907A
#define GL_PATH_DASH_CAPS_NV 0x907B
#define GL_PATH_INITIAL_DASH_CAP_NV 0x907C
#define GL_PATH_TERMINAL_DASH_CAP_NV 0x907D
#define GL_PATH_DASH_OFFSET_NV 0x907E
#define GL_PATH_CLIENT_LENGTH_NV 0x907F
#define GL_PATH_FILL_MODE_NV 0x9080
#define GL_PATH_FILL_MASK_NV 0x9081
#define GL_PATH_FILL_COVER_MODE_NV 0x9082
#define GL_PATH_STROKE_COVER_MODE_NV 0x9083
#define GL_PATH_STROKE_MASK_NV 0x9084
#define GL_COUNT_UP_NV 0x9088
#define GL_COUNT_DOWN_NV 0x9089
#define GL_PATH_OBJECT_BOUNDING_BOX_NV 0x908A
#define GL_CONVEX_HULL_NV 0x908B
#define GL_BOUNDING_BOX_NV 0x908D
#define GL_TRANSLATE_X_NV 0x908E
#define GL_TRANSLATE_Y_NV 0x908F
#define GL_TRANSLATE_2D_NV 0x9090
#define GL_TRANSLATE_3D_NV 0x9091
#define GL_AFFINE_2D_NV 0x9092
#define GL_AFFINE_3D_NV 0x9094
#define GL_TRANSPOSE_AFFINE_2D_NV 0x9096
#define GL_TRANSPOSE_AFFINE_3D_NV 0x9098
#define GL_UTF8_NV 0x909A
#define GL_UTF16_NV 0x909B
#define GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV 0x909C
#define GL_PATH_COMMAND_COUNT_NV 0x909D
#define GL_PATH_COORD_COUNT_NV 0x909E
#define GL_PATH_DASH_ARRAY_COUNT_NV 0x909F
#define GL_PATH_COMPUTED_LENGTH_NV 0x90A0
#define GL_PATH_FILL_BOUNDING_BOX_NV 0x90A1
#define GL_PATH_STROKE_BOUNDING_BOX_NV 0x90A2
#define GL_SQUARE_NV 0x90A3
#define GL_ROUND_NV 0x90A4
#define GL_TRIANGULAR_NV 0x90A5
#define GL_BEVEL_NV 0x90A6
#define GL_MITER_REVERT_NV 0x90A7
#define GL_MITER_TRUNCATE_NV 0x90A8
#define GL_SKIP_MISSING_GLYPH_NV 0x90A9
#define GL_USE_MISSING_GLYPH_NV 0x90AA
#define GL_PATH_ERROR_POSITION_NV 0x90AB
#define GL_PATH_FOG_GEN_MODE_NV 0x90AC
#define GL_ACCUM_ADJACENT_PAIRS_NV 0x90AD
#define GL_ADJACENT_PAIRS_NV 0x90AE
#define GL_FIRST_TO_REST_NV 0x90AF
#define GL_PATH_GEN_MODE_NV 0x90B0
#define GL_PATH_GEN_COEFF_NV 0x90B1
#define GL_PATH_GEN_COLOR_FORMAT_NV 0x90B2
#define GL_PATH_GEN_COMPONENTS_NV 0x90B3
#define GL_PATH_DASH_OFFSET_RESET_NV 0x90B4
#define GL_MOVE_TO_RESETS_NV 0x90B5
#define GL_MOVE_TO_CONTINUES_NV 0x90B6
#define GL_PATH_STENCIL_FUNC_NV 0x90B7
#define GL_PATH_STENCIL_REF_NV 0x90B8
#define GL_PATH_STENCIL_VALUE_MASK_NV 0x90B9
#define GL_SCALED_RESOLVE_FASTEST_EXT 0x90BA
#define GL_SCALED_RESOLVE_NICEST_EXT 0x90BB
#define GL_MIN_MAP_BUFFER_ALIGNMENT 0x90BC
#define GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV 0x90BD
#define GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV 0x90BE
#define GL_PATH_COVER_DEPTH_FUNC_NV 0x90BF
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0x90C7
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0x90C9
#define GL_MAX_VERTEX_IMAGE_UNIFORMS 0x90CA
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT 0x90CB
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES 0x90CB
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT 0x90CC
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES 0x90CC
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT 0x90CD
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES 0x90CD
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0x90CE
#define GL_MAX_COMBINED_IMAGE_UNIFORMS 0x90CF
#define GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV 0x90D0
#define GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV 0x90D1
#define GL_SHADER_STORAGE_BUFFER 0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
#define GL_SHADER_STORAGE_BUFFER_START 0x90D4
#define GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT 0x90D7
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES 0x90D7
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT 0x90D8
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES 0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT 0x90D9
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES 0x90D9
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
#define GL_SYNC_X11_FENCE_EXT 0x90E1
#define GL_DEPTH_STENCIL_TEXTURE_MODE 0x90EA
#define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0x90EB
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0x90EC
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0x90ED
#define GL_DISPATCH_INDIRECT_BUFFER 0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0x90EF
#define GL_COLOR_ATTACHMENT_EXT 0x90F0
#define GL_MULTIVIEW_EXT 0x90F1
#define GL_MAX_MULTIVIEW_BUFFERS_EXT 0x90F2
#define GL_CONTEXT_ROBUST_ACCESS 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_EXT 0x90F3
#define GL_CONTEXT_ROBUST_ACCESS_KHR 0x90F3
#define GL_COMPUTE_PROGRAM_NV 0x90FB
#define GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV 0x90FC
#define GL_TEXTURE_2D_MULTISAMPLE 0x9100
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0x9101
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9102
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES 0x9102
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES 0x9105
#define GL_TEXTURE_SAMPLES 0x9106
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
#define GL_SAMPLER_2D_MULTISAMPLE 0x9108
#define GL_INT_SAMPLER_2D_MULTISAMPLE 0x9109
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910B
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910B
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910C
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES 0x910D
#define GL_MAX_COLOR_TEXTURE_SAMPLES 0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES 0x910F
#define GL_MAX_INTEGER_SAMPLES 0x9110
#define GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
#define GL_MAX_SERVER_WAIT_TIMEOUT_APPLE 0x9111
#define GL_OBJECT_TYPE 0x9112
#define GL_OBJECT_TYPE_APPLE 0x9112
#define GL_SYNC_CONDITION 0x9113
#define GL_SYNC_CONDITION_APPLE 0x9113
#define GL_SYNC_STATUS 0x9114
#define GL_SYNC_STATUS_APPLE 0x9114
#define GL_SYNC_FLAGS 0x9115
#define GL_SYNC_FLAGS_APPLE 0x9115
#define GL_SYNC_FENCE 0x9116
#define GL_SYNC_FENCE_APPLE 0x9116
#define GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
#define GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE 0x9117
#define GL_UNSIGNALED 0x9118
#define GL_UNSIGNALED_APPLE 0x9118
#define GL_SIGNALED 0x9119
#define GL_SIGNALED_APPLE 0x9119
#define GL_ALREADY_SIGNALED 0x911A
#define GL_ALREADY_SIGNALED_APPLE 0x911A
#define GL_TIMEOUT_EXPIRED 0x911B
#define GL_TIMEOUT_EXPIRED_APPLE 0x911B
#define GL_CONDITION_SATISFIED 0x911C
#define GL_CONDITION_SATISFIED_APPLE 0x911C
#define GL_WAIT_FAILED 0x911D
#define GL_WAIT_FAILED_APPLE 0x911D
#define GL_BUFFER_ACCESS_FLAGS 0x911F
#define GL_BUFFER_MAP_LENGTH 0x9120
#define GL_BUFFER_MAP_OFFSET 0x9121
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0x9122
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT 0x9123
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES 0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT 0x9124
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES 0x9124
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0x9125
#define GL_CONTEXT_PROFILE_MASK 0x9126
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0x9127
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0x912A
#define GL_PACK_COMPRESSED_BLOCK_WIDTH 0x912B
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0x912C
#define GL_PACK_COMPRESSED_BLOCK_DEPTH 0x912D
#define GL_PACK_COMPRESSED_BLOCK_SIZE 0x912E
#define GL_TEXTURE_IMMUTABLE_FORMAT 0x912F
#define GL_TEXTURE_IMMUTABLE_FORMAT_EXT 0x912F
#define GL_SGX_PROGRAM_BINARY_IMG 0x9130
#define GL_RENDERBUFFER_SAMPLES_IMG 0x9133
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG 0x9134
#define GL_MAX_SAMPLES_IMG 0x9135
#define GL_TEXTURE_SAMPLES_IMG 0x9136
#define GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG 0x9137
#define GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG 0x9138
#define GL_CUBIC_IMG 0x9139
#define GL_CUBIC_MIPMAP_NEAREST_IMG 0x913A
#define GL_CUBIC_MIPMAP_LINEAR_IMG 0x913B
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG 0x913C
#define GL_NUM_DOWNSAMPLE_SCALES_IMG 0x913D
#define GL_DOWNSAMPLE_SCALES_IMG 0x913E
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG 0x913F
#define GL_MAX_DEBUG_MESSAGE_LENGTH 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_AMD 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0x9143
#define GL_MAX_DEBUG_MESSAGE_LENGTH_KHR 0x9143
#define GL_MAX_DEBUG_LOGGED_MESSAGES 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0x9144
#define GL_MAX_DEBUG_LOGGED_MESSAGES_KHR 0x9144
#define GL_DEBUG_LOGGED_MESSAGES 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_AMD 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_ARB 0x9145
#define GL_DEBUG_LOGGED_MESSAGES_KHR 0x9145
#define GL_DEBUG_SEVERITY_HIGH 0x9146
#define GL_DEBUG_SEVERITY_HIGH_AMD 0x9146
#define GL_DEBUG_SEVERITY_HIGH_ARB 0x9146
#define GL_DEBUG_SEVERITY_HIGH_KHR 0x9146
#define GL_DEBUG_SEVERITY_MEDIUM 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_AMD 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_ARB 0x9147
#define GL_DEBUG_SEVERITY_MEDIUM_KHR 0x9147
#define GL_DEBUG_SEVERITY_LOW 0x9148
#define GL_DEBUG_SEVERITY_LOW_AMD 0x9148
#define GL_DEBUG_SEVERITY_LOW_ARB 0x9148
#define GL_DEBUG_SEVERITY_LOW_KHR 0x9148
#define GL_DEBUG_CATEGORY_API_ERROR_AMD 0x9149
#define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
#define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
#define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
#define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
#define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
#define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
#define GL_DEBUG_CATEGORY_OTHER_AMD 0x9150
#define GL_BUFFER_OBJECT_EXT 0x9151
#define GL_DATA_BUFFER_AMD 0x9151
#define GL_PERFORMANCE_MONITOR_AMD 0x9152
#define GL_QUERY_OBJECT_AMD 0x9153
#define GL_QUERY_OBJECT_EXT 0x9153
#define GL_VERTEX_ARRAY_OBJECT_AMD 0x9154
#define GL_VERTEX_ARRAY_OBJECT_EXT 0x9154
#define GL_SAMPLER_OBJECT_AMD 0x9155
#define GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD 0x9160
#define GL_QUERY_BUFFER 0x9192
#define GL_QUERY_BUFFER_AMD 0x9192
#define GL_QUERY_BUFFER_BINDING 0x9193
#define GL_QUERY_BUFFER_BINDING_AMD 0x9193
#define GL_QUERY_RESULT_NO_WAIT 0x9194
#define GL_QUERY_RESULT_NO_WAIT_AMD 0x9194
#define GL_VIRTUAL_PAGE_SIZE_X_AMD 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_ARB 0x9195
#define GL_VIRTUAL_PAGE_SIZE_X_EXT 0x9195
#define GL_VIRTUAL_PAGE_SIZE_Y_AMD 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Y_EXT 0x9196
#define GL_VIRTUAL_PAGE_SIZE_Z_AMD 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0x9197
#define GL_VIRTUAL_PAGE_SIZE_Z_EXT 0x9197
#define GL_MAX_SPARSE_TEXTURE_SIZE_AMD 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0x9198
#define GL_MAX_SPARSE_TEXTURE_SIZE_EXT 0x9198
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0x9199
#define GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT 0x9199
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0x919A
#define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT 0x919A
#define GL_MIN_SPARSE_LEVEL_AMD 0x919B
#define GL_MIN_LOD_WARNING_AMD 0x919C
#define GL_TEXTURE_BUFFER_OFFSET 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_EXT 0x919D
#define GL_TEXTURE_BUFFER_OFFSET_OES 0x919D
#define GL_TEXTURE_BUFFER_SIZE 0x919E
#define GL_TEXTURE_BUFFER_SIZE_EXT 0x919E
#define GL_TEXTURE_BUFFER_SIZE_OES 0x919E
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT 0x919F
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES 0x919F
#define GL_STREAM_RASTERIZATION_AMD 0x91A0
#define GL_VERTEX_ELEMENT_SWIZZLE_AMD 0x91A4
#define GL_VERTEX_ID_SWIZZLE_AMD 0x91A5
#define GL_TEXTURE_SPARSE_ARB 0x91A6
#define GL_TEXTURE_SPARSE_EXT 0x91A6
#define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0x91A7
#define GL_VIRTUAL_PAGE_SIZE_INDEX_EXT 0x91A7
#define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0x91A8
#define GL_NUM_VIRTUAL_PAGE_SIZES_EXT 0x91A8
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0x91A9
#define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT 0x91A9
#define GL_NUM_SPARSE_LEVELS_ARB 0x91AA
#define GL_NUM_SPARSE_LEVELS_EXT 0x91AA
#define GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD 0x91AE
#define GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD 0x91AF
#define GL_MAX_SHADER_COMPILER_THREADS_ARB 0x91B0
#define GL_MAX_SHADER_COMPILER_THREADS_KHR 0x91B0
#define GL_COMPLETION_STATUS_ARB 0x91B1
#define GL_COMPLETION_STATUS_KHR 0x91B1
#define GL_COMPUTE_SHADER 0x91B9
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0x91BB
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0x91BC
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0x91BD
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0x91BE
#define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0x91BF
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0x91BF
#define GL_FLOAT16_MAT2_AMD 0x91C5
#define GL_FLOAT16_MAT3_AMD 0x91C6
#define GL_FLOAT16_MAT4_AMD 0x91C7
#define GL_FLOAT16_MAT2x3_AMD 0x91C8
#define GL_FLOAT16_MAT2x4_AMD 0x91C9
#define GL_FLOAT16_MAT3x2_AMD 0x91CA
#define GL_FLOAT16_MAT3x4_AMD 0x91CB
#define GL_FLOAT16_MAT4x2_AMD 0x91CC
#define GL_FLOAT16_MAT4x3_AMD 0x91CD
#define GL_UNPACK_FLIP_Y_WEBGL 0x9240
#define GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL 0x9241
#define GL_CONTEXT_LOST_WEBGL 0x9242
#define GL_UNPACK_COLORSPACE_CONVERSION_WEBGL 0x9243
#define GL_BROWSER_DEFAULT_WEBGL 0x9244
#define GL_SHADER_BINARY_DMP 0x9250
#define GL_SMAPHS30_PROGRAM_BINARY_DMP 0x9251
#define GL_SMAPHS_PROGRAM_BINARY_DMP 0x9252
#define GL_DMP_PROGRAM_BINARY_DMP 0x9253
#define GL_GCCSO_SHADER_BINARY_FJ 0x9260
#define GL_COMPRESSED_R11_EAC 0x9270
#define GL_COMPRESSED_R11_EAC_OES 0x9270
#define GL_COMPRESSED_SIGNED_R11_EAC 0x9271
#define GL_COMPRESSED_SIGNED_R11_EAC_OES 0x9271
#define GL_COMPRESSED_RG11_EAC 0x9272
#define GL_COMPRESSED_RG11_EAC_OES 0x9272
#define GL_COMPRESSED_SIGNED_RG11_EAC 0x9273
#define GL_COMPRESSED_SIGNED_RG11_EAC_OES 0x9273
#define GL_COMPRESSED_RGB8_ETC2 0x9274
#define GL_COMPRESSED_RGB8_ETC2_OES 0x9274
#define GL_COMPRESSED_SRGB8_ETC2 0x9275
#define GL_COMPRESSED_SRGB8_ETC2_OES 0x9275
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9276
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9276
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0x9277
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES 0x9277
#define GL_COMPRESSED_RGBA8_ETC2_EAC 0x9278
#define GL_COMPRESSED_RGBA8_ETC2_EAC_OES 0x9278
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0x9279
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES 0x9279
#define GL_BLEND_PREMULTIPLIED_SRC_NV 0x9280
#define GL_BLEND_OVERLAP_NV 0x9281
#define GL_UNCORRELATED_NV 0x9282
#define GL_DISJOINT_NV 0x9283
#define GL_CONJOINT_NV 0x9284
#define GL_BLEND_ADVANCED_COHERENT_KHR 0x9285
#define GL_BLEND_ADVANCED_COHERENT_NV 0x9285
#define GL_SRC_NV 0x9286
#define GL_DST_NV 0x9287
#define GL_SRC_OVER_NV 0x9288
#define GL_DST_OVER_NV 0x9289
#define GL_SRC_IN_NV 0x928A
#define GL_DST_IN_NV 0x928B
#define GL_SRC_OUT_NV 0x928C
#define GL_DST_OUT_NV 0x928D
#define GL_SRC_ATOP_NV 0x928E
#define GL_DST_ATOP_NV 0x928F
#define GL_PLUS_NV 0x9291
#define GL_PLUS_DARKER_NV 0x9292
#define GL_MULTIPLY 0x9294
#define GL_MULTIPLY_KHR 0x9294
#define GL_MULTIPLY_NV 0x9294
#define GL_SCREEN 0x9295
#define GL_SCREEN_KHR 0x9295
#define GL_SCREEN_NV 0x9295
#define GL_OVERLAY 0x9296
#define GL_OVERLAY_KHR 0x9296
#define GL_OVERLAY_NV 0x9296
#define GL_DARKEN 0x9297
#define GL_DARKEN_KHR 0x9297
#define GL_DARKEN_NV 0x9297
#define GL_LIGHTEN 0x9298
#define GL_LIGHTEN_KHR 0x9298
#define GL_LIGHTEN_NV 0x9298
#define GL_COLORDODGE 0x9299
#define GL_COLORDODGE_KHR 0x9299
#define GL_COLORDODGE_NV 0x9299
#define GL_COLORBURN 0x929A
#define GL_COLORBURN_KHR 0x929A
#define GL_COLORBURN_NV 0x929A
#define GL_HARDLIGHT 0x929B
#define GL_HARDLIGHT_KHR 0x929B
#define GL_HARDLIGHT_NV 0x929B
#define GL_SOFTLIGHT 0x929C
#define GL_SOFTLIGHT_KHR 0x929C
#define GL_SOFTLIGHT_NV 0x929C
#define GL_DIFFERENCE 0x929E
#define GL_DIFFERENCE_KHR 0x929E
#define GL_DIFFERENCE_NV 0x929E
#define GL_MINUS_NV 0x929F
#define GL_EXCLUSION 0x92A0
#define GL_EXCLUSION_KHR 0x92A0
#define GL_EXCLUSION_NV 0x92A0
#define GL_CONTRAST_NV 0x92A1
#define GL_INVERT_RGB_NV 0x92A3
#define GL_LINEARDODGE_NV 0x92A4
#define GL_LINEARBURN_NV 0x92A5
#define GL_VIVIDLIGHT_NV 0x92A6
#define GL_LINEARLIGHT_NV 0x92A7
#define GL_PINLIGHT_NV 0x92A8
#define GL_HARDMIX_NV 0x92A9
#define GL_HSL_HUE 0x92AD
#define GL_HSL_HUE_KHR 0x92AD
#define GL_HSL_HUE_NV 0x92AD
#define GL_HSL_SATURATION 0x92AE
#define GL_HSL_SATURATION_KHR 0x92AE
#define GL_HSL_SATURATION_NV 0x92AE
#define GL_HSL_COLOR 0x92AF
#define GL_HSL_COLOR_KHR 0x92AF
#define GL_HSL_COLOR_NV 0x92AF
#define GL_HSL_LUMINOSITY 0x92B0
#define GL_HSL_LUMINOSITY_KHR 0x92B0
#define GL_HSL_LUMINOSITY_NV 0x92B0
#define GL_PLUS_CLAMPED_NV 0x92B1
#define GL_PLUS_CLAMPED_ALPHA_NV 0x92B2
#define GL_MINUS_CLAMPED_NV 0x92B3
#define GL_INVERT_OVG_NV 0x92B4
#define GL_MAX_LGPU_GPUS_NVX 0x92BA
#define GL_MULTICAST_GPUS_NV 0x92BA
#define GL_PURGED_CONTEXT_RESET_NV 0x92BB
#define GL_PRIMITIVE_BOUNDING_BOX 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_ARB 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_EXT 0x92BE
#define GL_PRIMITIVE_BOUNDING_BOX_OES 0x92BE
#define GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV 0x92BF
#define GL_ATOMIC_COUNTER_BUFFER 0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_BINDING 0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_START 0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0x92CB
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0x92CC
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT 0x92CD
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES 0x92CD
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT 0x92CE
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES 0x92CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT 0x92CF
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES 0x92CF
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0x92D0
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0x92D1
#define GL_MAX_VERTEX_ATOMIC_COUNTERS 0x92D2
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT 0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES 0x92D3
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT 0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES 0x92D4
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT 0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES 0x92D5
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0x92D6
#define GL_MAX_COMBINED_ATOMIC_COUNTERS 0x92D7
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0x92D8
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0x92D9
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0x92DA
#define GL_UNSIGNED_INT_ATOMIC_COUNTER 0x92DB
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0x92DC
#define GL_FRAGMENT_COVERAGE_TO_COLOR_NV 0x92DD
#define GL_FRAGMENT_COVERAGE_COLOR_NV 0x92DE
#define GL_DEBUG_OUTPUT 0x92E0
#define GL_DEBUG_OUTPUT_KHR 0x92E0
#define GL_UNIFORM 0x92E1
#define GL_UNIFORM_BLOCK 0x92E2
#define GL_PROGRAM_INPUT 0x92E3
#define GL_PROGRAM_OUTPUT 0x92E4
#define GL_BUFFER_VARIABLE 0x92E5
#define GL_SHADER_STORAGE_BLOCK 0x92E6
#define GL_IS_PER_PATCH 0x92E7
#define GL_IS_PER_PATCH_EXT 0x92E7
#define GL_IS_PER_PATCH_OES 0x92E7
#define GL_VERTEX_SUBROUTINE 0x92E8
#define GL_TESS_CONTROL_SUBROUTINE 0x92E9
#define GL_TESS_EVALUATION_SUBROUTINE 0x92EA
#define GL_GEOMETRY_SUBROUTINE 0x92EB
#define GL_FRAGMENT_SUBROUTINE 0x92EC
#define GL_COMPUTE_SUBROUTINE 0x92ED
#define GL_VERTEX_SUBROUTINE_UNIFORM 0x92EE
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0x92EF
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0x92F0
#define GL_GEOMETRY_SUBROUTINE_UNIFORM 0x92F1
#define GL_FRAGMENT_SUBROUTINE_UNIFORM 0x92F2
#define GL_COMPUTE_SUBROUTINE_UNIFORM 0x92F3
#define GL_TRANSFORM_FEEDBACK_VARYING 0x92F4
#define GL_ACTIVE_RESOURCES 0x92F5
#define GL_MAX_NAME_LENGTH 0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES 0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0x92F8
#define GL_NAME_LENGTH 0x92F9
#define GL_TYPE 0x92FA
#define GL_ARRAY_SIZE 0x92FB
#define GL_OFFSET 0x92FC
#define GL_BLOCK_INDEX 0x92FD
#define GL_ARRAY_STRIDE 0x92FE
#define GL_MATRIX_STRIDE 0x92FF
#define GL_IS_ROW_MAJOR 0x9300
#define GL_ATOMIC_COUNTER_BUFFER_INDEX 0x9301
#define GL_BUFFER_BINDING 0x9302
#define GL_BUFFER_DATA_SIZE 0x9303
#define GL_NUM_ACTIVE_VARIABLES 0x9304
#define GL_ACTIVE_VARIABLES 0x9305
#define GL_REFERENCED_BY_VERTEX_SHADER 0x9306
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT 0x9307
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES 0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT 0x9308
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES 0x9308
#define GL_REFERENCED_BY_GEOMETRY_SHADER 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_EXT 0x9309
#define GL_REFERENCED_BY_GEOMETRY_SHADER_OES 0x9309
#define GL_REFERENCED_BY_FRAGMENT_SHADER 0x930A
#define GL_REFERENCED_BY_COMPUTE_SHADER 0x930B
#define GL_TOP_LEVEL_ARRAY_SIZE 0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE 0x930D
#define GL_LOCATION 0x930E
#define GL_LOCATION_INDEX 0x930F
#define GL_LOCATION_INDEX_EXT 0x930F
#define GL_FRAMEBUFFER_DEFAULT_WIDTH 0x9310
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT 0x9312
#define GL_FRAMEBUFFER_DEFAULT_LAYERS_OES 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0x9313
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0x9314
#define GL_MAX_FRAMEBUFFER_WIDTH 0x9315
#define GL_MAX_FRAMEBUFFER_HEIGHT 0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_EXT 0x9317
#define GL_MAX_FRAMEBUFFER_LAYERS_OES 0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES 0x9318
#define GL_RASTER_MULTISAMPLE_EXT 0x9327
#define GL_RASTER_SAMPLES_EXT 0x9328
#define GL_MAX_RASTER_SAMPLES_EXT 0x9329
#define GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT 0x932A
#define GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT 0x932B
#define GL_EFFECTIVE_RASTER_SAMPLES_EXT 0x932C
#define GL_DEPTH_SAMPLES_NV 0x932D
#define GL_STENCIL_SAMPLES_NV 0x932E
#define GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV 0x932F
#define GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV 0x9330
#define GL_COVERAGE_MODULATION_TABLE_NV 0x9331
#define GL_COVERAGE_MODULATION_NV 0x9332
#define GL_COVERAGE_MODULATION_TABLE_SIZE_NV 0x9333
#define GL_WARP_SIZE_NV 0x9339
#define GL_WARPS_PER_SM_NV 0x933A
#define GL_SM_COUNT_NV 0x933B
#define GL_FILL_RECTANGLE_NV 0x933C
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB 0x933D
#define GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV 0x933D
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV 0x933E
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB 0x933F
#define GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV 0x933F
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV 0x9340
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB 0x9341
#define GL_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9341
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB 0x9342
#define GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV 0x9342
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB 0x9343
#define GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV 0x9343
#define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0x9344
#define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0x9345
#define GL_CONSERVATIVE_RASTERIZATION_NV 0x9346
#define GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV 0x9347
#define GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV 0x9348
#define GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV 0x9349
#define GL_LOCATION_COMPONENT 0x934A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0x934C
#define GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV 0x934D
#define GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV 0x934E
#define GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV 0x934F
#define GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV 0x9350
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV 0x9351
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV 0x9352
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV 0x9353
#define GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV 0x9354
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV 0x9355
#define GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV 0x9356
#define GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV 0x9357
#define GL_VIEWPORT_SWIZZLE_X_NV 0x9358
#define GL_VIEWPORT_SWIZZLE_Y_NV 0x9359
#define GL_VIEWPORT_SWIZZLE_Z_NV 0x935A
#define GL_VIEWPORT_SWIZZLE_W_NV 0x935B
#define GL_CLIP_ORIGIN 0x935C
#define GL_CLIP_ORIGIN_EXT 0x935C
#define GL_CLIP_DEPTH_MODE 0x935D
#define GL_CLIP_DEPTH_MODE_EXT 0x935D
#define GL_NEGATIVE_ONE_TO_ONE 0x935E
#define GL_NEGATIVE_ONE_TO_ONE_EXT 0x935E
#define GL_ZERO_TO_ONE 0x935F
#define GL_ZERO_TO_ONE_EXT 0x935F
#define GL_CLEAR_TEXTURE 0x9365
#define GL_TEXTURE_REDUCTION_MODE_ARB 0x9366
#define GL_TEXTURE_REDUCTION_MODE_EXT 0x9366
#define GL_WEIGHTED_AVERAGE_ARB 0x9367
#define GL_WEIGHTED_AVERAGE_EXT 0x9367
#define GL_FONT_GLYPHS_AVAILABLE_NV 0x9368
#define GL_FONT_TARGET_UNAVAILABLE_NV 0x9369
#define GL_FONT_UNAVAILABLE_NV 0x936A
#define GL_FONT_UNINTELLIGIBLE_NV 0x936B
#define GL_STANDARD_FONT_FORMAT_NV 0x936C
#define GL_FRAGMENT_INPUT_NV 0x936D
#define GL_UNIFORM_BUFFER_UNIFIED_NV 0x936E
#define GL_UNIFORM_BUFFER_ADDRESS_NV 0x936F
#define GL_UNIFORM_BUFFER_LENGTH_NV 0x9370
#define GL_MULTISAMPLES_NV 0x9371
#define GL_SUPERSAMPLE_SCALE_X_NV 0x9372
#define GL_SUPERSAMPLE_SCALE_Y_NV 0x9373
#define GL_CONFORMANT_NV 0x9374
#define GL_CONSERVATIVE_RASTER_DILATE_NV 0x9379
#define GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV 0x937A
#define GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV 0x937B
#define GL_VIEWPORT_POSITION_W_SCALE_NV 0x937C
#define GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV 0x937D
#define GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV 0x937E
#define GL_NUM_SAMPLE_COUNTS 0x9380
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB 0x9381
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY 0x9382
#define GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB 0x9382
#define GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE 0x93A0
#define GL_BGRA8_EXT 0x93A1
#define GL_TEXTURE_USAGE_ANGLE 0x93A2
#define GL_FRAMEBUFFER_ATTACHMENT_ANGLE 0x93A3
#define GL_PACK_REVERSE_ROW_ORDER_ANGLE 0x93A4
#define GL_PROGRAM_BINARY_ANGLE 0x93A6
#define GL_COMPRESSED_RGBA_ASTC_4x4 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR 0x93B0
#define GL_COMPRESSED_RGBA_ASTC_5x4 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR 0x93B1
#define GL_COMPRESSED_RGBA_ASTC_5x5 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR 0x93B2
#define GL_COMPRESSED_RGBA_ASTC_6x5 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR 0x93B3
#define GL_COMPRESSED_RGBA_ASTC_6x6 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR 0x93B4
#define GL_COMPRESSED_RGBA_ASTC_8x5 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR 0x93B5
#define GL_COMPRESSED_RGBA_ASTC_8x6 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR 0x93B6
#define GL_COMPRESSED_RGBA_ASTC_8x8 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR 0x93B7
#define GL_COMPRESSED_RGBA_ASTC_10x5 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR 0x93B8
#define GL_COMPRESSED_RGBA_ASTC_10x6 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR 0x93B9
#define GL_COMPRESSED_RGBA_ASTC_10x8 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR 0x93BA
#define GL_COMPRESSED_RGBA_ASTC_10x10 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR 0x93BB
#define GL_COMPRESSED_RGBA_ASTC_12x10 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR 0x93BC
#define GL_COMPRESSED_RGBA_ASTC_12x12 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR 0x93BD
#define GL_COMPRESSED_RGBA_ASTC_3x3x3_OES 0x93C0
#define GL_COMPRESSED_RGBA_ASTC_4x3x3_OES 0x93C1
#define GL_COMPRESSED_RGBA_ASTC_4x4x3_OES 0x93C2
#define GL_COMPRESSED_RGBA_ASTC_4x4x4_OES 0x93C3
#define GL_COMPRESSED_RGBA_ASTC_5x4x4_OES 0x93C4
#define GL_COMPRESSED_RGBA_ASTC_5x5x4_OES 0x93C5
#define GL_COMPRESSED_RGBA_ASTC_5x5x5_OES 0x93C6
#define GL_COMPRESSED_RGBA_ASTC_6x5x5_OES 0x93C7
#define GL_COMPRESSED_RGBA_ASTC_6x6x5_OES 0x93C8
#define GL_COMPRESSED_RGBA_ASTC_6x6x6_OES 0x93C9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR 0x93D0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR 0x93D1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR 0x93D2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR 0x93D3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR 0x93D4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR 0x93D5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR 0x93D6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR 0x93D7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR 0x93D8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR 0x93D9
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR 0x93DA
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR 0x93DB
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR 0x93DC
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR 0x93DD
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES 0x93E0
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES 0x93E1
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES 0x93E2
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES 0x93E3
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES 0x93E4
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES 0x93E5
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES 0x93E6
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES 0x93E7
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES 0x93E8
#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES 0x93E9
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG 0x93F0
#define GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG 0x93F1
#define GL_PERFQUERY_COUNTER_EVENT_INTEL 0x94F0
#define GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL 0x94F1
#define GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL 0x94F2
#define GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL 0x94F3
#define GL_PERFQUERY_COUNTER_RAW_INTEL 0x94F4
#define GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL 0x94F5
#define GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL 0x94F8
#define GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL 0x94F9
#define GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL 0x94FA
#define GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL 0x94FB
#define GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL 0x94FC
#define GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL 0x94FD
#define GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL 0x94FE
#define GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL 0x94FF
#define GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL 0x9500
#define GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT 0x9530
#define GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT 0x9531
#define GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV 0x9540
#define GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV 0x9542
#define GL_QUERY_RESOURCE_SYS_RESERVED_NV 0x9544
#define GL_QUERY_RESOURCE_TEXTURE_NV 0x9545
#define GL_QUERY_RESOURCE_RENDERBUFFER_NV 0x9546
#define GL_QUERY_RESOURCE_BUFFEROBJECT_NV 0x9547
#define GL_PER_GPU_STORAGE_NV 0x9548
#define GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV 0x9549
#define GL_CONSERVATIVE_RASTER_MODE_NV 0x954D
#define GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV 0x954E
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV 0x954F
#define GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV 0x9550
#define GL_SHADER_BINARY_FORMAT_SPIR_V 0x9551
#define GL_SHADER_BINARY_FORMAT_SPIR_V_ARB 0x9551
#define GL_SPIR_V_BINARY 0x9552
#define GL_SPIR_V_BINARY_ARB 0x9552
#define GL_SPIR_V_EXTENSIONS 0x9553
#define GL_NUM_SPIR_V_EXTENSIONS 0x9554
#define GL_RENDER_GPU_MASK_NV 0x9558
#define GL_TEXTURE_TILING_EXT 0x9580
#define GL_DEDICATED_MEMORY_OBJECT_EXT 0x9581
#define GL_NUM_TILING_TYPES_EXT 0x9582
#define GL_TILING_TYPES_EXT 0x9583
#define GL_OPTIMAL_TILING_EXT 0x9584
#define GL_LINEAR_TILING_EXT 0x9585
#define GL_HANDLE_TYPE_OPAQUE_FD_EXT 0x9586
#define GL_HANDLE_TYPE_OPAQUE_WIN32_EXT 0x9587
#define GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT 0x9588
#define GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT 0x9589
#define GL_HANDLE_TYPE_D3D12_RESOURCE_EXT 0x958A
#define GL_HANDLE_TYPE_D3D11_IMAGE_EXT 0x958B
#define GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT 0x958C
#define GL_LAYOUT_GENERAL_EXT 0x958D
#define GL_LAYOUT_COLOR_ATTACHMENT_EXT 0x958E
#define GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT 0x958F
#define GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT 0x9590
#define GL_LAYOUT_SHADER_READ_ONLY_EXT 0x9591
#define GL_LAYOUT_TRANSFER_SRC_EXT 0x9592
#define GL_LAYOUT_TRANSFER_DST_EXT 0x9593
#define GL_HANDLE_TYPE_D3D12_FENCE_EXT 0x9594
#define GL_D3D12_FENCE_VALUE_EXT 0x9595
#define GL_NUM_DEVICE_UUIDS_EXT 0x9596
#define GL_DEVICE_UUID_EXT 0x9597
#define GL_DRIVER_UUID_EXT 0x9598
#define GL_DEVICE_LUID_EXT 0x9599
#define GL_DEVICE_NODE_MASK_EXT 0x959A
#define GL_PROTECTED_MEMORY_OBJECT_EXT 0x959B
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR 0x9630
#define GL_MAX_VIEWS_OVR 0x9631
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR 0x9632
#define GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR 0x9633
#define GL_GS_SHADER_BINARY_MTK 0x9640
#define GL_GS_PROGRAM_BINARY_MTK 0x9641
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT 0x9650
#define GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT 0x9651
#define GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT 0x9652
#define GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM 0x96A2
#define GL_SHARED_EDGE_NV 0xC0
#define GL_ROUNDED_RECT_NV 0xE8
#define GL_RELATIVE_ROUNDED_RECT_NV 0xE9
#define GL_ROUNDED_RECT2_NV 0xEA
#define GL_RELATIVE_ROUNDED_RECT2_NV 0xEB
#define GL_ROUNDED_RECT4_NV 0xEC
#define GL_RELATIVE_ROUNDED_RECT4_NV 0xED
#define GL_ROUNDED_RECT8_NV 0xEE
#define GL_RELATIVE_ROUNDED_RECT8_NV 0xEF
#define GL_RESTART_PATH_NV 0xF0
#define GL_DUP_FIRST_CUBIC_CURVE_TO_NV 0xF2
#define GL_DUP_LAST_CUBIC_CURVE_TO_NV 0xF4
#define GL_RECT_NV 0xF6
#define GL_RELATIVE_RECT_NV 0xF7
#define GL_CIRCULAR_CCW_ARC_TO_NV 0xF8
#define GL_CIRCULAR_CW_ARC_TO_NV 0xFA
#define GL_CIRCULAR_TANGENT_ARC_TO_NV 0xFC
#define GL_ARC_TO_NV 0xFE
#define GL_RELATIVE_ARC_TO_NV 0xFF
#define GL_TRACE_ALL_BITS_MESA 0xFFFF
#define GL_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS 0xFFFFFFFF
#define GL_ALL_BARRIER_BITS_EXT 0xFFFFFFFF
#define GL_ALL_PIXELS_AMD 0xFFFFFFFF
#define GL_ALL_SHADER_BITS 0xFFFFFFFF
#define GL_ALL_SHADER_BITS_EXT 0xFFFFFFFF
#define GL_CLIENT_ALL_ATTRIB_BITS 0xFFFFFFFF
#define GL_QUERY_ALL_EVENT_BITS_AMD 0xFFFFFFFF
#define GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFFull
#define GL_TIMEOUT_IGNORED_APPLE 0xFFFFFFFFFFFFFFFFull
#define GL_INVALID_INDEX 0xFFFFFFFFu
#define GL_LAYOUT_LINEAR_INTEL 1
#define GL_ONE 1
#define GL_TRUE 1
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_CULL_VERTEX_IBM 103050
#define GL_ALL_STATIC_DATA_IBM 103060
#define GL_STATIC_VERTEX_ARRAY_IBM 103061
#define GL_VERTEX_ARRAY_LIST_IBM 103070
#define GL_NORMAL_ARRAY_LIST_IBM 103071
#define GL_COLOR_ARRAY_LIST_IBM 103072
#define GL_INDEX_ARRAY_LIST_IBM 103073
#define GL_TEXTURE_COORD_ARRAY_LIST_IBM 103074
#define GL_EDGE_FLAG_ARRAY_LIST_IBM 103075
#define GL_FOG_COORDINATE_ARRAY_LIST_IBM 103076
#define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
#define GL_VERTEX_ARRAY_LIST_STRIDE_IBM 103080
#define GL_NORMAL_ARRAY_LIST_STRIDE_IBM 103081
#define GL_COLOR_ARRAY_LIST_STRIDE_IBM 103082
#define GL_INDEX_ARRAY_LIST_STRIDE_IBM 103083
#define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
#define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
#define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
#define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
#define GL_UUID_SIZE_EXT 16
#define GL_LAYOUT_LINEAR_CPU_CACHED_INTEL 2
#define GL_LUID_SIZE_EXT 8

/* Version IDs */
#undef GL_VERSION_1_0
#define GL_VERSION_1_0 1
#undef GL_VERSION_1_1
#define GL_VERSION_1_1 2
#undef GL_VERSION_1_2
#define GL_VERSION_1_2 3
#undef GL_VERSION_1_3
#define GL_VERSION_1_3 4
#undef GL_VERSION_1_4
#define GL_VERSION_1_4 5
#undef GL_VERSION_1_5
#define GL_VERSION_1_5 6
#undef GL_VERSION_2_0
#define GL_VERSION_2_0 7
#undef GL_VERSION_2_1
#define GL_VERSION_2_1 8
#undef GL_VERSION_3_0
#define GL_VERSION_3_0 9
#undef GL_VERSION_3_1
#define GL_VERSION_3_1 10
#undef GL_VERSION_3_2
#define GL_VERSION_3_2 11
#undef GL_VERSION_3_3
#define GL_VERSION_3_3 12
#undef GL_VERSION_4_0
#define GL_VERSION_4_0 13
#undef GL_VERSION_4_1
#define GL_VERSION_4_1 14
#undef GL_VERSION_4_2
#define GL_VERSION_4_2 15
#undef GL_VERSION_4_3
#define GL_VERSION_4_3 16
#undef GL_VERSION_4_4
#define GL_VERSION_4_4 17
#undef GL_VERSION_4_5
#define GL_VERSION_4_5 18
#undef GL_VERSION_4_6
#define GL_VERSION_4_6 19
#undef GL_VERSION_ES_CM_1_0
#define GL_VERSION_ES_CM_1_0 20
#undef GL_ES_VERSION_2_0
#define GL_ES_VERSION_2_0 21
#undef GL_ES_VERSION_3_0
#define GL_ES_VERSION_3_0 22
#undef GL_ES_VERSION_3_1
#define GL_ES_VERSION_3_1 23
#undef GL_ES_VERSION_3_2
#define GL_ES_VERSION_3_2 24
#undef GL_SC_VERSION_2_0
#define GL_SC_VERSION_2_0 25

/* Extension IDs */
#undef GL_3DFX_multisample
#define GL_3DFX_multisample 26
#undef GL_3DFX_tbuffer
#define GL_3DFX_tbuffer 27
#undef GL_3DFX_texture_compression_FXT1
#define GL_3DFX_texture_compression_FXT1 28
#undef GL_AMD_blend_minmax_factor
#define GL_AMD_blend_minmax_factor 29
#undef GL_AMD_compressed_3DC_texture
#define GL_AMD_compressed_3DC_texture 30
#undef GL_AMD_compressed_ATC_texture
#define GL_AMD_compressed_ATC_texture 31
#undef GL_AMD_conservative_depth
#define GL_AMD_conservative_depth 32
#undef GL_AMD_debug_output
#define GL_AMD_debug_output 33
#undef GL_AMD_depth_clamp_separate
#define GL_AMD_depth_clamp_separate 34
#undef GL_AMD_draw_buffers_blend
#define GL_AMD_draw_buffers_blend 35
#undef GL_AMD_framebuffer_sample_positions
#define GL_AMD_framebuffer_sample_positions 36
#undef GL_AMD_gcn_shader
#define GL_AMD_gcn_shader 37
#undef GL_AMD_gpu_shader_half_float
#define GL_AMD_gpu_shader_half_float 38
#undef GL_AMD_gpu_shader_int16
#define GL_AMD_gpu_shader_int16 39
#undef GL_AMD_gpu_shader_int64
#define GL_AMD_gpu_shader_int64 40
#undef GL_AMD_interleaved_elements
#define GL_AMD_interleaved_elements 41
#undef GL_AMD_multi_draw_indirect
#define GL_AMD_multi_draw_indirect 42
#undef GL_AMD_name_gen_delete
#define GL_AMD_name_gen_delete 43
#undef GL_AMD_occlusion_query_event
#define GL_AMD_occlusion_query_event 44
#undef GL_AMD_performance_monitor
#define GL_AMD_performance_monitor 45
#undef GL_AMD_pinned_memory
#define GL_AMD_pinned_memory 46
#undef GL_AMD_program_binary_Z400
#define GL_AMD_program_binary_Z400 47
#undef GL_AMD_query_buffer_object
#define GL_AMD_query_buffer_object 48
#undef GL_AMD_sample_positions
#define GL_AMD_sample_positions 49
#undef GL_AMD_seamless_cubemap_per_texture
#define GL_AMD_seamless_cubemap_per_texture 50
#undef GL_AMD_shader_atomic_counter_ops
#define GL_AMD_shader_atomic_counter_ops 51
#undef GL_AMD_shader_ballot
#define GL_AMD_shader_ballot 52
#undef GL_AMD_shader_gpu_shader_half_float_fetch
#define GL_AMD_shader_gpu_shader_half_float_fetch 53
#undef GL_AMD_shader_image_load_store_lod
#define GL_AMD_shader_image_load_store_lod 54
#undef GL_AMD_shader_stencil_export
#define GL_AMD_shader_stencil_export 55
#undef GL_AMD_shader_trinary_minmax
#define GL_AMD_shader_trinary_minmax 56
#undef GL_AMD_shader_explicit_vertex_parameter
#define GL_AMD_shader_explicit_vertex_parameter 57
#undef GL_AMD_sparse_texture
#define GL_AMD_sparse_texture 58
#undef GL_AMD_stencil_operation_extended
#define GL_AMD_stencil_operation_extended 59
#undef GL_AMD_texture_gather_bias_lod
#define GL_AMD_texture_gather_bias_lod 60
#undef GL_AMD_texture_texture4
#define GL_AMD_texture_texture4 61
#undef GL_AMD_transform_feedback3_lines_triangles
#define GL_AMD_transform_feedback3_lines_triangles 62
#undef GL_AMD_transform_feedback4
#define GL_AMD_transform_feedback4 63
#undef GL_AMD_vertex_shader_layer
#define GL_AMD_vertex_shader_layer 64
#undef GL_AMD_vertex_shader_tessellator
#define GL_AMD_vertex_shader_tessellator 65
#undef GL_AMD_vertex_shader_viewport_index
#define GL_AMD_vertex_shader_viewport_index 66
#undef GL_ANDROID_extension_pack_es31a
#define GL_ANDROID_extension_pack_es31a 67
#undef GL_ANGLE_depth_texture
#define GL_ANGLE_depth_texture 68
#undef GL_ANGLE_framebuffer_blit
#define GL_ANGLE_framebuffer_blit 69
#undef GL_ANGLE_framebuffer_multisample
#define GL_ANGLE_framebuffer_multisample 70
#undef GL_ANGLE_instanced_arrays
#define GL_ANGLE_instanced_arrays 71
#undef GL_ANGLE_pack_reverse_row_order
#define GL_ANGLE_pack_reverse_row_order 72
#undef GL_ANGLE_program_binary
#define GL_ANGLE_program_binary 73
#undef GL_ANGLE_texture_compression_dxt3
#define GL_ANGLE_texture_compression_dxt3 74
#undef GL_ANGLE_texture_compression_dxt5
#define GL_ANGLE_texture_compression_dxt5 75
#undef GL_ANGLE_texture_usage
#define GL_ANGLE_texture_usage 76
#undef GL_ANGLE_translated_shader_source
#define GL_ANGLE_translated_shader_source 77
#undef GL_APPLE_aux_depth_stencil
#define GL_APPLE_aux_depth_stencil 78
#undef GL_APPLE_client_storage
#define GL_APPLE_client_storage 79
#undef GL_APPLE_clip_distance
#define GL_APPLE_clip_distance 80
#undef GL_APPLE_color_buffer_packed_float
#define GL_APPLE_color_buffer_packed_float 81
#undef GL_APPLE_copy_texture_levels
#define GL_APPLE_copy_texture_levels 82
#undef GL_APPLE_element_array
#define GL_APPLE_element_array 83
#undef GL_APPLE_fence
#define GL_APPLE_fence 84
#undef GL_APPLE_float_pixels
#define GL_APPLE_float_pixels 85
#undef GL_APPLE_flush_buffer_range
#define GL_APPLE_flush_buffer_range 86
#undef GL_APPLE_framebuffer_multisample
#define GL_APPLE_framebuffer_multisample 87
#undef GL_APPLE_object_purgeable
#define GL_APPLE_object_purgeable 88
#undef GL_APPLE_rgb_422
#define GL_APPLE_rgb_422 89
#undef GL_APPLE_row_bytes
#define GL_APPLE_row_bytes 90
#undef GL_APPLE_specular_vector
#define GL_APPLE_specular_vector 91
#undef GL_APPLE_sync
#define GL_APPLE_sync 92
#undef GL_APPLE_texture_2D_limited_npot
#define GL_APPLE_texture_2D_limited_npot 93
#undef GL_APPLE_texture_format_BGRA8888
#define GL_APPLE_texture_format_BGRA8888 94
#undef GL_APPLE_texture_max_level
#define GL_APPLE_texture_max_level 95
#undef GL_APPLE_texture_packed_float
#define GL_APPLE_texture_packed_float 96
#undef GL_APPLE_texture_range
#define GL_APPLE_texture_range 97
#undef GL_APPLE_transform_hint
#define GL_APPLE_transform_hint 98
#undef GL_APPLE_vertex_array_object
#define GL_APPLE_vertex_array_object 99
#undef GL_APPLE_vertex_array_range
#define GL_APPLE_vertex_array_range 100
#undef GL_APPLE_vertex_program_evaluators
#define GL_APPLE_vertex_program_evaluators 101
#undef GL_APPLE_ycbcr_422
#define GL_APPLE_ycbcr_422 102
#undef GL_ARB_ES2_compatibility
#define GL_ARB_ES2_compatibility 103
#undef GL_ARB_ES3_1_compatibility
#define GL_ARB_ES3_1_compatibility 104
#undef GL_ARB_ES3_2_compatibility
#define GL_ARB_ES3_2_compatibility 105
#undef GL_ARB_ES3_compatibility
#define GL_ARB_ES3_compatibility 106
#undef GL_ARB_arrays_of_arrays
#define GL_ARB_arrays_of_arrays 107
#undef GL_ARB_base_instance
#define GL_ARB_base_instance 108
#undef GL_ARB_bindless_texture
#define GL_ARB_bindless_texture 109
#undef GL_ARB_blend_func_extended
#define GL_ARB_blend_func_extended 110
#undef GL_ARB_buffer_storage
#define GL_ARB_buffer_storage 111
#undef GL_ARB_cl_event
#define GL_ARB_cl_event 112
#undef GL_ARB_clear_buffer_object
#define GL_ARB_clear_buffer_object 113
#undef GL_ARB_clear_texture
#define GL_ARB_clear_texture 114
#undef GL_ARB_clip_control
#define GL_ARB_clip_control 115
#undef GL_ARB_color_buffer_float
#define GL_ARB_color_buffer_float 116
#undef GL_ARB_compatibility
#define GL_ARB_compatibility 117
#undef GL_ARB_compressed_texture_pixel_storage
#define GL_ARB_compressed_texture_pixel_storage 118
#undef GL_ARB_compute_shader
#define GL_ARB_compute_shader 119
#undef GL_ARB_compute_variable_group_size
#define GL_ARB_compute_variable_group_size 120
#undef GL_ARB_conditional_render_inverted
#define GL_ARB_conditional_render_inverted 121
#undef GL_ARB_conservative_depth
#define GL_ARB_conservative_depth 122
#undef GL_ARB_copy_buffer
#define GL_ARB_copy_buffer 123
#undef GL_ARB_copy_image
#define GL_ARB_copy_image 124
#undef GL_ARB_cull_distance
#define GL_ARB_cull_distance 125
#undef GL_ARB_debug_output
#define GL_ARB_debug_output 126
#undef GL_ARB_depth_buffer_float
#define GL_ARB_depth_buffer_float 127
#undef GL_ARB_depth_clamp
#define GL_ARB_depth_clamp 128
#undef GL_ARB_depth_texture
#define GL_ARB_depth_texture 129
#undef GL_ARB_derivative_control
#define GL_ARB_derivative_control 130
#undef GL_ARB_direct_state_access
#define GL_ARB_direct_state_access 131
#undef GL_ARB_draw_buffers
#define GL_ARB_draw_buffers 132
#undef GL_ARB_draw_buffers_blend
#define GL_ARB_draw_buffers_blend 133
#undef GL_ARB_draw_elements_base_vertex
#define GL_ARB_draw_elements_base_vertex 134
#undef GL_ARB_draw_indirect
#define GL_ARB_draw_indirect 135
#undef GL_ARB_draw_instanced
#define GL_ARB_draw_instanced 136
#undef GL_ARB_enhanced_layouts
#define GL_ARB_enhanced_layouts 137
#undef GL_ARB_explicit_attrib_location
#define GL_ARB_explicit_attrib_location 138
#undef GL_ARB_explicit_uniform_location
#define GL_ARB_explicit_uniform_location 139
#undef GL_ARB_fragment_coord_conventions
#define GL_ARB_fragment_coord_conventions 140
#undef GL_ARB_fragment_layer_viewport
#define GL_ARB_fragment_layer_viewport 141
#undef GL_ARB_fragment_program
#define GL_ARB_fragment_program 142
#undef GL_ARB_fragment_program_shadow
#define GL_ARB_fragment_program_shadow 143
#undef GL_ARB_fragment_shader
#define GL_ARB_fragment_shader 144
#undef GL_ARB_fragment_shader_interlock
#define GL_ARB_fragment_shader_interlock 145
#undef GL_ARB_framebuffer_no_attachments
#define GL_ARB_framebuffer_no_attachments 146
#undef GL_ARB_framebuffer_object
#define GL_ARB_framebuffer_object 147
#undef GL_ARB_framebuffer_sRGB
#define GL_ARB_framebuffer_sRGB 148
#undef GL_ARB_geometry_shader4
#define GL_ARB_geometry_shader4 149
#undef GL_ARB_get_program_binary
#define GL_ARB_get_program_binary 150
#undef GL_ARB_get_texture_sub_image
#define GL_ARB_get_texture_sub_image 151
#undef GL_ARB_gl_spirv
#define GL_ARB_gl_spirv 152
#undef GL_ARB_gpu_shader5
#define GL_ARB_gpu_shader5 153
#undef GL_ARB_gpu_shader_fp64
#define GL_ARB_gpu_shader_fp64 154
#undef GL_ARB_gpu_shader_int64
#define GL_ARB_gpu_shader_int64 155
#undef GL_ARB_half_float_pixel
#define GL_ARB_half_float_pixel 156
#undef GL_ARB_half_float_vertex
#define GL_ARB_half_float_vertex 157
#undef GL_ARB_imaging
#define GL_ARB_imaging 158
#undef GL_ARB_indirect_parameters
#define GL_ARB_indirect_parameters 159
#undef GL_ARB_instanced_arrays
#define GL_ARB_instanced_arrays 160
#undef GL_ARB_internalformat_query
#define GL_ARB_internalformat_query 161
#undef GL_ARB_internalformat_query2
#define GL_ARB_internalformat_query2 162
#undef GL_ARB_invalidate_subdata
#define GL_ARB_invalidate_subdata 163
#undef GL_ARB_map_buffer_alignment
#define GL_ARB_map_buffer_alignment 164
#undef GL_ARB_map_buffer_range
#define GL_ARB_map_buffer_range 165
#undef GL_ARB_matrix_palette
#define GL_ARB_matrix_palette 166
#undef GL_ARB_multi_bind
#define GL_ARB_multi_bind 167
#undef GL_ARB_multi_draw_indirect
#define GL_ARB_multi_draw_indirect 168
#undef GL_ARB_multisample
#define GL_ARB_multisample 169
#undef GL_ARB_multitexture
#define GL_ARB_multitexture 170
#undef GL_ARB_occlusion_query
#define GL_ARB_occlusion_query 171
#undef GL_ARB_occlusion_query2
#define GL_ARB_occlusion_query2 172
#undef GL_ARB_parallel_shader_compile
#define GL_ARB_parallel_shader_compile 173
#undef GL_ARB_pipeline_statistics_query
#define GL_ARB_pipeline_statistics_query 174
#undef GL_ARB_pixel_buffer_object
#define GL_ARB_pixel_buffer_object 175
#undef GL_ARB_point_parameters
#define GL_ARB_point_parameters 176
#undef GL_ARB_point_sprite
#define GL_ARB_point_sprite 177
#undef GL_ARB_polygon_offset_clamp
#define GL_ARB_polygon_offset_clamp 178
#undef GL_ARB_post_depth_coverage
#define GL_ARB_post_depth_coverage 179
#undef GL_ARB_program_interface_query
#define GL_ARB_program_interface_query 180
#undef GL_ARB_provoking_vertex
#define GL_ARB_provoking_vertex 181
#undef GL_ARB_query_buffer_object
#define GL_ARB_query_buffer_object 182
#undef GL_ARB_robust_buffer_access_behavior
#define GL_ARB_robust_buffer_access_behavior 183
#undef GL_ARB_robustness
#define GL_ARB_robustness 184
#undef GL_ARB_robustness_isolation
#define GL_ARB_robustness_isolation 185
#undef GL_ARB_sample_locations
#define GL_ARB_sample_locations 186
#undef GL_ARB_sample_shading
#define GL_ARB_sample_shading 187
#undef GL_ARB_sampler_objects
#define GL_ARB_sampler_objects 188
#undef GL_ARB_seamless_cube_map
#define GL_ARB_seamless_cube_map 189
#undef GL_ARB_seamless_cubemap_per_texture
#define GL_ARB_seamless_cubemap_per_texture 190
#undef GL_ARB_separate_shader_objects
#define GL_ARB_separate_shader_objects 191
#undef GL_ARB_shader_atomic_counter_ops
#define GL_ARB_shader_atomic_counter_ops 192
#undef GL_ARB_shader_atomic_counters
#define GL_ARB_shader_atomic_counters 193
#undef GL_ARB_shader_ballot
#define GL_ARB_shader_ballot 194
#undef GL_ARB_shader_bit_encoding
#define GL_ARB_shader_bit_encoding 195
#undef GL_ARB_shader_clock
#define GL_ARB_shader_clock 196
#undef GL_ARB_shader_draw_parameters
#define GL_ARB_shader_draw_parameters 197
#undef GL_ARB_shader_group_vote
#define GL_ARB_shader_group_vote 198
#undef GL_ARB_shader_image_load_store
#define GL_ARB_shader_image_load_store 199
#undef GL_ARB_shader_image_size
#define GL_ARB_shader_image_size 200
#undef GL_ARB_shader_objects
#define GL_ARB_shader_objects 201
#undef GL_ARB_shader_precision
#define GL_ARB_shader_precision 202
#undef GL_ARB_shader_stencil_export
#define GL_ARB_shader_stencil_export 203
#undef GL_ARB_shader_storage_buffer_object
#define GL_ARB_shader_storage_buffer_object 204
#undef GL_ARB_shader_subroutine
#define GL_ARB_shader_subroutine 205
#undef GL_ARB_shader_texture_image_samples
#define GL_ARB_shader_texture_image_samples 206
#undef GL_ARB_shader_texture_lod
#define GL_ARB_shader_texture_lod 207
#undef GL_ARB_shader_viewport_layer_array
#define GL_ARB_shader_viewport_layer_array 208
#undef GL_ARB_shading_language_100
#define GL_ARB_shading_language_100 209
#undef GL_ARB_shading_language_420pack
#define GL_ARB_shading_language_420pack 210
#undef GL_ARB_shading_language_include
#define GL_ARB_shading_language_include 211
#undef GL_ARB_shading_language_packing
#define GL_ARB_shading_language_packing 212
#undef GL_ARB_shadow
#define GL_ARB_shadow 213
#undef GL_ARB_shadow_ambient
#define GL_ARB_shadow_ambient 214
#undef GL_ARB_sparse_buffer
#define GL_ARB_sparse_buffer 215
#undef GL_ARB_sparse_texture
#define GL_ARB_sparse_texture 216
#undef GL_ARB_sparse_texture2
#define GL_ARB_sparse_texture2 217
#undef GL_ARB_sparse_texture_clamp
#define GL_ARB_sparse_texture_clamp 218
#undef GL_ARB_spirv_extensions
#define GL_ARB_spirv_extensions 219
#undef GL_ARB_stencil_texturing
#define GL_ARB_stencil_texturing 220
#undef GL_ARB_sync
#define GL_ARB_sync 221
#undef GL_ARB_tessellation_shader
#define GL_ARB_tessellation_shader 222
#undef GL_ARB_texture_barrier
#define GL_ARB_texture_barrier 223
#undef GL_ARB_texture_border_clamp
#define GL_ARB_texture_border_clamp 224
#undef GL_ARB_texture_buffer_object
#define GL_ARB_texture_buffer_object 225
#undef GL_ARB_texture_buffer_object_rgb32
#define GL_ARB_texture_buffer_object_rgb32 226
#undef GL_ARB_texture_buffer_range
#define GL_ARB_texture_buffer_range 227
#undef GL_ARB_texture_compression
#define GL_ARB_texture_compression 228
#undef GL_ARB_texture_compression_bptc
#define GL_ARB_texture_compression_bptc 229
#undef GL_ARB_texture_compression_rgtc
#define GL_ARB_texture_compression_rgtc 230
#undef GL_ARB_texture_cube_map
#define GL_ARB_texture_cube_map 231
#undef GL_ARB_texture_cube_map_array
#define GL_ARB_texture_cube_map_array 232
#undef GL_ARB_texture_env_add
#define GL_ARB_texture_env_add 233
#undef GL_ARB_texture_env_combine
#define GL_ARB_texture_env_combine 234
#undef GL_ARB_texture_env_crossbar
#define GL_ARB_texture_env_crossbar 235
#undef GL_ARB_texture_env_dot3
#define GL_ARB_texture_env_dot3 236
#undef GL_ARB_texture_filter_anisotropic
#define GL_ARB_texture_filter_anisotropic 237
#undef GL_ARB_texture_filter_minmax
#define GL_ARB_texture_filter_minmax 238
#undef GL_ARB_texture_float
#define GL_ARB_texture_float 239
#undef GL_ARB_texture_gather
#define GL_ARB_texture_gather 240
#undef GL_ARB_texture_mirror_clamp_to_edge
#define GL_ARB_texture_mirror_clamp_to_edge 241
#undef GL_ARB_texture_mirrored_repeat
#define GL_ARB_texture_mirrored_repeat 242
#undef GL_ARB_texture_multisample
#define GL_ARB_texture_multisample 243
#undef GL_ARB_texture_non_power_of_two
#define GL_ARB_texture_non_power_of_two 244
#undef GL_ARB_texture_query_levels
#define GL_ARB_texture_query_levels 245
#undef GL_ARB_texture_query_lod
#define GL_ARB_texture_query_lod 246
#undef GL_ARB_texture_rectangle
#define GL_ARB_texture_rectangle 247
#undef GL_ARB_texture_rg
#define GL_ARB_texture_rg 248
#undef GL_ARB_texture_rgb10_a2ui
#define GL_ARB_texture_rgb10_a2ui 249
#undef GL_ARB_texture_stencil8
#define GL_ARB_texture_stencil8 250
#undef GL_ARB_texture_storage
#define GL_ARB_texture_storage 251
#undef GL_ARB_texture_storage_multisample
#define GL_ARB_texture_storage_multisample 252
#undef GL_ARB_texture_swizzle
#define GL_ARB_texture_swizzle 253
#undef GL_ARB_texture_view
#define GL_ARB_texture_view 254
#undef GL_ARB_timer_query
#define GL_ARB_timer_query 255
#undef GL_ARB_transform_feedback2
#define GL_ARB_transform_feedback2 256
#undef GL_ARB_transform_feedback3
#define GL_ARB_transform_feedback3 257
#undef GL_ARB_transform_feedback_instanced
#define GL_ARB_transform_feedback_instanced 258
#undef GL_ARB_transform_feedback_overflow_query
#define GL_ARB_transform_feedback_overflow_query 259
#undef GL_ARB_transpose_matrix
#define GL_ARB_transpose_matrix 260
#undef GL_ARB_uniform_buffer_object
#define GL_ARB_uniform_buffer_object 261
#undef GL_ARB_vertex_array_bgra
#define GL_ARB_vertex_array_bgra 262
#undef GL_ARB_vertex_array_object
#define GL_ARB_vertex_array_object 263
#undef GL_ARB_vertex_attrib_64bit
#define GL_ARB_vertex_attrib_64bit 264
#undef GL_ARB_vertex_attrib_binding
#define GL_ARB_vertex_attrib_binding 265
#undef GL_ARB_vertex_blend
#define GL_ARB_vertex_blend 266
#undef GL_ARB_vertex_buffer_object
#define GL_ARB_vertex_buffer_object 267
#undef GL_ARB_vertex_program
#define GL_ARB_vertex_program 268
#undef GL_ARB_vertex_shader
#define GL_ARB_vertex_shader 269
#undef GL_ARB_vertex_type_10f_11f_11f_rev
#define GL_ARB_vertex_type_10f_11f_11f_rev 270
#undef GL_ARB_vertex_type_2_10_10_10_rev
#define GL_ARB_vertex_type_2_10_10_10_rev 271
#undef GL_ARB_viewport_array
#define GL_ARB_viewport_array 272
#undef GL_ARB_window_pos
#define GL_ARB_window_pos 273
#undef GL_ARM_mali_program_binary
#define GL_ARM_mali_program_binary 274
#undef GL_ARM_mali_shader_binary
#define GL_ARM_mali_shader_binary 275
#undef GL_ARM_rgba8
#define GL_ARM_rgba8 276
#undef GL_ARM_shader_framebuffer_fetch
#define GL_ARM_shader_framebuffer_fetch 277
#undef GL_ARM_shader_framebuffer_fetch_depth_stencil
#define GL_ARM_shader_framebuffer_fetch_depth_stencil 278
#undef GL_ATI_draw_buffers
#define GL_ATI_draw_buffers 279
#undef GL_ATI_element_array
#define GL_ATI_element_array 280
#undef GL_ATI_envmap_bumpmap
#define GL_ATI_envmap_bumpmap 281
#undef GL_ATI_fragment_shader
#define GL_ATI_fragment_shader 282
#undef GL_ATI_map_object_buffer
#define GL_ATI_map_object_buffer 283
#undef GL_ATI_meminfo
#define GL_ATI_meminfo 284
#undef GL_ATI_pixel_format_float
#define GL_ATI_pixel_format_float 285
#undef GL_ATI_pn_triangles
#define GL_ATI_pn_triangles 286
#undef GL_ATI_separate_stencil
#define GL_ATI_separate_stencil 287
#undef GL_ATI_text_fragment_shader
#define GL_ATI_text_fragment_shader 288
#undef GL_ATI_texture_env_combine3
#define GL_ATI_texture_env_combine3 289
#undef GL_ATI_texture_float
#define GL_ATI_texture_float 290
#undef GL_ATI_texture_mirror_once
#define GL_ATI_texture_mirror_once 291
#undef GL_ATI_vertex_array_object
#define GL_ATI_vertex_array_object 292
#undef GL_ATI_vertex_attrib_array_object
#define GL_ATI_vertex_attrib_array_object 293
#undef GL_ATI_vertex_streams
#define GL_ATI_vertex_streams 294
#undef GL_DMP_program_binary
#define GL_DMP_program_binary 295
#undef GL_DMP_shader_binary
#define GL_DMP_shader_binary 296
#undef GL_EXT_422_pixels
#define GL_EXT_422_pixels 297
#undef GL_EXT_EGL_image_array
#define GL_EXT_EGL_image_array 298
#undef GL_EXT_YUV_target
#define GL_EXT_YUV_target 299
#undef GL_EXT_abgr
#define GL_EXT_abgr 300
#undef GL_EXT_base_instance
#define GL_EXT_base_instance 301
#undef GL_EXT_bgra
#define GL_EXT_bgra 302
#undef GL_EXT_bindable_uniform
#define GL_EXT_bindable_uniform 303
#undef GL_EXT_blend_color
#define GL_EXT_blend_color 304
#undef GL_EXT_blend_equation_separate
#define GL_EXT_blend_equation_separate 305
#undef GL_EXT_blend_func_extended
#define GL_EXT_blend_func_extended 306
#undef GL_EXT_blend_func_separate
#define GL_EXT_blend_func_separate 307
#undef GL_EXT_blend_logic_op
#define GL_EXT_blend_logic_op 308
#undef GL_EXT_blend_minmax
#define GL_EXT_blend_minmax 309
#undef GL_EXT_blend_subtract
#define GL_EXT_blend_subtract 310
#undef GL_EXT_buffer_storage
#define GL_EXT_buffer_storage 311
#undef GL_EXT_clear_texture
#define GL_EXT_clear_texture 312
#undef GL_EXT_clip_control
#define GL_EXT_clip_control 313
#undef GL_EXT_clip_cull_distance
#define GL_EXT_clip_cull_distance 314
#undef GL_EXT_clip_volume_hint
#define GL_EXT_clip_volume_hint 315
#undef GL_EXT_cmyka
#define GL_EXT_cmyka 316
#undef GL_EXT_color_buffer_float
#define GL_EXT_color_buffer_float 317
#undef GL_EXT_color_buffer_half_float
#define GL_EXT_color_buffer_half_float 318
#undef GL_EXT_color_subtable
#define GL_EXT_color_subtable 319
#undef GL_EXT_compiled_vertex_array
#define GL_EXT_compiled_vertex_array 320
#undef GL_EXT_conservative_depth
#define GL_EXT_conservative_depth 321
#undef GL_EXT_convolution
#define GL_EXT_convolution 322
#undef GL_EXT_coordinate_frame
#define GL_EXT_coordinate_frame 323
#undef GL_EXT_copy_image
#define GL_EXT_copy_image 324
#undef GL_EXT_copy_texture
#define GL_EXT_copy_texture 325
#undef GL_EXT_cull_vertex
#define GL_EXT_cull_vertex 326
#undef GL_EXT_debug_label
#define GL_EXT_debug_label 327
#undef GL_EXT_debug_marker
#define GL_EXT_debug_marker 328
#undef GL_EXT_depth_bounds_test
#define GL_EXT_depth_bounds_test 329
#undef GL_EXT_direct_state_access
#define GL_EXT_direct_state_access 330
#undef GL_EXT_discard_framebuffer
#define GL_EXT_discard_framebuffer 331
#undef GL_EXT_disjoint_timer_query
#define GL_EXT_disjoint_timer_query 332
#undef GL_EXT_draw_buffers
#define GL_EXT_draw_buffers 333
#undef GL_EXT_draw_buffers2
#define GL_EXT_draw_buffers2 334
#undef GL_EXT_draw_buffers_indexed
#define GL_EXT_draw_buffers_indexed 335
#undef GL_EXT_draw_elements_base_vertex
#define GL_EXT_draw_elements_base_vertex 336
#undef GL_EXT_draw_instanced
#define GL_EXT_draw_instanced 337
#undef GL_EXT_draw_range_elements
#define GL_EXT_draw_range_elements 338
#undef GL_EXT_draw_transform_feedback
#define GL_EXT_draw_transform_feedback 339
#undef GL_EXT_external_buffer
#define GL_EXT_external_buffer 340
#undef GL_EXT_float_blend
#define GL_EXT_float_blend 341
#undef GL_EXT_fog_coord
#define GL_EXT_fog_coord 342
#undef GL_EXT_framebuffer_blit
#define GL_EXT_framebuffer_blit 343
#undef GL_EXT_framebuffer_multisample
#define GL_EXT_framebuffer_multisample 344
#undef GL_EXT_framebuffer_multisample_blit_scaled
#define GL_EXT_framebuffer_multisample_blit_scaled 345
#undef GL_EXT_framebuffer_object
#define GL_EXT_framebuffer_object 346
#undef GL_EXT_framebuffer_sRGB
#define GL_EXT_framebuffer_sRGB 347
#undef GL_EXT_geometry_point_size
#define GL_EXT_geometry_point_size 348
#undef GL_EXT_geometry_shader
#define GL_EXT_geometry_shader 349
#undef GL_EXT_geometry_shader4
#define GL_EXT_geometry_shader4 350
#undef GL_EXT_gpu_program_parameters
#define GL_EXT_gpu_program_parameters 351
#undef GL_EXT_gpu_shader4
#define GL_EXT_gpu_shader4 352
#undef GL_EXT_gpu_shader5
#define GL_EXT_gpu_shader5 353
#undef GL_EXT_histogram
#define GL_EXT_histogram 354
#undef GL_EXT_index_array_formats
#define GL_EXT_index_array_formats 355
#undef GL_EXT_index_func
#define GL_EXT_index_func 356
#undef GL_EXT_index_material
#define GL_EXT_index_material 357
#undef GL_EXT_index_texture
#define GL_EXT_index_texture 358
#undef GL_EXT_instanced_arrays
#define GL_EXT_instanced_arrays 359
#undef GL_EXT_light_texture
#define GL_EXT_light_texture 360
#undef GL_EXT_map_buffer_range
#define GL_EXT_map_buffer_range 361
#undef GL_EXT_memory_object
#define GL_EXT_memory_object 362
#undef GL_EXT_memory_object_fd
#define GL_EXT_memory_object_fd 363
#undef GL_EXT_memory_object_win32
#define GL_EXT_memory_object_win32 364
#undef GL_EXT_misc_attribute
#define GL_EXT_misc_attribute 365
#undef GL_EXT_multi_draw_arrays
#define GL_EXT_multi_draw_arrays 366
#undef GL_EXT_multi_draw_indirect
#define GL_EXT_multi_draw_indirect 367
#undef GL_EXT_multisample
#define GL_EXT_multisample 368
#undef GL_EXT_multisampled_compatibility
#define GL_EXT_multisampled_compatibility 369
#undef GL_EXT_multisampled_render_to_texture
#define GL_EXT_multisampled_render_to_texture 370
#undef GL_EXT_multiview_draw_buffers
#define GL_EXT_multiview_draw_buffers 371
#undef GL_EXT_occlusion_query_boolean
#define GL_EXT_occlusion_query_boolean 372
#undef GL_EXT_packed_depth_stencil
#define GL_EXT_packed_depth_stencil 373
#undef GL_EXT_packed_float
#define GL_EXT_packed_float 374
#undef GL_EXT_packed_pixels
#define GL_EXT_packed_pixels 375
#undef GL_EXT_paletted_texture
#define GL_EXT_paletted_texture 376
#undef GL_EXT_pixel_buffer_object
#define GL_EXT_pixel_buffer_object 377
#undef GL_EXT_pixel_transform
#define GL_EXT_pixel_transform 378
#undef GL_EXT_pixel_transform_color_table
#define GL_EXT_pixel_transform_color_table 379
#undef GL_EXT_point_parameters
#define GL_EXT_point_parameters 380
#undef GL_EXT_polygon_offset
#define GL_EXT_polygon_offset 381
#undef GL_EXT_polygon_offset_clamp
#define GL_EXT_polygon_offset_clamp 382
#undef GL_EXT_post_depth_coverage
#define GL_EXT_post_depth_coverage 383
#undef GL_EXT_primitive_bounding_box
#define GL_EXT_primitive_bounding_box 384
#undef GL_EXT_protected_textures
#define GL_EXT_protected_textures 385
#undef GL_EXT_provoking_vertex
#define GL_EXT_provoking_vertex 386
#undef GL_EXT_pvrtc_sRGB
#define GL_EXT_pvrtc_sRGB 387
#undef GL_EXT_raster_multisample
#define GL_EXT_raster_multisample 388
#undef GL_EXT_read_format_bgra
#define GL_EXT_read_format_bgra 389
#undef GL_EXT_render_snorm
#define GL_EXT_render_snorm 390
#undef GL_EXT_rescale_normal
#define GL_EXT_rescale_normal 391
#undef GL_EXT_robustness
#define GL_EXT_robustness 392
#undef GL_EXT_semaphore
#define GL_EXT_semaphore 393
#undef GL_EXT_semaphore_fd
#define GL_EXT_semaphore_fd 394
#undef GL_EXT_semaphore_win32
#define GL_EXT_semaphore_win32 395
#undef GL_EXT_sRGB
#define GL_EXT_sRGB 396
#undef GL_EXT_sRGB_write_control
#define GL_EXT_sRGB_write_control 397
#undef GL_EXT_secondary_color
#define GL_EXT_secondary_color 398
#undef GL_EXT_separate_shader_objects
#define GL_EXT_separate_shader_objects 399
#undef GL_EXT_separate_specular_color
#define GL_EXT_separate_specular_color 400
#undef GL_EXT_shader_framebuffer_fetch
#define GL_EXT_shader_framebuffer_fetch 401
#undef GL_EXT_shader_group_vote
#define GL_EXT_shader_group_vote 402
#undef GL_EXT_shader_image_load_formatted
#define GL_EXT_shader_image_load_formatted 403
#undef GL_EXT_shader_image_load_store
#define GL_EXT_shader_image_load_store 404
#undef GL_EXT_shader_implicit_conversions
#define GL_EXT_shader_implicit_conversions 405
#undef GL_EXT_shader_integer_mix
#define GL_EXT_shader_integer_mix 406
#undef GL_EXT_shader_io_blocks
#define GL_EXT_shader_io_blocks 407
#undef GL_EXT_shader_non_constant_global_initializers
#define GL_EXT_shader_non_constant_global_initializers 408
#undef GL_EXT_shader_pixel_local_storage
#define GL_EXT_shader_pixel_local_storage 409
#undef GL_EXT_shader_pixel_local_storage2
#define GL_EXT_shader_pixel_local_storage2 410
#undef GL_EXT_shader_texture_lod
#define GL_EXT_shader_texture_lod 411
#undef GL_EXT_shadow_funcs
#define GL_EXT_shadow_funcs 412
#undef GL_EXT_shadow_samplers
#define GL_EXT_shadow_samplers 413
#undef GL_EXT_shared_texture_palette
#define GL_EXT_shared_texture_palette 414
#undef GL_EXT_sparse_texture
#define GL_EXT_sparse_texture 415
#undef GL_EXT_sparse_texture2
#define GL_EXT_sparse_texture2 416
#undef GL_EXT_stencil_clear_tag
#define GL_EXT_stencil_clear_tag 417
#undef GL_EXT_stencil_two_side
#define GL_EXT_stencil_two_side 418
#undef GL_EXT_stencil_wrap
#define GL_EXT_stencil_wrap 419
#undef GL_EXT_subtexture
#define GL_EXT_subtexture 420
#undef GL_EXT_tessellation_point_size
#define GL_EXT_tessellation_point_size 421
#undef GL_EXT_tessellation_shader
#define GL_EXT_tessellation_shader 422
#undef GL_EXT_texture
#define GL_EXT_texture 423
#undef GL_EXT_texture3D
#define GL_EXT_texture3D 424
#undef GL_EXT_texture_array
#define GL_EXT_texture_array 425
#undef GL_EXT_texture_border_clamp
#define GL_EXT_texture_border_clamp 426
#undef GL_EXT_texture_buffer
#define GL_EXT_texture_buffer 427
#undef GL_EXT_texture_buffer_object
#define GL_EXT_texture_buffer_object 428
#undef GL_EXT_texture_compression_astc_decode_mode
#define GL_EXT_texture_compression_astc_decode_mode 429
#undef GL_EXT_texture_compression_bptc
#define GL_EXT_texture_compression_bptc 430
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 431
#undef GL_EXT_texture_compression_latc
#define GL_EXT_texture_compression_latc 432
#undef GL_EXT_texture_compression_rgtc
#define GL_EXT_texture_compression_rgtc 433
#undef GL_EXT_texture_compression_s3tc
#define GL_EXT_texture_compression_s3tc 434
#undef GL_EXT_texture_compression_s3tc_srgb
#define GL_EXT_texture_compression_s3tc_srgb 435
#undef GL_EXT_texture_cube_map
#define GL_EXT_texture_cube_map 436
#undef GL_EXT_texture_cube_map_array
#define GL_EXT_texture_cube_map_array 437
#undef GL_EXT_texture_env_add
#define GL_EXT_texture_env_add 438
#undef GL_EXT_texture_env_combine
#define GL_EXT_texture_env_combine 439
#undef GL_EXT_texture_env_dot3
#define GL_EXT_texture_env_dot3 440
#undef GL_EXT_texture_filter_anisotropic
#define GL_EXT_texture_filter_anisotropic 441
#undef GL_EXT_texture_filter_minmax
#define GL_EXT_texture_filter_minmax 442
#undef GL_EXT_texture_format_BGRA8888
#define GL_EXT_texture_format_BGRA8888 443
#undef GL_EXT_texture_integer
#define GL_EXT_texture_integer 444
#undef GL_EXT_texture_lod_bias
#define GL_EXT_texture_lod_bias 445
#undef GL_EXT_texture_mirror_clamp
#define GL_EXT_texture_mirror_clamp 446
#undef GL_EXT_texture_mirror_clamp_to_edge
#define GL_EXT_texture_mirror_clamp_to_edge 447
#undef GL_EXT_texture_norm16
#define GL_EXT_texture_norm16 448
#undef GL_EXT_texture_object
#define GL_EXT_texture_object 449
#undef GL_EXT_texture_perturb_normal
#define GL_EXT_texture_perturb_normal 450
#undef GL_EXT_texture_rg
#define GL_EXT_texture_rg 451
#undef GL_EXT_texture_sRGB
#define GL_EXT_texture_sRGB 452
#undef GL_EXT_texture_sRGB_R8
#define GL_EXT_texture_sRGB_R8 453
#undef GL_EXT_texture_sRGB_RG8
#define GL_EXT_texture_sRGB_RG8 454
#undef GL_EXT_texture_sRGB_decode
#define GL_EXT_texture_sRGB_decode 455
#undef GL_EXT_texture_shared_exponent
#define GL_EXT_texture_shared_exponent 456
#undef GL_EXT_texture_snorm
#define GL_EXT_texture_snorm 457
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 458
#undef GL_EXT_texture_swizzle
#define GL_EXT_texture_swizzle 459
#undef GL_EXT_texture_type_2_10_10_10_REV
#define GL_EXT_texture_type_2_10_10_10_REV 460
#undef GL_EXT_texture_view
#define GL_EXT_texture_view 461
#undef GL_EXT_timer_query
#define GL_EXT_timer_query 462
#undef GL_EXT_transform_feedback
#define GL_EXT_transform_feedback 463
#undef GL_EXT_unpack_subimage
#define GL_EXT_unpack_subimage 464
#undef GL_EXT_vertex_array
#define GL_EXT_vertex_array 465
#undef GL_EXT_vertex_array_bgra
#define GL_EXT_vertex_array_bgra 466
#undef GL_EXT_vertex_attrib_64bit
#define GL_EXT_vertex_attrib_64bit 467
#undef GL_EXT_vertex_shader
#define GL_EXT_vertex_shader 468
#undef GL_EXT_vertex_weighting
#define GL_EXT_vertex_weighting 469
#undef GL_EXT_win32_keyed_mutex
#define GL_EXT_win32_keyed_mutex 470
#undef GL_EXT_window_rectangles
#define GL_EXT_window_rectangles 471
#undef GL_EXT_x11_sync_object
#define GL_EXT_x11_sync_object 472
#undef GL_FJ_shader_binary_GCCSO
#define GL_FJ_shader_binary_GCCSO 473
#undef GL_GREMEDY_frame_terminator
#define GL_GREMEDY_frame_terminator 474
#undef GL_GREMEDY_string_marker
#define GL_GREMEDY_string_marker 475
#undef GL_HP_convolution_border_modes
#define GL_HP_convolution_border_modes 476
#undef GL_HP_image_transform
#define GL_HP_image_transform 477
#undef GL_HP_occlusion_test
#define GL_HP_occlusion_test 478
#undef GL_HP_texture_lighting
#define GL_HP_texture_lighting 479
#undef GL_IBM_cull_vertex
#define GL_IBM_cull_vertex 480
#undef GL_IBM_multimode_draw_arrays
#define GL_IBM_multimode_draw_arrays 481
#undef GL_IBM_rasterpos_clip
#define GL_IBM_rasterpos_clip 482
#undef GL_IBM_static_data
#define GL_IBM_static_data 483
#undef GL_IBM_texture_mirrored_repeat
#define GL_IBM_texture_mirrored_repeat 484
#undef GL_IBM_vertex_array_lists
#define GL_IBM_vertex_array_lists 485
#undef GL_IMG_bindless_texture
#define GL_IMG_bindless_texture 486
#undef GL_IMG_framebuffer_downsample
#define GL_IMG_framebuffer_downsample 487
#undef GL_IMG_multisampled_render_to_texture
#define GL_IMG_multisampled_render_to_texture 488
#undef GL_IMG_program_binary
#define GL_IMG_program_binary 489
#undef GL_IMG_read_format
#define GL_IMG_read_format 490
#undef GL_IMG_shader_binary
#define GL_IMG_shader_binary 491
#undef GL_IMG_texture_compression_pvrtc
#define GL_IMG_texture_compression_pvrtc 492
#undef GL_IMG_texture_compression_pvrtc2
#define GL_IMG_texture_compression_pvrtc2 493
#undef GL_IMG_texture_env_enhanced_fixed_function
#define GL_IMG_texture_env_enhanced_fixed_function 494
#undef GL_IMG_texture_filter_cubic
#define GL_IMG_texture_filter_cubic 495
#undef GL_IMG_user_clip_plane
#define GL_IMG_user_clip_plane 496
#undef GL_INGR_blend_func_separate
#define GL_INGR_blend_func_separate 497
#undef GL_INGR_color_clamp
#define GL_INGR_color_clamp 498
#undef GL_INGR_interlace_read
#define GL_INGR_interlace_read 499
#undef GL_INTEL_conservative_rasterization
#define GL_INTEL_conservative_rasterization 500
#undef GL_INTEL_fragment_shader_ordering
#define GL_INTEL_fragment_shader_ordering 501
#undef GL_INTEL_framebuffer_CMAA
#define GL_INTEL_framebuffer_CMAA 502
#undef GL_INTEL_map_texture
#define GL_INTEL_map_texture 503
#undef GL_INTEL_parallel_arrays
#define GL_INTEL_parallel_arrays 504
#undef GL_INTEL_performance_query
#define GL_INTEL_performance_query 505
#undef GL_KHR_blend_equation_advanced
#define GL_KHR_blend_equation_advanced 506
#undef GL_KHR_blend_equation_advanced_coherent
#define GL_KHR_blend_equation_advanced_coherent 507
#undef GL_KHR_context_flush_control
#define GL_KHR_context_flush_control 508
#undef GL_KHR_debug
#define GL_KHR_debug 509
#undef GL_KHR_no_error
#define GL_KHR_no_error 510
#undef GL_KHR_robust_buffer_access_behavior
#define GL_KHR_robust_buffer_access_behavior 511
#undef GL_KHR_robustness
#define GL_KHR_robustness 512
#undef GL_KHR_texture_compression_astc_hdr
#define GL_KHR_texture_compression_astc_hdr 513
#undef GL_KHR_texture_compression_astc_ldr
#define GL_KHR_texture_compression_astc_ldr 514
#undef GL_KHR_texture_compression_astc_sliced_3d
#define GL_KHR_texture_compression_astc_sliced_3d 515
#undef GL_KHR_parallel_shader_compile
#define GL_KHR_parallel_shader_compile 516
#undef GL_MESAX_texture_stack
#define GL_MESAX_texture_stack 517
#undef GL_MESA_pack_invert
#define GL_MESA_pack_invert 518
#undef GL_MESA_program_binary_formats
#define GL_MESA_program_binary_formats 519
#undef GL_MESA_resize_buffers
#define GL_MESA_resize_buffers 520
#undef GL_MESA_shader_integer_functions
#define GL_MESA_shader_integer_functions 521
#undef GL_MESA_tile_raster_order
#define GL_MESA_tile_raster_order 522
#undef GL_MESA_window_pos
#define GL_MESA_window_pos 523
#undef GL_MESA_ycbcr_texture
#define GL_MESA_ycbcr_texture 524
#undef GL_NVX_blend_equation_advanced_multi_draw_buffers
#define GL_NVX_blend_equation_advanced_multi_draw_buffers 525
#undef GL_NVX_cross_process_interop
#define GL_NVX_cross_process_interop 526
#undef GL_NVX_conditional_render
#define GL_NVX_conditional_render 527
#undef GL_NVX_gpu_memory_info
#define GL_NVX_gpu_memory_info 528
#undef GL_NVX_linked_gpu_multicast
#define GL_NVX_linked_gpu_multicast 529
#undef GL_NV_alpha_to_coverage_dither_control
#define GL_NV_alpha_to_coverage_dither_control 530
#undef GL_NV_bindless_multi_draw_indirect
#define GL_NV_bindless_multi_draw_indirect 531
#undef GL_NV_bindless_multi_draw_indirect_count
#define GL_NV_bindless_multi_draw_indirect_count 532
#undef GL_NV_bindless_texture
#define GL_NV_bindless_texture 533
#undef GL_NV_blend_equation_advanced
#define GL_NV_blend_equation_advanced 534
#undef GL_NV_blend_equation_advanced_coherent
#define GL_NV_blend_equation_advanced_coherent 535
#undef GL_NV_blend_minmax_factor
#define GL_NV_blend_minmax_factor 536
#undef GL_NV_blend_square
#define GL_NV_blend_square 537
#undef GL_NV_clip_space_w_scaling
#define GL_NV_clip_space_w_scaling 538
#undef GL_NV_command_list
#define GL_NV_command_list 539
#undef GL_NV_compute_program5
#define GL_NV_compute_program5 540
#undef GL_NV_conditional_render
#define GL_NV_conditional_render 541
#undef GL_NV_conservative_raster
#define GL_NV_conservative_raster 542
#undef GL_NV_conservative_raster_dilate
#define GL_NV_conservative_raster_dilate 543
#undef GL_NV_conservative_raster_pre_snap
#define GL_NV_conservative_raster_pre_snap 544
#undef GL_NV_conservative_raster_pre_snap_triangles
#define GL_NV_conservative_raster_pre_snap_triangles 545
#undef GL_NV_conservative_raster_underestimation
#define GL_NV_conservative_raster_underestimation 546
#undef GL_NV_copy_buffer
#define GL_NV_copy_buffer 547
#undef GL_NV_copy_depth_to_color
#define GL_NV_copy_depth_to_color 548
#undef GL_NV_copy_image
#define GL_NV_copy_image 549
#undef GL_NV_coverage_sample
#define GL_NV_coverage_sample 550
#undef GL_NV_deep_texture3D
#define GL_NV_deep_texture3D 551
#undef GL_NV_depth_buffer_float
#define GL_NV_depth_buffer_float 552
#undef GL_NV_depth_clamp
#define GL_NV_depth_clamp 553
#undef GL_NV_depth_nonlinear
#define GL_NV_depth_nonlinear 554
#undef GL_NV_draw_buffers
#define GL_NV_draw_buffers 555
#undef GL_NV_draw_instanced
#define GL_NV_draw_instanced 556
#undef GL_NV_draw_texture
#define GL_NV_draw_texture 557
#undef GL_NV_draw_vulkan_image
#define GL_NV_draw_vulkan_image 558
#undef GL_NV_evaluators
#define GL_NV_evaluators 559
#undef GL_NV_explicit_attrib_location
#define GL_NV_explicit_attrib_location 560
#undef GL_NV_explicit_multisample
#define GL_NV_explicit_multisample 561
#undef GL_NV_fbo_color_attachments
#define GL_NV_fbo_color_attachments 562
#undef GL_NV_fence
#define GL_NV_fence 563
#undef GL_NV_fill_rectangle
#define GL_NV_fill_rectangle 564
#undef GL_NV_float_buffer
#define GL_NV_float_buffer 565
#undef GL_NV_fog_distance
#define GL_NV_fog_distance 566
#undef GL_NV_fragment_coverage_to_color
#define GL_NV_fragment_coverage_to_color 567
#undef GL_NV_fragment_program
#define GL_NV_fragment_program 568
#undef GL_NV_fragment_program2
#define GL_NV_fragment_program2 569
#undef GL_NV_fragment_program4
#define GL_NV_fragment_program4 570
#undef GL_NV_fragment_program_option
#define GL_NV_fragment_program_option 571
#undef GL_NV_fragment_shader_interlock
#define GL_NV_fragment_shader_interlock 572
#undef GL_NV_framebuffer_blit
#define GL_NV_framebuffer_blit 573
#undef GL_NV_framebuffer_mixed_samples
#define GL_NV_framebuffer_mixed_samples 574
#undef GL_NV_framebuffer_multisample
#define GL_NV_framebuffer_multisample 575
#undef GL_NV_framebuffer_multisample_coverage
#define GL_NV_framebuffer_multisample_coverage 576
#undef GL_NV_generate_mipmap_sRGB
#define GL_NV_generate_mipmap_sRGB 577
#undef GL_NV_geometry_program4
#define GL_NV_geometry_program4 578
#undef GL_NV_geometry_shader4
#define GL_NV_geometry_shader4 579
#undef GL_NV_geometry_shader_passthrough
#define GL_NV_geometry_shader_passthrough 580
#undef GL_NV_gpu_program4
#define GL_NV_gpu_program4 581
#undef GL_NV_gpu_program5
#define GL_NV_gpu_program5 582
#undef GL_NV_gpu_program5_mem_extended
#define GL_NV_gpu_program5_mem_extended 583
#undef GL_NV_gpu_shader5
#define GL_NV_gpu_shader5 584
#undef GL_NV_half_float
#define GL_NV_half_float 585
#undef GL_NV_image_formats
#define GL_NV_image_formats 586
#undef GL_NV_instanced_arrays
#define GL_NV_instanced_arrays 587
#undef GL_NV_internalformat_sample_query
#define GL_NV_internalformat_sample_query 588
#undef GL_NV_light_max_exponent
#define GL_NV_light_max_exponent 589
#undef GL_NV_gpu_multicast
#define GL_NV_gpu_multicast 590
#undef GL_NV_multisample_coverage
#define GL_NV_multisample_coverage 591
#undef GL_NV_multisample_filter_hint
#define GL_NV_multisample_filter_hint 592
#undef GL_NV_non_square_matrices
#define GL_NV_non_square_matrices 593
#undef GL_NV_occlusion_query
#define GL_NV_occlusion_query 594
#undef GL_NV_packed_depth_stencil
#define GL_NV_packed_depth_stencil 595
#undef GL_NV_parameter_buffer_object
#define GL_NV_parameter_buffer_object 596
#undef GL_NV_parameter_buffer_object2
#define GL_NV_parameter_buffer_object2 597
#undef GL_NV_path_rendering
#define GL_NV_path_rendering 598
#undef GL_NV_path_rendering_shared_edge
#define GL_NV_path_rendering_shared_edge 599
#undef GL_NV_pixel_data_range
#define GL_NV_pixel_data_range 600
#undef GL_NV_pixel_buffer_object
#define GL_NV_pixel_buffer_object 601
#undef GL_NV_point_sprite
#define GL_NV_point_sprite 602
#undef GL_NV_polygon_mode
#define GL_NV_polygon_mode 603
#undef GL_NV_present_video
#define GL_NV_present_video 604
#undef GL_NV_primitive_restart
#define GL_NV_primitive_restart 605
#undef GL_NV_query_resource
#define GL_NV_query_resource 606
#undef GL_NV_query_resource_tag
#define GL_NV_query_resource_tag 607
#undef GL_NV_read_buffer
#define GL_NV_read_buffer 608
#undef GL_NV_read_buffer_front
#define GL_NV_read_buffer_front 609
#undef GL_NV_read_depth
#define GL_NV_read_depth 610
#undef GL_NV_read_depth_stencil
#define GL_NV_read_depth_stencil 611
#undef GL_NV_read_stencil
#define GL_NV_read_stencil 612
#undef GL_NV_register_combiners
#define GL_NV_register_combiners 613
#undef GL_NV_register_combiners2
#define GL_NV_register_combiners2 614
#undef GL_NV_robustness_video_memory_purge
#define GL_NV_robustness_video_memory_purge 615
#undef GL_NV_sRGB_formats
#define GL_NV_sRGB_formats 616
#undef GL_NV_sample_locations
#define GL_NV_sample_locations 617
#undef GL_NV_sample_mask_override_coverage
#define GL_NV_sample_mask_override_coverage 618
#undef GL_NV_shader_atomic_counters
#define GL_NV_shader_atomic_counters 619
#undef GL_NV_shader_atomic_float
#define GL_NV_shader_atomic_float 620
#undef GL_NV_shader_atomic_float64
#define GL_NV_shader_atomic_float64 621
#undef GL_NV_shader_atomic_fp16_vector
#define GL_NV_shader_atomic_fp16_vector 622
#undef GL_NV_shader_atomic_int64
#define GL_NV_shader_atomic_int64 623
#undef GL_NV_shader_buffer_load
#define GL_NV_shader_buffer_load 624
#undef GL_NV_shader_buffer_store
#define GL_NV_shader_buffer_store 625
#undef GL_NV_shader_noperspective_interpolation
#define GL_NV_shader_noperspective_interpolation 626
#undef GL_NV_shader_storage_buffer_object
#define GL_NV_shader_storage_buffer_object 627
#undef GL_NV_shader_thread_group
#define GL_NV_shader_thread_group 628
#undef GL_NV_shader_thread_shuffle
#define GL_NV_shader_thread_shuffle 629
#undef GL_NV_shadow_samplers_array
#define GL_NV_shadow_samplers_array 630
#undef GL_NV_shadow_samplers_cube
#define GL_NV_shadow_samplers_cube 631
#undef GL_NV_stereo_view_rendering
#define GL_NV_stereo_view_rendering 632
#undef GL_NV_tessellation_program5
#define GL_NV_tessellation_program5 633
#undef GL_NV_texgen_emboss
#define GL_NV_texgen_emboss 634
#undef GL_NV_texgen_reflection
#define GL_NV_texgen_reflection 635
#undef GL_NV_texture_barrier
#define GL_NV_texture_barrier 636
#undef GL_NV_texture_border_clamp
#define GL_NV_texture_border_clamp 637
#undef GL_NV_texture_compression_s3tc_update
#define GL_NV_texture_compression_s3tc_update 638
#undef GL_NV_texture_compression_vtc
#define GL_NV_texture_compression_vtc 639
#undef GL_NV_texture_env_combine4
#define GL_NV_texture_env_combine4 640
#undef GL_NV_texture_expand_normal
#define GL_NV_texture_expand_normal 641
#undef GL_NV_texture_multisample
#define GL_NV_texture_multisample 642
#undef GL_NV_texture_npot_2D_mipmap
#define GL_NV_texture_npot_2D_mipmap 643
#undef GL_NV_texture_rectangle
#define GL_NV_texture_rectangle 644
#undef GL_NV_texture_rectangle_compressed
#define GL_NV_texture_rectangle_compressed 645
#undef GL_NV_texture_shader
#define GL_NV_texture_shader 646
#undef GL_NV_texture_shader2
#define GL_NV_texture_shader2 647
#undef GL_NV_texture_shader3
#define GL_NV_texture_shader3 648
#undef GL_NV_transform_feedback
#define GL_NV_transform_feedback 649
#undef GL_NV_transform_feedback2
#define GL_NV_transform_feedback2 650
#undef GL_NV_uniform_buffer_unified_memory
#define GL_NV_uniform_buffer_unified_memory 651
#undef GL_NV_vdpau_interop
#define GL_NV_vdpau_interop 652
#undef GL_NV_vertex_array_range
#define GL_NV_vertex_array_range 653
#undef GL_NV_vertex_array_range2
#define GL_NV_vertex_array_range2 654
#undef GL_NV_vertex_attrib_integer_64bit
#define GL_NV_vertex_attrib_integer_64bit 655
#undef GL_NV_vertex_buffer_unified_memory
#define GL_NV_vertex_buffer_unified_memory 656
#undef GL_NV_vertex_program
#define GL_NV_vertex_program 657
#undef GL_NV_vertex_program1_1
#define GL_NV_vertex_program1_1 658
#undef GL_NV_vertex_program2
#define GL_NV_vertex_program2 659
#undef GL_NV_vertex_program2_option
#define GL_NV_vertex_program2_option 660
#undef GL_NV_vertex_program3
#define GL_NV_vertex_program3 661
#undef GL_NV_vertex_program4
#define GL_NV_vertex_program4 662
#undef GL_NV_video_capture
#define GL_NV_video_capture 663
#undef GL_NV_viewport_array
#define GL_NV_viewport_array 664
#undef GL_NV_viewport_array2
#define GL_NV_viewport_array2 665
#undef GL_NV_viewport_swizzle
#define GL_NV_viewport_swizzle 666
#undef GL_OES_EGL_image
#define GL_OES_EGL_image 667
#undef GL_OES_EGL_image_external
#define GL_OES_EGL_image_external 668
#undef GL_OES_EGL_image_external_essl3
#define GL_OES_EGL_image_external_essl3 669
#undef GL_OES_blend_equation_separate
#define GL_OES_blend_equation_separate 670
#undef GL_OES_blend_func_separate
#define GL_OES_blend_func_separate 671
#undef GL_OES_blend_subtract
#define GL_OES_blend_subtract 672
#undef GL_OES_byte_coordinates
#define GL_OES_byte_coordinates 673
#undef GL_OES_compressed_ETC1_RGB8_sub_texture
#define GL_OES_compressed_ETC1_RGB8_sub_texture 674
#undef GL_OES_compressed_ETC1_RGB8_texture
#define GL_OES_compressed_ETC1_RGB8_texture 675
#undef GL_OES_compressed_paletted_texture
#define GL_OES_compressed_paletted_texture 676
#undef GL_OES_copy_image
#define GL_OES_copy_image 677
#undef GL_OES_depth24
#define GL_OES_depth24 678
#undef GL_OES_depth32
#define GL_OES_depth32 679
#undef GL_OES_depth_texture
#define GL_OES_depth_texture 680
#undef GL_OES_draw_buffers_indexed
#define GL_OES_draw_buffers_indexed 681
#undef GL_OES_draw_elements_base_vertex
#define GL_OES_draw_elements_base_vertex 682
#undef GL_OES_draw_texture
#define GL_OES_draw_texture 683
#undef GL_OES_element_index_uint
#define GL_OES_element_index_uint 684
#undef GL_OES_extended_matrix_palette
#define GL_OES_extended_matrix_palette 685
#undef GL_OES_fbo_render_mipmap
#define GL_OES_fbo_render_mipmap 686
#undef GL_OES_fixed_point
#define GL_OES_fixed_point 687
#undef GL_OES_fragment_precision_high
#define GL_OES_fragment_precision_high 688
#undef GL_OES_framebuffer_object
#define GL_OES_framebuffer_object 689
#undef GL_OES_geometry_point_size
#define GL_OES_geometry_point_size 690
#undef GL_OES_geometry_shader
#define GL_OES_geometry_shader 691
#undef GL_OES_get_program_binary
#define GL_OES_get_program_binary 692
#undef GL_OES_gpu_shader5
#define GL_OES_gpu_shader5 693
#undef GL_OES_mapbuffer
#define GL_OES_mapbuffer 694
#undef GL_OES_matrix_get
#define GL_OES_matrix_get 695
#undef GL_OES_matrix_palette
#define GL_OES_matrix_palette 696
#undef GL_OES_packed_depth_stencil
#define GL_OES_packed_depth_stencil 697
#undef GL_OES_point_size_array
#define GL_OES_point_size_array 698
#undef GL_OES_point_sprite
#define GL_OES_point_sprite 699
#undef GL_OES_primitive_bounding_box
#define GL_OES_primitive_bounding_box 700
#undef GL_OES_query_matrix
#define GL_OES_query_matrix 701
#undef GL_OES_read_format
#define GL_OES_read_format 702
#undef GL_OES_required_internalformat
#define GL_OES_required_internalformat 703
#undef GL_OES_rgb8_rgba8
#define GL_OES_rgb8_rgba8 704
#undef GL_OES_sample_shading
#define GL_OES_sample_shading 705
#undef GL_OES_sample_variables
#define GL_OES_sample_variables 706
#undef GL_OES_shader_image_atomic
#define GL_OES_shader_image_atomic 707
#undef GL_OES_shader_io_blocks
#define GL_OES_shader_io_blocks 708
#undef GL_OES_shader_multisample_interpolation
#define GL_OES_shader_multisample_interpolation 709
#undef GL_OES_single_precision
#define GL_OES_single_precision 710
#undef GL_OES_standard_derivatives
#define GL_OES_standard_derivatives 711
#undef GL_OES_stencil1
#define GL_OES_stencil1 712
#undef GL_OES_stencil4
#define GL_OES_stencil4 713
#undef GL_OES_stencil8
#define GL_OES_stencil8 714
#undef GL_OES_stencil_wrap
#define GL_OES_stencil_wrap 715
#undef GL_OES_surfaceless_context
#define GL_OES_surfaceless_context 716
#undef GL_OES_tessellation_point_size
#define GL_OES_tessellation_point_size 717
#undef GL_OES_tessellation_shader
#define GL_OES_tessellation_shader 718
#undef GL_OES_texture_3D
#define GL_OES_texture_3D 719
#undef GL_OES_texture_border_clamp
#define GL_OES_texture_border_clamp 720
#undef GL_OES_texture_buffer
#define GL_OES_texture_buffer 721
#undef GL_OES_texture_compression_astc
#define GL_OES_texture_compression_astc 722
#undef GL_OES_texture_cube_map
#define GL_OES_texture_cube_map 723
#undef GL_OES_texture_cube_map_array
#define GL_OES_texture_cube_map_array 724
#undef GL_OES_texture_env_crossbar
#define GL_OES_texture_env_crossbar 725
#undef GL_OES_texture_float
#define GL_OES_texture_float 726
#undef GL_OES_texture_float_linear
#define GL_OES_texture_float_linear 727
#undef GL_OES_texture_half_float
#define GL_OES_texture_half_float 728
#undef GL_OES_texture_half_float_linear
#define GL_OES_texture_half_float_linear 729
#undef GL_OES_texture_mirrored_repeat
#define GL_OES_texture_mirrored_repeat 730
#undef GL_OES_texture_npot
#define GL_OES_texture_npot 731
#undef GL_OES_texture_stencil8
#define GL_OES_texture_stencil8 732
#undef GL_OES_texture_storage_multisample_2d_array
#define GL_OES_texture_storage_multisample_2d_array 733
#undef GL_OES_texture_view
#define GL_OES_texture_view 734
#undef GL_OES_vertex_array_object
#define GL_OES_vertex_array_object 735
#undef GL_OES_vertex_half_float
#define GL_OES_vertex_half_float 736
#undef GL_OES_vertex_type_10_10_10_2
#define GL_OES_vertex_type_10_10_10_2 737
#undef GL_OES_viewport_array
#define GL_OES_viewport_array 738
#undef GL_OML_interlace
#define GL_OML_interlace 739
#undef GL_OML_resample
#define GL_OML_resample 740
#undef GL_OML_subsample
#define GL_OML_subsample 741
#undef GL_OVR_multiview
#define GL_OVR_multiview 742
#undef GL_OVR_multiview2
#define GL_OVR_multiview2 743
#undef GL_OVR_multiview_multisampled_render_to_texture
#define GL_OVR_multiview_multisampled_render_to_texture 744
#undef GL_PGI_misc_hints
#define GL_PGI_misc_hints 745
#undef GL_PGI_vertex_hints
#define GL_PGI_vertex_hints 746
#undef GL_QCOM_alpha_test
#define GL_QCOM_alpha_test 747
#undef GL_QCOM_binning_control
#define GL_QCOM_binning_control 748
#undef GL_QCOM_driver_control
#define GL_QCOM_driver_control 749
#undef GL_QCOM_extended_get
#define GL_QCOM_extended_get 750
#undef GL_QCOM_extended_get2
#define GL_QCOM_extended_get2 751
#undef GL_QCOM_framebuffer_foveated
#define GL_QCOM_framebuffer_foveated 752
#undef GL_QCOM_texture_foveated
#define GL_QCOM_texture_foveated 753
#undef GL_QCOM_perfmon_global_mode
#define GL_QCOM_perfmon_global_mode 754
#undef GL_QCOM_shader_framebuffer_fetch_noncoherent
#define GL_QCOM_shader_framebuffer_fetch_noncoherent 755
#undef GL_QCOM_tiled_rendering
#define GL_QCOM_tiled_rendering 756
#undef GL_QCOM_writeonly_rendering
#define GL_QCOM_writeonly_rendering 757
#undef GL_REND_screen_coordinates
#define GL_REND_screen_coordinates 758
#undef GL_S3_s3tc
#define GL_S3_s3tc 759
#undef GL_SGIS_detail_texture
#define GL_SGIS_detail_texture 760
#undef GL_SGIS_fog_function
#define GL_SGIS_fog_function 761
#undef GL_SGIS_generate_mipmap
#define GL_SGIS_generate_mipmap 762
#undef GL_SGIS_multisample
#define GL_SGIS_multisample 763
#undef GL_SGIS_pixel_texture
#define GL_SGIS_pixel_texture 764
#undef GL_SGIS_point_line_texgen
#define GL_SGIS_point_line_texgen 765
#undef GL_SGIS_point_parameters
#define GL_SGIS_point_parameters 766
#undef GL_SGIS_sharpen_texture
#define GL_SGIS_sharpen_texture 767
#undef GL_SGIS_texture4D
#define GL_SGIS_texture4D 768
#undef GL_SGIS_texture_border_clamp
#define GL_SGIS_texture_border_clamp 769
#undef GL_SGIS_texture_color_mask
#define GL_SGIS_texture_color_mask 770
#undef GL_SGIS_texture_edge_clamp
#define GL_SGIS_texture_edge_clamp 771
#undef GL_SGIS_texture_filter4
#define GL_SGIS_texture_filter4 772
#undef GL_SGIS_texture_lod
#define GL_SGIS_texture_lod 773
#undef GL_SGIS_texture_select
#define GL_SGIS_texture_select 774
#undef GL_SGIX_async
#define GL_SGIX_async 775
#undef GL_SGIX_async_histogram
#define GL_SGIX_async_histogram 776
#undef GL_SGIX_async_pixel
#define GL_SGIX_async_pixel 777
#undef GL_SGIX_blend_alpha_minmax
#define GL_SGIX_blend_alpha_minmax 778
#undef GL_SGIX_calligraphic_fragment
#define GL_SGIX_calligraphic_fragment 779
#undef GL_SGIX_clipmap
#define GL_SGIX_clipmap 780
#undef GL_SGIX_convolution_accuracy
#define GL_SGIX_convolution_accuracy 781
#undef GL_SGIX_depth_pass_instrument
#define GL_SGIX_depth_pass_instrument 782
#undef GL_SGIX_depth_texture
#define GL_SGIX_depth_texture 783
#undef GL_SGIX_flush_raster
#define GL_SGIX_flush_raster 784
#undef GL_SGIX_fog_offset
#define GL_SGIX_fog_offset 785
#undef GL_SGIX_fragment_lighting
#define GL_SGIX_fragment_lighting 786
#undef GL_SGIX_framezoom
#define GL_SGIX_framezoom 787
#undef GL_SGIX_igloo_interface
#define GL_SGIX_igloo_interface 788
#undef GL_SGIX_instruments
#define GL_SGIX_instruments 789
#undef GL_SGIX_interlace
#define GL_SGIX_interlace 790
#undef GL_SGIX_ir_instrument1
#define GL_SGIX_ir_instrument1 791
#undef GL_SGIX_list_priority
#define GL_SGIX_list_priority 792
#undef GL_SGIX_pixel_texture
#define GL_SGIX_pixel_texture 793
#undef GL_SGIX_pixel_tiles
#define GL_SGIX_pixel_tiles 794
#undef GL_SGIX_polynomial_ffd
#define GL_SGIX_polynomial_ffd 795
#undef GL_SGIX_reference_plane
#define GL_SGIX_reference_plane 796
#undef GL_SGIX_resample
#define GL_SGIX_resample 797
#undef GL_SGIX_scalebias_hint
#define GL_SGIX_scalebias_hint 798
#undef GL_SGIX_shadow
#define GL_SGIX_shadow 799
#undef GL_SGIX_shadow_ambient
#define GL_SGIX_shadow_ambient 800
#undef GL_SGIX_sprite
#define GL_SGIX_sprite 801
#undef GL_SGIX_subsample
#define GL_SGIX_subsample 802
#undef GL_SGIX_tag_sample_buffer
#define GL_SGIX_tag_sample_buffer 803
#undef GL_SGIX_texture_add_env
#define GL_SGIX_texture_add_env 804
#undef GL_SGIX_texture_coordinate_clamp
#define GL_SGIX_texture_coordinate_clamp 805
#undef GL_SGIX_texture_lod_bias
#define GL_SGIX_texture_lod_bias 806
#undef GL_SGIX_texture_multi_buffer
#define GL_SGIX_texture_multi_buffer 807
#undef GL_SGIX_texture_scale_bias
#define GL_SGIX_texture_scale_bias 808
#undef GL_SGIX_vertex_preclip
#define GL_SGIX_vertex_preclip 809
#undef GL_SGIX_ycrcb
#define GL_SGIX_ycrcb 810
#undef GL_SGIX_ycrcb_subsample
#define GL_SGIX_ycrcb_subsample 811
#undef GL_SGIX_ycrcba
#define GL_SGIX_ycrcba 812
#undef GL_SGI_color_matrix
#define GL_SGI_color_matrix 813
#undef GL_SGI_color_table
#define GL_SGI_color_table 814
#undef GL_SGI_texture_color_table
#define GL_SGI_texture_color_table 815
#undef GL_SUNX_constant_data
#define GL_SUNX_constant_data 816
#undef GL_SUN_convolution_border_modes
#define GL_SUN_convolution_border_modes 817
#undef GL_SUN_global_alpha
#define GL_SUN_global_alpha 818
#undef GL_SUN_mesh_array
#define GL_SUN_mesh_array 819
#undef GL_SUN_slice_accum
#define GL_SUN_slice_accum 820
#undef GL_SUN_triangle_list
#define GL_SUN_triangle_list 821
#undef GL_SUN_vertex
#define GL_SUN_vertex 822
#undef GL_VIV_shader_binary
#define GL_VIV_shader_binary 823
#undef GL_WIN_phong_shading
#define GL_WIN_phong_shading 824
#undef GL_WIN_specular_fog
#define GL_WIN_specular_fog 825
#undef GL_EXT_Cg_shader
#define GL_EXT_Cg_shader 826
#undef GL_EXTX_framebuffer_mixed_formats
#define GL_EXTX_framebuffer_mixed_formats 827
#undef GL_EXT_texture_compression_dxt1
#define GL_EXT_texture_compression_dxt1 828
#undef GL_EXT_texture_edge_clamp
#define GL_EXT_texture_edge_clamp 829
#undef GL_EXT_texture_storage
#define GL_EXT_texture_storage 830
#undef GL_EXT_import_sync_object
#define GL_EXT_import_sync_object 831
#undef GL_KTX_buffer_region
#define GL_KTX_buffer_region 832
#undef GL_NV_ES1_1_compatibility
#define GL_NV_ES1_1_compatibility 833
#undef GL_NV_ES3_1_compatibility
#define GL_NV_ES3_1_compatibility 834
#undef GL_EXT_texture_lod
#define GL_EXT_texture_lod 835

#ifdef __cplusplus
extern "C" {
#endif

/*!
 * generic PhaserGL Procedure signature
 */
typedef void(KHRONOS_APIENTRY*PhaserGLProc)(void);

/*!
 * PhaserGetProcAddress signature.
 */
typedef PhaserGLProc (*PhaserGLGetProcAddressFunc)(const char *);

/*!
 * PhaserGetProcAddress function pointer used to wrangle all the GL and
 * GLES functions and extensions. Automatically points the a default
 * implementation, and can be overriden by the user if they need something
 * specific. Make sure that it is set before calling phaserGLInit()
 */
extern PhaserGLGetProcAddressFunc phaserGLGetProcAddress;


/*!
 * User is required to call this function as soon as the GL context has been created.
 * Failing to calling this function will result in a crash.
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
khronos_int8_t phaserGLInit(void);

/*!
 * User should call this function as soon as the GL context is destroyed. It is not
 * mandatory, but is highly recommended. User can also opt to create anew GL context
 * and call phaserGLInit() instead.
 */
void phaserGLShutdown(void);

/*!
 * Utility to check if a specific OpenGL or OpenGL ES function or extension is supported and available.
 *
 * Usage example:
 *
 * \code
 * if(phaserGLSupport(GL_VERSION_3_0) || phaserGLSupport(GL_ES_VERSION_3_0))
 * {
 *     void *pMapped = glMapBufferRange(target, 0, buffer.size(), GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *        glUnmapBuffer(target);
 * }
 * else if (phaserGLSupport(GL_EXT_map_buffer_range) && phaserGLSupport(GL_OES_mapbuffer)
 * {
 *     void *pMapped = glMapBufferRangeEXT(target, 0, buffer.size(), GL_MAP_WRITE_BIT_EXT | GL_MAP_INVALIDATE_BUFFER_BIT_EXT);
 *     std::copy(buffer.begin(), buffer.end(), pMapped);
 *     glUnmapBufferOES(target);
 * }
 * else
 * {
 *     glBufferData(target, buffer.size(), reinterpret_cast<const GLvoid *>(&buffer[0]), usage);
 * }
 * \endcode
 *
 * \return returns KHRONOS_TRUE if successful, KHRONOS_FALSE otherwise.
 */
PHASER_FORCE_INLINE khronos_int8_t phaserGLSupport(khronos_usize_t extensionID);

/*!
     Checks if a specific OpenGL or OpenGL ES command triggered an error.

     Usage example:

     \code
         // Only checks if compiled in debug.
         phaserGLCheckErrorDebug(glBindBuffer(handle));

         // checks for both debug and release.
         phaserGLCheckError(glBufferData(target, bufferSize, (const GLvoid *)pBuffer, GL_STATIC_DRAW));
     \endcode

     \note phaserGLCheckErrorDebug is disabled when the application is compiled for a release build.
     \warning calling glGetError can affect your rendering performance. We recommend
     using phaserGLCheckErrorDebug instead of phaserGLCheckError so that the production
     build won't be impacted. If you want to use phaserGLCheckError, make sure it is not called
     during time critical code path.
 */
void _phaserGLCheckError(const char* fileName, int lineNumber);
#if !defined(phaserGLCheckError)
    #define phaserGLCheckError(x) x; _phaserGLCheckError(__FILE__, __LINE__)
#endif
#if !defined(phaserGLCheckErrorDebug)
    #if !defined(NDEBUG)
        #define phaserGLCheckErrorDebug(x) x; _phaserGLCheckError(__FILE__, __LINE__)
    #else
        #define phaserGLCheckErrorDebug(x) x
    #endif
#endif

/* Type definitions */
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef khronos_uint32_t GLhandleARB;
#endif
typedef khronos_uint32_t GLenum;
typedef khronos_uint8_t GLboolean;
typedef khronos_uint32_t GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_int16_t GLshort;
typedef khronos_int32_t GLint;
typedef khronos_int32_t GLclampx;
typedef khronos_uint8_t GLubyte;
typedef khronos_uint16_t GLushort;
typedef khronos_uint32_t GLuint;
typedef khronos_int32_t GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_uint16_t GLhalf;
typedef khronos_int32_t GLfixed;
typedef khronos_intptr_t GLintptr;
typedef khronos_ssize_t GLsizeiptr;
typedef khronos_int64_t GLint64;
typedef khronos_uint64_t GLuint64;
typedef khronos_intptr_t GLintptrARB;
typedef khronos_intptr_t GLsizeiptrARB;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (KHRONOS_APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (KHRONOS_APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef khronos_uint16_t GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void (KHRONOS_APIENTRY *GLVULKANPROCNV)(void);


typedef struct PhaserGLConfig
{
    khronos_int8_t support[836];

    void (KHRONOS_APIENTRY *Accum)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *AccumxOES)(GLenum, GLfixed);
    GLboolean(KHRONOS_APIENTRY *AcquireKeyedMutexWin32EXT)(GLuint, GLuint64, GLuint);
    void (KHRONOS_APIENTRY *ActiveProgramEXT)(GLuint);
    void (KHRONOS_APIENTRY *ActiveShaderProgram)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *ActiveShaderProgramEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *ActiveStencilFaceEXT)(GLenum);
    void (KHRONOS_APIENTRY *ActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY *ActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY *ActiveVaryingNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *AlphaFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AlphaFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AlphaFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AlphaFunc)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *AlphaFuncQCOM)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY *AlphaFuncx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *AlphaFuncxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *AlphaToCoverageDitherControlNV)(GLenum);
    void (KHRONOS_APIENTRY *ApplyFramebufferAttachmentCMAAINTEL)(void);
    void (KHRONOS_APIENTRY *ApplyTextureEXT)(GLenum);
    GLboolean(KHRONOS_APIENTRY *AreProgramsResidentNV)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY *AreTexturesResident)(GLsizei, const GLuint *, GLboolean *);
    GLboolean(KHRONOS_APIENTRY *AreTexturesResidentEXT)(GLsizei, const GLuint *, GLboolean *);
    void (KHRONOS_APIENTRY *ArrayElement)(GLint);
    void (KHRONOS_APIENTRY *ArrayElementEXT)(GLint);
    void (KHRONOS_APIENTRY *ArrayObjectATI)(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY *AsyncMarkerSGIX)(GLuint);
    void (KHRONOS_APIENTRY *AttachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY *AttachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *Begin)(GLenum);
    void (KHRONOS_APIENTRY *BeginConditionalRender)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BeginConditionalRenderNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BeginConditionalRenderNVX)(GLuint);
    void (KHRONOS_APIENTRY *BeginFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY *BeginOcclusionQueryNV)(GLuint);
    void (KHRONOS_APIENTRY *BeginPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY *BeginPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY *BeginQuery)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BeginQueryARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BeginQueryEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BeginQueryIndexed)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BeginTransformFeedback)(GLenum);
    void (KHRONOS_APIENTRY *BeginTransformFeedbackEXT)(GLenum);
    void (KHRONOS_APIENTRY *BeginTransformFeedbackNV)(GLenum);
    void (KHRONOS_APIENTRY *BeginVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY *BeginVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY *BindAttribLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *);
    void (KHRONOS_APIENTRY *BindBuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindBufferARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindBufferBase)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindBufferBaseEXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindBufferBaseNV)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindBufferOffsetEXT)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY *BindBufferOffsetNV)(GLenum, GLuint, GLuint, GLintptr);
    void (KHRONOS_APIENTRY *BindBufferRange)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *BindBufferRangeEXT)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *BindBufferRangeNV)(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *BindBuffersBase)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *BindBuffersRange)(GLenum, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizeiptr *);
    void (KHRONOS_APIENTRY *BindFragDataLocation)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragDataLocationEXT)(GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragDataLocationIndexed)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragDataLocationIndexedEXT)(GLuint, GLuint, GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *BindFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY *BindFramebuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindFramebufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindFramebufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindImageTexture)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindImageTextureEXT)(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint);
    void (KHRONOS_APIENTRY *BindImageTextures)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY *BindLightParameterEXT)(GLenum, GLenum);
    GLuint(KHRONOS_APIENTRY *BindMaterialParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindMultiTextureEXT)(GLenum, GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY *BindParameterEXT)(GLenum);
    void (KHRONOS_APIENTRY *BindProgramARB)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindProgramNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY *BindProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY *BindRenderbuffer)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindRenderbufferEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindRenderbufferOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindSampler)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *BindSamplers)(GLuint, GLsizei, const GLuint *);
    GLuint(KHRONOS_APIENTRY *BindTexGenParameterEXT)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindTexture)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindTextureEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindTextureUnit)(GLuint, GLuint);
    GLuint(KHRONOS_APIENTRY *BindTextureUnitParameterEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BindTextures)(GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *BindTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *BindVertexArray)(GLuint);
    void (KHRONOS_APIENTRY *BindVertexArrayAPPLE)(GLuint);
    void (KHRONOS_APIENTRY *BindVertexArrayOES)(GLuint);
    void (KHRONOS_APIENTRY *BindVertexBuffer)(GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY *BindVertexBuffers)(GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY *BindVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY *BindVideoCaptureStreamBufferNV)(GLuint, GLuint, GLenum, GLintptrARB);
    void (KHRONOS_APIENTRY *BindVideoCaptureStreamTextureNV)(GLuint, GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *Binormal3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Binormal3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY *Binormal3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Binormal3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *Binormal3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Binormal3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *Binormal3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Binormal3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY *Binormal3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Binormal3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY *BinormalPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *Bitmap)(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *);
    void (KHRONOS_APIENTRY *BitmapxOES)(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, const GLubyte *);
    void (KHRONOS_APIENTRY *BlendBarrier)(void);
    void (KHRONOS_APIENTRY *BlendBarrierKHR)(void);
    void (KHRONOS_APIENTRY *BlendBarrierNV)(void);
    void (KHRONOS_APIENTRY *BlendColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *BlendColorEXT)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *BlendColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *BlendEquation)(GLenum);
    void (KHRONOS_APIENTRY *BlendEquationEXT)(GLenum);
    void (KHRONOS_APIENTRY *BlendEquationIndexedAMD)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationOES)(GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparate)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateOES)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparatei)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateiARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateiEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationSeparateiOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationi)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationiARB)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationiEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendEquationiOES)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *BlendFunc)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncIndexedAMD)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateINGR)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateIndexedAMD)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateOES)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparatei)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateiARB)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateiEXT)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFuncSeparateiOES)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunci)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunciARB)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunciEXT)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendFunciOES)(GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *BlendParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *BlitFramebuffer)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitFramebufferANGLE)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitFramebufferEXT)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitFramebufferNV)(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BlitNamedFramebuffer)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *BufferAddressRangeNV)(GLenum, GLuint, GLuint64EXT, GLsizeiptr);
    void (KHRONOS_APIENTRY *BufferData)(GLenum, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY *BufferDataARB)(GLenum, GLsizeiptrARB, const void *, GLenum);
    void (KHRONOS_APIENTRY *BufferPageCommitmentARB)(GLenum, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY *BufferParameteriAPPLE)(GLenum, GLenum, GLint);
    GLuint(KHRONOS_APIENTRY *BufferRegionEnabled)(void);
    void (KHRONOS_APIENTRY *BufferStorage)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *BufferStorageEXT)(GLenum, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *BufferStorageExternalEXT)(GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY *BufferStorageMemEXT)(GLenum, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *BufferSubData)(GLenum, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *BufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, const void *);
    void (KHRONOS_APIENTRY *CallCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY *CallList)(GLuint);
    void (KHRONOS_APIENTRY *CallLists)(GLsizei, GLenum, const void *);
    GLenum(KHRONOS_APIENTRY *CheckFramebufferStatus)(GLenum);
    GLenum(KHRONOS_APIENTRY *CheckFramebufferStatusEXT)(GLenum);
    GLenum(KHRONOS_APIENTRY *CheckFramebufferStatusOES)(GLenum);
    GLenum(KHRONOS_APIENTRY *CheckNamedFramebufferStatus)(GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY *CheckNamedFramebufferStatusEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *ClampColor)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ClampColorARB)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *Clear)(GLbitfield);
    void (KHRONOS_APIENTRY *ClearAccum)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ClearAccumxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ClearBufferData)(GLenum, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearBufferSubData)(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearBufferfi)(GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY *ClearBufferfv)(GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *ClearBufferiv)(GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY *ClearBufferuiv)(GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY *ClearColor)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ClearColorIiEXT)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ClearColorIuiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ClearColorx)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ClearColorxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ClearDepth)(GLdouble);
    void (KHRONOS_APIENTRY *ClearDepthdNV)(GLdouble);
    void (KHRONOS_APIENTRY *ClearDepthf)(GLfloat);
    void (KHRONOS_APIENTRY *ClearDepthfOES)(GLclampf);
    void (KHRONOS_APIENTRY *ClearDepthx)(GLfixed);
    void (KHRONOS_APIENTRY *ClearDepthxOES)(GLfixed);
    void (KHRONOS_APIENTRY *ClearIndex)(GLfloat);
    void (KHRONOS_APIENTRY *ClearNamedBufferData)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedBufferDataEXT)(GLuint, GLenum, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedBufferSubData)(GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedBufferSubDataEXT)(GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferfi)(GLuint, GLenum, GLint, GLfloat, GLint);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferfv)(GLuint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferiv)(GLuint, GLenum, GLint, const GLint *);
    void (KHRONOS_APIENTRY *ClearNamedFramebufferuiv)(GLuint, GLenum, GLint, const GLuint *);
    void (KHRONOS_APIENTRY *ClearPixelLocalStorageuiEXT)(GLsizei, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ClearStencil)(GLint);
    void (KHRONOS_APIENTRY *ClearTexImage)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearTexImageEXT)(GLuint, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClearTexSubImageEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ClientActiveTexture)(GLenum);
    void (KHRONOS_APIENTRY *ClientActiveTextureARB)(GLenum);
    void (KHRONOS_APIENTRY *ClientActiveVertexStreamATI)(GLenum);
    void (KHRONOS_APIENTRY *ClientAttribDefaultEXT)(GLbitfield);
    GLenum(KHRONOS_APIENTRY *ClientWaitSync)(GLsync, GLbitfield, GLuint64);
    GLenum(KHRONOS_APIENTRY *ClientWaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY *ClipControl)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ClipControlEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ClipPlane)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *ClipPlanef)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ClipPlanefIMG)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ClipPlanefOES)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ClipPlanex)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *ClipPlanexIMG)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *ClipPlanexOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *Color3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Color3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *Color3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Color3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Color3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Color3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Color3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Color3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Color3iv)(const GLint *);
    void (KHRONOS_APIENTRY *Color3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Color3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Color3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *Color3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *Color3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Color3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY *Color3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *Color3usv)(const GLushort *);
    void (KHRONOS_APIENTRY *Color3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Color3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *Color4b)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Color4bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *Color4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Color4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Color4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Color4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Color4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Color4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Color4iv)(const GLint *);
    void (KHRONOS_APIENTRY *Color4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Color4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Color4ub)(GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *Color4ubVertex2fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4ubVertex2fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color4ubVertex3fSUN)(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Color4ubVertex3fvSUN)(const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *Color4ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *Color4ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Color4uiv)(const GLuint *);
    void (KHRONOS_APIENTRY *Color4us)(GLushort, GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *Color4usv)(const GLushort *);
    void (KHRONOS_APIENTRY *Color4x)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Color4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Color4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *ColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *ColorFragmentOp1ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ColorFragmentOp2ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ColorFragmentOp3ATI)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ColorMask)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaskIndexedEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaski)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaskiEXT)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaskiOES)(GLuint, GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *ColorMaterial)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *ColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *ColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *ColorP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *ColorP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *ColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ColorPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *ColorPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY *ColorSubTable)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorSubTableEXT)(GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorTable)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorTableEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ColorTableParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ColorTableParameterfvSGI)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ColorTableParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ColorTableParameterivSGI)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ColorTableSGI)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *CombinerInputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *CombinerOutputNV)(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *CombinerParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *CombinerParameterfvNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CombinerParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *CombinerParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *CombinerStageParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CommandListSegmentsNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *CompileCommandListNV)(GLuint);
    void (KHRONOS_APIENTRY *CompileShader)(GLuint);
    void (KHRONOS_APIENTRY *CompileShaderARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *CompileShaderIncludeARB)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY *CompressedMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexImage3DEXT)(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage1D)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage1DARB)(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage2D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage2DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage3D)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage3DARB)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage1DARB)(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage2DARB)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage3DARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureImage3DEXT)(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *CompressedTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ConservativeRasterParameterfNV)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ConservativeRasterParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *ConvolutionFilter1D)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionFilter1DEXT)(GLenum, GLenum, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *ConvolutionParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ConvolutionParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ConvolutionParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ConvolutionParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ConvolutionParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ConvolutionParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ConvolutionParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ConvolutionParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ConvolutionParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *ConvolutionParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *CopyBufferSubData)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *CopyBufferSubDataNV)(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *CopyColorSubTable)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyColorSubTableEXT)(GLenum, GLsizei, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyColorTable)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyColorTableSGI)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter1D)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter2D)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyConvolutionFilter2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubData)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubDataEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubDataNV)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyImageSubDataOES)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyMultiTexImage1DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyMultiTexImage2DEXT)(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyMultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyMultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyMultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyNamedBufferSubData)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *CopyPathNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *CopyPixels)(GLint, GLint, GLsizei, GLsizei, GLenum);
    void (KHRONOS_APIENTRY *CopyTexImage1D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexImage1DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexImage2D)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexImage2DEXT)(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTexSubImage1D)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage1DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage2D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureImage1DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTextureImage2DEXT)(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *CopyTextureLevelsAPPLE)(GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage1D)(GLuint, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage2D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CopyTextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *CoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CoverFillPathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *CoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *CoverStrokePathNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *CoverageMaskNV)(GLboolean);
    void (KHRONOS_APIENTRY *CoverageModulationNV)(GLenum);
    void (KHRONOS_APIENTRY *CoverageModulationTableNV)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *CoverageOperationNV)(GLenum);
    void (KHRONOS_APIENTRY *CreateBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateCommandListsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateMemoryObjectsEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreatePerfQueryINTEL)(GLuint, GLuint *);
    GLuint(KHRONOS_APIENTRY *CreateProgram)(void);
    GLhandleARB(KHRONOS_APIENTRY *CreateProgramObjectARB)(void);
    void (KHRONOS_APIENTRY *CreateProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateQueries)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateSamplers)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *CreateShader)(GLenum);
    GLhandleARB(KHRONOS_APIENTRY *CreateShaderObjectARB)(GLenum);
    GLuint(KHRONOS_APIENTRY *CreateShaderProgramEXT)(GLenum, const GLchar *);
    GLuint(KHRONOS_APIENTRY *CreateShaderProgramv)(GLenum, GLsizei, const GLchar *const*);
    GLuint(KHRONOS_APIENTRY *CreateShaderProgramvEXT)(GLenum, GLsizei, const GLchar **);
    void (KHRONOS_APIENTRY *CreateStatesNV)(GLsizei, GLuint *);
    GLsync(KHRONOS_APIENTRY *CreateSyncFromCLeventARB)(struct _cl_context *, struct _cl_event *, GLbitfield);
    void (KHRONOS_APIENTRY *CreateTextures)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CreateVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *CullFace)(GLenum);
    void (KHRONOS_APIENTRY *CullParameterdvEXT)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *CullParameterfvEXT)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *CurrentPaletteMatrixARB)(GLint);
    void (KHRONOS_APIENTRY *CurrentPaletteMatrixOES)(GLuint);
    void (KHRONOS_APIENTRY *DebugMessageCallback)(GLDEBUGPROC, const void *);
    void (KHRONOS_APIENTRY *DebugMessageCallbackAMD)(GLDEBUGPROCAMD, void *);
    void (KHRONOS_APIENTRY *DebugMessageCallbackARB)(GLDEBUGPROCARB, const void *);
    void (KHRONOS_APIENTRY *DebugMessageCallbackKHR)(GLDEBUGPROCKHR, const void *);
    void (KHRONOS_APIENTRY *DebugMessageControl)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageControlARB)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageControlKHR)(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageEnableAMD)(GLenum, GLenum, GLsizei, const GLuint *, GLboolean);
    void (KHRONOS_APIENTRY *DebugMessageInsert)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DebugMessageInsertAMD)(GLenum, GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DebugMessageInsertARB)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DebugMessageInsertKHR)(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *DeformSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY *DeformationMap3dSGIX)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *DeformationMap3fSGIX)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *DeleteAsyncMarkersSGIX)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DeleteBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY *DeleteBuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteBuffersARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteCommandListsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFencesAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFencesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFragmentShaderATI)(GLuint);
    void (KHRONOS_APIENTRY *DeleteFramebuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFramebuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteFramebuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteLists)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DeleteMemoryObjectsEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteNamedStringARB)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY *DeleteNamesAMD)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *DeleteOcclusionQueriesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeletePathsNV)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DeletePerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *DeletePerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY *DeleteProgram)(GLuint);
    void (KHRONOS_APIENTRY *DeleteProgramPipelines)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteProgramPipelinesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteProgramsARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueries)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueriesARB)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueriesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteQueryResourceTagNV)(GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *DeleteRenderbuffers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteRenderbuffersEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteRenderbuffersOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteSamplers)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteSemaphoresEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteShader)(GLuint);
    void (KHRONOS_APIENTRY *DeleteStatesNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteSync)(GLsync);
    void (KHRONOS_APIENTRY *DeleteSyncAPPLE)(GLsync);
    void (KHRONOS_APIENTRY *DeleteTextures)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteTexturesEXT)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteTransformFeedbacks)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteTransformFeedbacksNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexArrays)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexArraysAPPLE)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexArraysOES)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *DeleteVertexShaderEXT)(GLuint);
    void (KHRONOS_APIENTRY *DepthBoundsEXT)(GLclampd, GLclampd);
    void (KHRONOS_APIENTRY *DepthBoundsdNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthFunc)(GLenum);
    void (KHRONOS_APIENTRY *DepthMask)(GLboolean);
    void (KHRONOS_APIENTRY *DepthRange)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthRangeArrayfvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *DepthRangeArrayfvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *DepthRangeArrayv)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *DepthRangeIndexed)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthRangeIndexedfNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DepthRangeIndexedfOES)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DepthRangedNV)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *DepthRangef)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DepthRangefOES)(GLclampf, GLclampf);
    void (KHRONOS_APIENTRY *DepthRangex)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *DepthRangexOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *DetachObjectARB)(GLhandleARB, GLhandleARB);
    void (KHRONOS_APIENTRY *DetachShader)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *DetailTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Disable)(GLenum);
    void (KHRONOS_APIENTRY *DisableClientState)(GLenum);
    void (KHRONOS_APIENTRY *DisableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY *DisableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY *DisableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *DisableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *DisableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *DisableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *DisableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY *DisableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY *Disablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DisableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DiscardFramebufferEXT)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DispatchCompute)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *DispatchComputeGroupSizeARB)(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *DispatchComputeIndirect)(GLintptr);
    void (KHRONOS_APIENTRY *DrawArrays)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysEXT)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysIndirect)(GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawArraysInstanced)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedANGLE)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedARB)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedBaseInstance)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawArraysInstancedBaseInstanceEXT)(GLenum, GLint, GLsizei, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawArraysInstancedEXT)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawArraysInstancedNV)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawBuffer)(GLenum);
    void (KHRONOS_APIENTRY *DrawBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei, GLint, GLint);
    void (KHRONOS_APIENTRY *DrawBuffers)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersARB)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersATI)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersEXT)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawBuffersIndexedEXT)(GLint, const GLenum *, const GLint *);
    void (KHRONOS_APIENTRY *DrawBuffersNV)(GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *DrawCommandsAddressNV)(GLenum, const GLuint64 *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY *DrawCommandsNV)(GLenum, GLuint, const GLintptr *, const GLsizei *, GLuint);
    void (KHRONOS_APIENTRY *DrawCommandsStatesAddressNV)(const GLuint64 *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY *DrawCommandsStatesNV)(GLuint, const GLintptr *, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY *DrawElementArrayAPPLE)(GLenum, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementArrayATI)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *DrawElements)(GLenum, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawElementsBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawElementsBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawElementsBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawElementsIndirect)(GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawElementsInstanced)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedANGLE)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedARB)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertex)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexBaseInstance)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexBaseInstanceEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint, GLuint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedBaseVertexOES)(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *DrawElementsInstancedEXT)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawElementsInstancedNV)(GLenum, GLsizei, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *DrawMeshArraysSUN)(GLenum, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *DrawPixels)(GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *DrawRangeElementArrayATI)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawRangeElements)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawRangeElementsBaseVertex)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawRangeElementsBaseVertexEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawRangeElementsBaseVertexOES)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *DrawRangeElementsEXT)(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *DrawTexfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DrawTexfvOES)(const GLfloat *);
    void (KHRONOS_APIENTRY *DrawTexiOES)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *DrawTexivOES)(const GLint *);
    void (KHRONOS_APIENTRY *DrawTexsOES)(GLshort, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *DrawTexsvOES)(const GLshort *);
    void (KHRONOS_APIENTRY *DrawTextureNV)(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *DrawTexxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *DrawTexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *DrawTransformFeedback)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackInstanced)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackInstancedEXT)(GLenum, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackStream)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *DrawTransformFeedbackStreamInstanced)(GLenum, GLuint, GLuint, GLsizei);
    void (KHRONOS_APIENTRY *DrawVkImageNV)(GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *EGLImageTargetRenderbufferStorageOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY *EGLImageTargetTexture2DOES)(GLenum, GLeglImageOES);
    void (KHRONOS_APIENTRY *EdgeFlag)(GLboolean);
    void (KHRONOS_APIENTRY *EdgeFlagFormatNV)(GLsizei);
    void (KHRONOS_APIENTRY *EdgeFlagPointer)(GLsizei, const void *);
    void (KHRONOS_APIENTRY *EdgeFlagPointerEXT)(GLsizei, GLsizei, const GLboolean *);
    void (KHRONOS_APIENTRY *EdgeFlagPointerListIBM)(GLint, const GLboolean **, GLint);
    void (KHRONOS_APIENTRY *EdgeFlagv)(const GLboolean *);
    void (KHRONOS_APIENTRY *ElementPointerAPPLE)(GLenum, const void *);
    void (KHRONOS_APIENTRY *ElementPointerATI)(GLenum, const void *);
    void (KHRONOS_APIENTRY *Enable)(GLenum);
    void (KHRONOS_APIENTRY *EnableClientState)(GLenum);
    void (KHRONOS_APIENTRY *EnableClientStateIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableClientStateiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableDriverControlQCOM)(GLuint);
    void (KHRONOS_APIENTRY *EnableIndexedEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableVariantClientStateEXT)(GLuint);
    void (KHRONOS_APIENTRY *EnableVertexArrayAttrib)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *EnableVertexArrayAttribEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *EnableVertexArrayEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *EnableVertexAttribAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *EnableVertexAttribArray)(GLuint);
    void (KHRONOS_APIENTRY *EnableVertexAttribArrayARB)(GLuint);
    void (KHRONOS_APIENTRY *Enablei)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableiEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableiNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EnableiOES)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *End)(void);
    void (KHRONOS_APIENTRY *EndConditionalRender)(void);
    void (KHRONOS_APIENTRY *EndConditionalRenderNV)(void);
    void (KHRONOS_APIENTRY *EndConditionalRenderNVX)(void);
    void (KHRONOS_APIENTRY *EndFragmentShaderATI)(void);
    void (KHRONOS_APIENTRY *EndList)(void);
    void (KHRONOS_APIENTRY *EndOcclusionQueryNV)(void);
    void (KHRONOS_APIENTRY *EndPerfMonitorAMD)(GLuint);
    void (KHRONOS_APIENTRY *EndPerfQueryINTEL)(GLuint);
    void (KHRONOS_APIENTRY *EndQuery)(GLenum);
    void (KHRONOS_APIENTRY *EndQueryARB)(GLenum);
    void (KHRONOS_APIENTRY *EndQueryEXT)(GLenum);
    void (KHRONOS_APIENTRY *EndQueryIndexed)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *EndTilingQCOM)(GLbitfield);
    void (KHRONOS_APIENTRY *EndTransformFeedback)(void);
    void (KHRONOS_APIENTRY *EndTransformFeedbackEXT)(void);
    void (KHRONOS_APIENTRY *EndTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY *EndVertexShaderEXT)(void);
    void (KHRONOS_APIENTRY *EndVideoCaptureNV)(GLuint);
    void (KHRONOS_APIENTRY *EvalCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY *EvalCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *EvalCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY *EvalCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *EvalCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY *EvalCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *EvalCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *EvalCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *EvalCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *EvalCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *EvalCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *EvalCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *EvalMapsNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *EvalMesh1)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *EvalMesh2)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *EvalPoint1)(GLint);
    void (KHRONOS_APIENTRY *EvalPoint2)(GLint, GLint);
    void (KHRONOS_APIENTRY *EvaluateDepthValuesARB)(void);
    void (KHRONOS_APIENTRY *ExecuteProgramNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ExtGetBufferPointervQCOM)(GLenum, void **);
    void (KHRONOS_APIENTRY *ExtGetBuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetFramebuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetProgramBinarySourceQCOM)(GLuint, GLenum, GLchar *, GLint *);
    void (KHRONOS_APIENTRY *ExtGetProgramsQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetRenderbuffersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetShadersQCOM)(GLuint *, GLint, GLint *);
    void (KHRONOS_APIENTRY *ExtGetTexLevelParameterivQCOM)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *ExtGetTexSubImageQCOM)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *ExtGetTexturesQCOM)(GLuint *, GLint, GLint *);
    GLboolean(KHRONOS_APIENTRY *ExtIsProgramBinaryQCOM)(GLuint);
    void (KHRONOS_APIENTRY *ExtTexObjectStateOverrideiQCOM)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ExtractComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *FeedbackBuffer)(GLsizei, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *FeedbackBufferxOES)(GLsizei, GLenum, const GLfixed *);
    GLsync(KHRONOS_APIENTRY *FenceSync)(GLenum, GLbitfield);
    GLsync(KHRONOS_APIENTRY *FenceSyncAPPLE)(GLenum, GLbitfield);
    void (KHRONOS_APIENTRY *FinalCombinerInputNV)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *Finish)(void);
    GLint(KHRONOS_APIENTRY *FinishAsyncSGIX)(GLuint *);
    void (KHRONOS_APIENTRY *FinishFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY *FinishFenceNV)(GLuint);
    void (KHRONOS_APIENTRY *FinishObjectAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY *FinishTextureSUNX)(void);
    void (KHRONOS_APIENTRY *Flush)(void);
    void (KHRONOS_APIENTRY *FlushMappedBufferRange)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedBufferRangeAPPLE)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedNamedBufferRange)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushMappedNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *FlushPixelDataRangeNV)(GLenum);
    void (KHRONOS_APIENTRY *FlushRasterSGIX)(void);
    void (KHRONOS_APIENTRY *FlushStaticDataIBM)(GLenum);
    void (KHRONOS_APIENTRY *FlushVertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY *FlushVertexArrayRangeNV)(void);
    void (KHRONOS_APIENTRY *FogCoordFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *FogCoordPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *FogCoordPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *FogCoordPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *FogCoordd)(GLdouble);
    void (KHRONOS_APIENTRY *FogCoorddEXT)(GLdouble);
    void (KHRONOS_APIENTRY *FogCoorddv)(const GLdouble *);
    void (KHRONOS_APIENTRY *FogCoorddvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *FogCoordf)(GLfloat);
    void (KHRONOS_APIENTRY *FogCoordfEXT)(GLfloat);
    void (KHRONOS_APIENTRY *FogCoordfv)(const GLfloat *);
    void (KHRONOS_APIENTRY *FogCoordfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *FogCoordhNV)(GLhalfNV);
    void (KHRONOS_APIENTRY *FogCoordhvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *FogFuncSGIS)(GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Fogf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *Fogfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Fogi)(GLenum, GLint);
    void (KHRONOS_APIENTRY *Fogiv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Fogx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *FogxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *Fogxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *FogxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *FragmentColorMaterialSGIX)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *FragmentCoverageColorNV)(GLuint);
    void (KHRONOS_APIENTRY *FragmentLightModelfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *FragmentLightModelfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *FragmentLightModeliSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY *FragmentLightModelivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *FragmentLightfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *FragmentLightfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *FragmentLightiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *FragmentLightivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *FragmentMaterialfSGIX)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *FragmentMaterialfvSGIX)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *FragmentMaterialiSGIX)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *FragmentMaterialivSGIX)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *FrameTerminatorGREMEDY)(void);
    void (KHRONOS_APIENTRY *FrameZoomSGIX)(GLint);
    void (KHRONOS_APIENTRY *FramebufferDrawBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferDrawBuffersEXT)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *FramebufferFetchBarrierQCOM)(void);
    void (KHRONOS_APIENTRY *FramebufferFoveationConfigQCOM)(GLuint, GLuint, GLuint, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *FramebufferFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *FramebufferParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *FramebufferPixelLocalStorageSizeEXT)(GLuint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferReadBufferEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferRenderbuffer)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *FramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *FramebufferRenderbufferOES)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *FramebufferSampleLocationsfvARB)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *FramebufferSampleLocationsfvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *FramebufferSamplePositionsfvAMD)(GLenum, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *FramebufferTexture)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture1D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2D)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2DDownsampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture2DMultisampleEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTexture2DMultisampleIMG)(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTexture2DOES)(GLenum, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture3D)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTexture3DOES)(GLenum, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureARB)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureEXT)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureFaceARB)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferTextureFaceEXT)(GLenum, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY *FramebufferTextureLayer)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureLayerARB)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureLayerDownsampleIMG)(GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureLayerEXT)(GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *FramebufferTextureMultisampleMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTextureMultiviewOVR)(GLenum, GLenum, GLuint, GLint, GLint, GLsizei);
    void (KHRONOS_APIENTRY *FramebufferTextureOES)(GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *FreeObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY *FrontFace)(GLenum);
    void (KHRONOS_APIENTRY *Frustum)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Frustumf)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *FrustumfOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Frustumx)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *FrustumxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    GLuint(KHRONOS_APIENTRY *GenAsyncMarkersSGIX)(GLsizei);
    void (KHRONOS_APIENTRY *GenBuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenBuffersARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFencesAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFencesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenFragmentShadersATI)(GLuint);
    void (KHRONOS_APIENTRY *GenFramebuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFramebuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenFramebuffersOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenLists)(GLsizei);
    void (KHRONOS_APIENTRY *GenNamesAMD)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GenOcclusionQueriesNV)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenPathsNV)(GLsizei);
    void (KHRONOS_APIENTRY *GenPerfMonitorsAMD)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramPipelines)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramPipelinesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramsARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenProgramsNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueries)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueriesARB)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueriesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenQueryResourceTagNV)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GenRenderbuffers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenRenderbuffersEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenRenderbuffersOES)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenSamplers)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenSemaphoresEXT)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenSymbolsEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *GenTextures)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenTexturesEXT)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenTransformFeedbacks)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenTransformFeedbacksNV)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenVertexArrays)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenVertexArraysAPPLE)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GenVertexArraysOES)(GLsizei, GLuint *);
    GLuint(KHRONOS_APIENTRY *GenVertexShadersEXT)(GLuint);
    void (KHRONOS_APIENTRY *GenerateMipmap)(GLenum);
    void (KHRONOS_APIENTRY *GenerateMipmapEXT)(GLenum);
    void (KHRONOS_APIENTRY *GenerateMipmapOES)(GLenum);
    void (KHRONOS_APIENTRY *GenerateMultiTexMipmapEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *GenerateTextureMipmap)(GLuint);
    void (KHRONOS_APIENTRY *GenerateTextureMipmapEXT)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *GetActiveAtomicCounterBufferiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveAttrib)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY *GetActiveSubroutineName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveSubroutineUniformName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveSubroutineUniformiv)(GLuint, GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveUniform)(GLuint, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *);
    void (KHRONOS_APIENTRY *GetActiveUniformBlockName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveUniformBlockiv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveUniformName)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetActiveUniformsiv)(GLuint, GLsizei, const GLuint *, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetActiveVaryingNV)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetArrayObjectfvATI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetArrayObjectivATI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *);
    void (KHRONOS_APIENTRY *GetAttachedShaders)(GLuint, GLsizei, GLsizei *, GLuint *);
    GLint(KHRONOS_APIENTRY *GetAttribLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetAttribLocationARB)(GLhandleARB, const GLcharARB *);
    void (KHRONOS_APIENTRY *GetBooleanIndexedvEXT)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY *GetBooleani_v)(GLenum, GLuint, GLboolean *);
    void (KHRONOS_APIENTRY *GetBooleanv)(GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetBufferParameteri64v)(GLenum, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetBufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetBufferParameterivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetBufferParameterui64vNV)(GLenum, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetBufferPointerv)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetBufferPointervARB)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetBufferPointervOES)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetBufferSubData)(GLenum, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY *GetBufferSubDataARB)(GLenum, GLintptrARB, GLsizeiptrARB, void *);
    void (KHRONOS_APIENTRY *GetClipPlane)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetClipPlanef)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetClipPlanefOES)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetClipPlanex)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetClipPlanexOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetColorTable)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetColorTableEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetColorTableParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetColorTableParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetColorTableParameterfvSGI)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetColorTableParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetColorTableParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetColorTableParameterivSGI)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetColorTableSGI)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetCombinerInputParameterfvNV)(GLenum, GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetCombinerInputParameterivNV)(GLenum, GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetCombinerOutputParameterfvNV)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetCombinerOutputParameterivNV)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetCombinerStageParameterfvNV)(GLenum, GLenum, GLfloat *);
    GLuint(KHRONOS_APIENTRY *GetCommandHeaderNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *GetCompressedMultiTexImageEXT)(GLenum, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTexImage)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTexImageARB)(GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTextureImage)(GLuint, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetCompressedTextureImageEXT)(GLuint, GLenum, GLint, void *);
    void (KHRONOS_APIENTRY *GetCompressedTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetConvolutionFilter)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetConvolutionFilterEXT)(GLenum, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetConvolutionParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetConvolutionParameterxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetCoverageModulationTableNV)(GLsizei, GLfloat *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLog)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLogAMD)(GLuint, GLsizei, GLenum *, GLuint *, GLuint *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLogARB)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetDebugMessageLogKHR)(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetDetailTexFuncSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetDoubleIndexedvEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetDoublei_v)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetDoublei_vEXT)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetDoublev)(GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetDriverControlStringQCOM)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetDriverControlsQCOM)(GLint *, GLsizei, GLuint *);
    GLenum(KHRONOS_APIENTRY *GetError)(void);
    void (KHRONOS_APIENTRY *GetFenceivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFinalCombinerInputParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFinalCombinerInputParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFirstPerfQueryIdINTEL)(GLuint *);
    void (KHRONOS_APIENTRY *GetFixedv)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetFixedvOES)(GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetFloatIndexedvEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_v)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_vEXT)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_vNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloati_vOES)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetFloatv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFogFuncSGIS)(GLfloat *);
    GLint(KHRONOS_APIENTRY *GetFragDataIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetFragDataIndexEXT)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetFragDataLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetFragDataLocationEXT)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *GetFragmentLightfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFragmentLightivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFragmentMaterialfvSGIX)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetFragmentMaterialivSGIX)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferAttachmentParameteriv)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferAttachmentParameterivOES)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferParameterfvAMD)(GLenum, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetFramebufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    GLsizei(KHRONOS_APIENTRY *GetFramebufferPixelLocalStorageSizeEXT)(GLuint);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatus)(void);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatusARB)(void);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatusEXT)(void);
    GLenum(KHRONOS_APIENTRY *GetGraphicsResetStatusKHR)(void);
    GLhandleARB(KHRONOS_APIENTRY *GetHandleARB)(GLenum);
    void (KHRONOS_APIENTRY *GetHistogram)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetHistogramEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetHistogramParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetHistogramParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetHistogramParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetHistogramParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetHistogramParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY *GetImageHandleARB)(GLuint, GLint, GLboolean, GLint, GLenum);
    GLuint64(KHRONOS_APIENTRY *GetImageHandleNV)(GLuint, GLint, GLboolean, GLint, GLenum);
    void (KHRONOS_APIENTRY *GetImageTransformParameterfvHP)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetImageTransformParameterivHP)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    GLint(KHRONOS_APIENTRY *GetInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY *GetInteger64i_v)(GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY *GetInteger64v)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetInteger64vAPPLE)(GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetIntegerIndexedvEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetIntegeri_v)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetIntegeri_vEXT)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetIntegerui64i_vNV)(GLenum, GLuint, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetIntegerui64vNV)(GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetIntegerv)(GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetInternalformatSampleivNV)(GLenum, GLenum, GLsizei, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetInternalformati64v)(GLenum, GLenum, GLenum, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY *GetInternalformativ)(GLenum, GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetInvariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetInvariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetInvariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetLightfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetLightiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetLightxOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetLightxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetLightxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetListParameterfvSGIX)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetListParameterivSGIX)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetLocalConstantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetLocalConstantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetLocalConstantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapAttribParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMapAttribParameterivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, void *);
    void (KHRONOS_APIENTRY *GetMapParameterfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMapParameterivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapdv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetMapfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMapiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMapxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetMaterialfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMaterialiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *GetMaterialxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetMaterialxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetMemoryObjectParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMinmax)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetMinmaxEXT)(GLenum, GLboolean, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetMinmaxParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMinmaxParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMinmaxParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMinmaxParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexEnvfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexEnvivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexGendvEXT)(GLenum, GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetMultiTexGenfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexGenivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexImageEXT)(GLenum, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetMultiTexLevelParameterfvEXT)(GLenum, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexLevelParameterivEXT)(GLenum, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterIivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterfvEXT)(GLenum, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultiTexParameterivEXT)(GLenum, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetMultisamplefv)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetMultisamplefvNV)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameteri64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedBufferParameterui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetNamedBufferPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetNamedBufferPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetNamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY *GetNamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, void *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferAttachmentParameteriv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferAttachmentParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferParameterfvAMD)(GLuint, GLenum, GLuint, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedFramebufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterIivEXT)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterIuivEXT)(GLuint, GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterdvEXT)(GLuint, GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetNamedProgramLocalParameterfvEXT)(GLuint, GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetNamedProgramStringEXT)(GLuint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetNamedProgramivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedRenderbufferParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedRenderbufferParameterivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNamedStringARB)(GLint, const GLchar *, GLsizei, GLint *, GLchar *);
    void (KHRONOS_APIENTRY *GetNamedStringivARB)(GLint, const GLchar *, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetNextPerfQueryIdINTEL)(GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetObjectBufferfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetObjectBufferivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetObjectLabel)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectLabelEXT)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectLabelKHR)(GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetObjectParameterivAPPLE)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetObjectParameterivARB)(GLhandleARB, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetObjectPtrLabel)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetObjectPtrLabelKHR)(const void *, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetOcclusionQueryivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetOcclusionQueryuivNV)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetPathColorGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathColorGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPathCommandsNV)(GLuint, GLubyte *);
    void (KHRONOS_APIENTRY *GetPathCoordsNV)(GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathDashArrayNV)(GLuint, GLfloat *);
    GLfloat(KHRONOS_APIENTRY *GetPathLengthNV)(GLuint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *GetPathMetricRangeNV)(GLbitfield, GLuint, GLsizei, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathMetricsNV)(GLbitfield, GLsizei, GLenum, const void *, GLuint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathParameterfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathParameterivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPathSpacingNV)(GLenum, GLsizei, GLenum, const void *, GLuint, GLfloat, GLfloat, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathTexGenfvNV)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPathTexGenivNV)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPerfCounterInfoINTEL)(GLuint, GLuint, GLuint, GLchar *, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *, GLuint64 *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCounterDataAMD)(GLuint, GLenum, GLsizei, GLuint *, GLint *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCounterInfoAMD)(GLuint, GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCounterStringAMD)(GLuint, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetPerfMonitorCountersAMD)(GLuint, GLint *, GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfMonitorGroupStringAMD)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetPerfMonitorGroupsAMD)(GLint *, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfQueryDataINTEL)(GLuint, GLuint, GLsizei, void *, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfQueryIdByNameINTEL)(GLchar *, GLuint *);
    void (KHRONOS_APIENTRY *GetPerfQueryInfoINTEL)(GLuint, GLuint, GLchar *, GLuint *, GLuint *, GLuint *, GLuint *);
    void (KHRONOS_APIENTRY *GetPixelMapfv)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPixelMapuiv)(GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetPixelMapusv)(GLenum, GLushort *);
    void (KHRONOS_APIENTRY *GetPixelMapxv)(GLenum, GLint, GLfixed *);
    void (KHRONOS_APIENTRY *GetPixelTexGenParameterfvSGIS)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPixelTexGenParameterivSGIS)(GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPixelTransformParameterfvEXT)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetPixelTransformParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetPointerIndexedvEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY *GetPointeri_vEXT)(GLenum, GLuint, void **);
    void (KHRONOS_APIENTRY *GetPointerv)(GLenum, void **);
    void (KHRONOS_APIENTRY *GetPointervEXT)(GLenum, void **);
    void (KHRONOS_APIENTRY *GetPointervKHR)(GLenum, void **);
    void (KHRONOS_APIENTRY *GetPolygonStipple)(GLubyte *);
    void (KHRONOS_APIENTRY *GetProgramBinary)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY *GetProgramBinaryOES)(GLuint, GLsizei, GLsizei *, GLenum *, void *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramEnvParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramInterfaceiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterIivNV)(GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterIuivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterdvARB)(GLenum, GLuint, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramLocalParameterfvARB)(GLenum, GLuint, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramNamedParameterdvNV)(GLuint, GLsizei, const GLubyte *, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramNamedParameterfvNV)(GLuint, GLsizei, const GLubyte *, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramParameterdvNV)(GLenum, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetProgramParameterfvNV)(GLenum, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramPipelineInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramPipelineInfoLogEXT)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramPipelineiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramPipelineivEXT)(GLuint, GLenum, GLint *);
    GLuint(KHRONOS_APIENTRY *GetProgramResourceIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetProgramResourceLocation)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetProgramResourceLocationIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetProgramResourceLocationIndexEXT)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY *GetProgramResourceName)(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetProgramResourcefvNV)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLfloat *);
    void (KHRONOS_APIENTRY *GetProgramResourceiv)(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *GetProgramStageiv)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramStringARB)(GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetProgramStringNV)(GLuint, GLenum, GLubyte *);
    void (KHRONOS_APIENTRY *GetProgramSubroutineParameteruivNV)(GLenum, GLuint, GLuint *);
    void (KHRONOS_APIENTRY *GetProgramiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetProgramivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryBufferObjecti64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryBufferObjectiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryBufferObjectui64v)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryBufferObjectuiv)(GLuint, GLuint, GLenum, GLintptr);
    void (KHRONOS_APIENTRY *GetQueryIndexediv)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjecti64v)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjecti64vEXT)(GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjectiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjectivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjectivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryObjectui64v)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjectui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *GetQueryObjectuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetQueryObjectuivARB)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetQueryObjectuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetQueryiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryivARB)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetQueryivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetRenderbufferParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetRenderbufferParameterivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIivOES)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterIuivOES)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetSamplerParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetSamplerParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSemaphoreParameterui64vEXT)(GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *GetSeparableFilter)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY *GetSeparableFilterEXT)(GLenum, GLenum, GLenum, void *, void *, void *);
    void (KHRONOS_APIENTRY *GetShaderInfoLog)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetShaderPrecisionFormat)(GLenum, GLenum, GLint *, GLint *);
    void (KHRONOS_APIENTRY *GetShaderSource)(GLuint, GLsizei, GLsizei *, GLchar *);
    void (KHRONOS_APIENTRY *GetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *);
    void (KHRONOS_APIENTRY *GetShaderiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetSharpenTexFuncSGIS)(GLenum, GLfloat *);
    GLushort(KHRONOS_APIENTRY *GetStageIndexNV)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY *GetString)(GLenum);
    const GLubyte *(KHRONOS_APIENTRY *GetStringi)(GLenum, GLuint);
    GLuint(KHRONOS_APIENTRY *GetSubroutineIndex)(GLuint, GLenum, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetSubroutineUniformLocation)(GLuint, GLenum, const GLchar *);
    void (KHRONOS_APIENTRY *GetSynciv)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *GetSyncivAPPLE)(GLsync, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *GetTexBumpParameterfvATI)(GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexBumpParameterivATI)(GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexEnvfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexEnviv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexEnvxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexEnvxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexFilterFuncSGIS)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexGendv)(GLenum, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetTexGenfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexGenfvOES)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexGeniv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexGenivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexGenxvOES)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexImage)(GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetTexLevelParameterfv)(GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexLevelParameteriv)(GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexLevelParameterxvOES)(GLenum, GLint, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexParameterIiv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterIivEXT)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterIivOES)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterIuiv)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTexParameterIuivEXT)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTexParameterIuivOES)(GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTexParameterPointervAPPLE)(GLenum, GLenum, void **);
    void (KHRONOS_APIENTRY *GetTexParameterfv)(GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTexParameteriv)(GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTexParameterxv)(GLenum, GLenum, GLfixed *);
    void (KHRONOS_APIENTRY *GetTexParameterxvOES)(GLenum, GLenum, GLfixed *);
    GLuint64(KHRONOS_APIENTRY *GetTextureHandleARB)(GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureHandleIMG)(GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureHandleNV)(GLuint);
    void (KHRONOS_APIENTRY *GetTextureImage)(GLuint, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetTextureImageEXT)(GLuint, GLenum, GLint, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameterfv)(GLuint, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameterfvEXT)(GLuint, GLenum, GLint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameteriv)(GLuint, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureLevelParameterivEXT)(GLuint, GLenum, GLint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIivEXT)(GLuint, GLenum, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTextureParameterIuivEXT)(GLuint, GLenum, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetTextureParameterfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureParameterfvEXT)(GLuint, GLenum, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetTextureParameteriv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTextureParameterivEXT)(GLuint, GLenum, GLenum, GLint *);
    GLuint64(KHRONOS_APIENTRY *GetTextureSamplerHandleARB)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureSamplerHandleIMG)(GLuint, GLuint);
    GLuint64(KHRONOS_APIENTRY *GetTextureSamplerHandleNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *GetTextureSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetTrackMatrixivNV)(GLenum, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackVarying)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackVaryingEXT)(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackVaryingNV)(GLuint, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetTransformFeedbacki64_v)(GLuint, GLenum, GLuint, GLint64 *);
    void (KHRONOS_APIENTRY *GetTransformFeedbacki_v)(GLuint, GLenum, GLuint, GLint *);
    void (KHRONOS_APIENTRY *GetTransformFeedbackiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetTranslatedShaderSourceANGLE)(GLuint, GLsizei, GLsizei *, GLchar *);
    GLuint(KHRONOS_APIENTRY *GetUniformBlockIndex)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetUniformBufferSizeEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY *GetUniformIndices)(GLuint, GLsizei, const GLchar *const*, GLuint *);
    GLint(KHRONOS_APIENTRY *GetUniformLocation)(GLuint, const GLchar *);
    GLint(KHRONOS_APIENTRY *GetUniformLocationARB)(GLhandleARB, const GLcharARB *);
    GLintptr(KHRONOS_APIENTRY *GetUniformOffsetEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY *GetUniformSubroutineuiv)(GLenum, GLint, GLuint *);
    void (KHRONOS_APIENTRY *GetUniformdv)(GLuint, GLint, GLdouble *);
    void (KHRONOS_APIENTRY *GetUniformfv)(GLuint, GLint, GLfloat *);
    void (KHRONOS_APIENTRY *GetUniformfvARB)(GLhandleARB, GLint, GLfloat *);
    void (KHRONOS_APIENTRY *GetUniformi64vARB)(GLuint, GLint, GLint64 *);
    void (KHRONOS_APIENTRY *GetUniformi64vNV)(GLuint, GLint, GLint64EXT *);
    void (KHRONOS_APIENTRY *GetUniformiv)(GLuint, GLint, GLint *);
    void (KHRONOS_APIENTRY *GetUniformivARB)(GLhandleARB, GLint, GLint *);
    void (KHRONOS_APIENTRY *GetUniformui64vARB)(GLuint, GLint, GLuint64 *);
    void (KHRONOS_APIENTRY *GetUniformui64vNV)(GLuint, GLint, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetUniformuiv)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY *GetUniformuivEXT)(GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY *GetUnsignedBytei_vEXT)(GLenum, GLuint, GLubyte *);
    void (KHRONOS_APIENTRY *GetUnsignedBytevEXT)(GLenum, GLubyte *);
    void (KHRONOS_APIENTRY *GetVariantArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVariantArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVariantBooleanvEXT)(GLuint, GLenum, GLboolean *);
    void (KHRONOS_APIENTRY *GetVariantFloatvEXT)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVariantIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVariantPointervEXT)(GLuint, GLenum, void **);
    GLint(KHRONOS_APIENTRY *GetVaryingLocationNV)(GLuint, const GLchar *);
    void (KHRONOS_APIENTRY *GetVertexArrayIndexed64iv)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *GetVertexArrayIndexediv)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexArrayIntegeri_vEXT)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexArrayIntegervEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexArrayPointeri_vEXT)(GLuint, GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexArrayPointervEXT)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexArrayiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribArrayObjectfvATI)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribArrayObjectivATI)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIivEXT)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIuiv)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetVertexAttribIuivEXT)(GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *GetVertexAttribLdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribLdvEXT)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribLi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY *GetVertexAttribLui64vARB)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetVertexAttribLui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetVertexAttribPointerv)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexAttribPointervARB)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexAttribPointervNV)(GLuint, GLenum, void **);
    void (KHRONOS_APIENTRY *GetVertexAttribdv)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribdvARB)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribdvNV)(GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVertexAttribfv)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribfvARB)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribfvNV)(GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVertexAttribiv)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribivARB)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVertexAttribivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoCaptureStreamdvNV)(GLuint, GLuint, GLenum, GLdouble *);
    void (KHRONOS_APIENTRY *GetVideoCaptureStreamfvNV)(GLuint, GLuint, GLenum, GLfloat *);
    void (KHRONOS_APIENTRY *GetVideoCaptureStreamivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoCaptureivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoi64vNV)(GLuint, GLenum, GLint64EXT *);
    void (KHRONOS_APIENTRY *GetVideoivNV)(GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *GetVideoui64vNV)(GLuint, GLenum, GLuint64EXT *);
    void (KHRONOS_APIENTRY *GetVideouivNV)(GLuint, GLenum, GLuint *);
    GLVULKANPROCNV(KHRONOS_APIENTRY *GetVkProcAddrNV)(const GLchar *);
    void (KHRONOS_APIENTRY *GetnColorTable)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnColorTableARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnCompressedTexImage)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnCompressedTexImageARB)(GLenum, GLint, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnConvolutionFilter)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnConvolutionFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnHistogram)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnHistogramARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnMapdv)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnMapdvARB)(GLenum, GLenum, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnMapfv)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnMapfvARB)(GLenum, GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnMapiv)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnMapivARB)(GLenum, GLenum, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnMinmax)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnMinmaxARB)(GLenum, GLboolean, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnPixelMapfv)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnPixelMapfvARB)(GLenum, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnPixelMapuiv)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnPixelMapuivARB)(GLenum, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnPixelMapusv)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY *GetnPixelMapusvARB)(GLenum, GLsizei, GLushort *);
    void (KHRONOS_APIENTRY *GetnPolygonStipple)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY *GetnPolygonStippleARB)(GLsizei, GLubyte *);
    void (KHRONOS_APIENTRY *GetnSeparableFilter)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY *GetnSeparableFilterARB)(GLenum, GLenum, GLenum, GLsizei, void *, GLsizei, void *, void *);
    void (KHRONOS_APIENTRY *GetnTexImage)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnTexImageARB)(GLenum, GLint, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *GetnUniformdv)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnUniformdvARB)(GLuint, GLint, GLsizei, GLdouble *);
    void (KHRONOS_APIENTRY *GetnUniformfv)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformfvARB)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformfvEXT)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformfvKHR)(GLuint, GLint, GLsizei, GLfloat *);
    void (KHRONOS_APIENTRY *GetnUniformi64vARB)(GLuint, GLint, GLsizei, GLint64 *);
    void (KHRONOS_APIENTRY *GetnUniformiv)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformivARB)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformivEXT)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformivKHR)(GLuint, GLint, GLsizei, GLint *);
    void (KHRONOS_APIENTRY *GetnUniformui64vARB)(GLuint, GLint, GLsizei, GLuint64 *);
    void (KHRONOS_APIENTRY *GetnUniformuiv)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnUniformuivARB)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GetnUniformuivKHR)(GLuint, GLint, GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorbSUN)(GLbyte);
    void (KHRONOS_APIENTRY *GlobalAlphaFactordSUN)(GLdouble);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorfSUN)(GLfloat);
    void (KHRONOS_APIENTRY *GlobalAlphaFactoriSUN)(GLint);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorsSUN)(GLshort);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorubSUN)(GLubyte);
    void (KHRONOS_APIENTRY *GlobalAlphaFactoruiSUN)(GLuint);
    void (KHRONOS_APIENTRY *GlobalAlphaFactorusSUN)(GLushort);
    void (KHRONOS_APIENTRY *Hint)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *HintPGI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *Histogram)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *HistogramEXT)(GLenum, GLsizei, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *IglooInterfaceSGIX)(GLenum, const void *);
    void (KHRONOS_APIENTRY *ImageTransformParameterfHP)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ImageTransformParameterfvHP)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ImageTransformParameteriHP)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *ImageTransformParameterivHP)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *ImportMemoryFdEXT)(GLuint, GLuint64, GLenum, GLint);
    void (KHRONOS_APIENTRY *ImportMemoryWin32HandleEXT)(GLuint, GLuint64, GLenum, void *);
    void (KHRONOS_APIENTRY *ImportMemoryWin32NameEXT)(GLuint, GLuint64, GLenum, const void *);
    void (KHRONOS_APIENTRY *ImportSemaphoreFdEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ImportSemaphoreWin32HandleEXT)(GLuint, GLenum, void *);
    void (KHRONOS_APIENTRY *ImportSemaphoreWin32NameEXT)(GLuint, GLenum, const void *);
    GLsync(KHRONOS_APIENTRY *ImportSyncEXT)(GLenum, GLintptr, GLbitfield);
    void (KHRONOS_APIENTRY *IndexFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *IndexFuncEXT)(GLenum, GLclampf);
    void (KHRONOS_APIENTRY *IndexMask)(GLuint);
    void (KHRONOS_APIENTRY *IndexMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *IndexPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *IndexPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *IndexPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *Indexd)(GLdouble);
    void (KHRONOS_APIENTRY *Indexdv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Indexf)(GLfloat);
    void (KHRONOS_APIENTRY *Indexfv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Indexi)(GLint);
    void (KHRONOS_APIENTRY *Indexiv)(const GLint *);
    void (KHRONOS_APIENTRY *Indexs)(GLshort);
    void (KHRONOS_APIENTRY *Indexsv)(const GLshort *);
    void (KHRONOS_APIENTRY *Indexub)(GLubyte);
    void (KHRONOS_APIENTRY *Indexubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *IndexxOES)(GLfixed);
    void (KHRONOS_APIENTRY *IndexxvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *InitNames)(void);
    void (KHRONOS_APIENTRY *InsertComponentEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *InsertEventMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *InstrumentsBufferSGIX)(GLsizei, GLint *);
    void (KHRONOS_APIENTRY *InterleavedArrays)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *InterpolatePathsNV)(GLuint, GLuint, GLuint, GLfloat);
    void (KHRONOS_APIENTRY *InvalidateBufferData)(GLuint);
    void (KHRONOS_APIENTRY *InvalidateBufferSubData)(GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *InvalidateFramebuffer)(GLenum, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *InvalidateNamedFramebufferData)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *InvalidateNamedFramebufferSubData)(GLuint, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *InvalidateSubFramebuffer)(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *InvalidateTexImage)(GLuint, GLint);
    void (KHRONOS_APIENTRY *InvalidateTexSubImage)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    GLboolean(KHRONOS_APIENTRY *IsAsyncMarkerSGIX)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsBufferARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsBufferResidentNV)(GLenum);
    GLboolean(KHRONOS_APIENTRY *IsCommandListNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnabled)(GLenum);
    GLboolean(KHRONOS_APIENTRY *IsEnabledIndexedEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnabledi)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnablediEXT)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnablediNV)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsEnablediOES)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFramebuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFramebufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsFramebufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsImageHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsImageHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsList)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsMemoryObjectEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsNameAMD)(GLenum, GLuint);
    GLboolean(KHRONOS_APIENTRY *IsNamedBufferResidentNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsNamedStringARB)(GLint, const GLchar *);
    GLboolean(KHRONOS_APIENTRY *IsObjectBufferATI)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsOcclusionQueryNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsPathNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsPointInFillPathNV)(GLuint, GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY *IsPointInStrokePathNV)(GLuint, GLfloat, GLfloat);
    GLboolean(KHRONOS_APIENTRY *IsProgram)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramPipeline)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsProgramPipelineEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsQuery)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsQueryARB)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsQueryEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsRenderbuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsRenderbufferEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsRenderbufferOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsSampler)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsSemaphoreEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsShader)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsStateNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsSync)(GLsync);
    GLboolean(KHRONOS_APIENTRY *IsSyncAPPLE)(GLsync);
    GLboolean(KHRONOS_APIENTRY *IsTexture)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsTextureEXT)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsTextureHandleResidentARB)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsTextureHandleResidentNV)(GLuint64);
    GLboolean(KHRONOS_APIENTRY *IsTransformFeedback)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsTransformFeedbackNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVariantEnabledEXT)(GLuint, GLenum);
    GLboolean(KHRONOS_APIENTRY *IsVertexArray)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVertexArrayAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVertexArrayOES)(GLuint);
    GLboolean(KHRONOS_APIENTRY *IsVertexAttribEnabledAPPLE)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *LGPUCopyImageSubDataNVX)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *LGPUInterlockNVX)(void);
    void (KHRONOS_APIENTRY *LGPUNamedBufferSubDataNVX)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *LabelObjectEXT)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *LightEnviSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY *LightModelf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *LightModelfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *LightModeli)(GLenum, GLint);
    void (KHRONOS_APIENTRY *LightModeliv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *LightModelx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *LightModelxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *LightModelxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *LightModelxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *Lightf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *Lightfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Lighti)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *Lightiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Lightx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *LightxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *Lightxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *LightxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *LineStipple)(GLint, GLushort);
    void (KHRONOS_APIENTRY *LineWidth)(GLfloat);
    void (KHRONOS_APIENTRY *LineWidthx)(GLfixed);
    void (KHRONOS_APIENTRY *LineWidthxOES)(GLfixed);
    void (KHRONOS_APIENTRY *LinkProgram)(GLuint);
    void (KHRONOS_APIENTRY *LinkProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *ListBase)(GLuint);
    void (KHRONOS_APIENTRY *ListDrawCommandsStatesClientNV)(GLuint, GLuint, const void **, const GLsizei *, const GLuint *, const GLuint *, GLuint);
    void (KHRONOS_APIENTRY *ListParameterfSGIX)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *ListParameterfvSGIX)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *ListParameteriSGIX)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ListParameterivSGIX)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *LoadIdentity)(void);
    void (KHRONOS_APIENTRY *LoadIdentityDeformationMapSGIX)(GLbitfield);
    void (KHRONOS_APIENTRY *LoadMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *LoadMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *LoadMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY *LoadMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *LoadName)(GLuint);
    void (KHRONOS_APIENTRY *LoadPaletteFromModelViewMatrixOES)(void);
    void (KHRONOS_APIENTRY *LoadProgramNV)(GLenum, GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *LoadTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *LockArraysEXT)(GLint, GLsizei);
    void (KHRONOS_APIENTRY *LogicOp)(GLenum);
    void (KHRONOS_APIENTRY *MakeBufferNonResidentNV)(GLenum);
    void (KHRONOS_APIENTRY *MakeBufferResidentNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *MakeImageHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY *MakeImageHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY *MakeImageHandleResidentARB)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY *MakeImageHandleResidentNV)(GLuint64, GLenum);
    void (KHRONOS_APIENTRY *MakeNamedBufferNonResidentNV)(GLuint);
    void (KHRONOS_APIENTRY *MakeNamedBufferResidentNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *MakeTextureHandleNonResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY *MakeTextureHandleNonResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY *MakeTextureHandleResidentARB)(GLuint64);
    void (KHRONOS_APIENTRY *MakeTextureHandleResidentNV)(GLuint64);
    void (KHRONOS_APIENTRY *Map1d)(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *Map1f)(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *Map1xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void (KHRONOS_APIENTRY *Map2d)(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *Map2f)(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *Map2xOES)(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed);
    void *(KHRONOS_APIENTRY *MapBuffer)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY *MapBufferARB)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY *MapBufferOES)(GLenum, GLenum);
    void *(KHRONOS_APIENTRY *MapBufferRange)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY *MapBufferRangeEXT)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
    void (KHRONOS_APIENTRY *MapControlPointsNV)(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, const void *);
    void (KHRONOS_APIENTRY *MapGrid1d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MapGrid1f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MapGrid1xOES)(GLint, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MapGrid2d)(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MapGrid2f)(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MapGrid2xOES)(GLint, GLfixed, GLfixed, GLfixed, GLfixed);
    void *(KHRONOS_APIENTRY *MapNamedBuffer)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY *MapNamedBufferEXT)(GLuint, GLenum);
    void *(KHRONOS_APIENTRY *MapNamedBufferRange)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY *MapNamedBufferRangeEXT)(GLuint, GLintptr, GLsizeiptr, GLbitfield);
    void *(KHRONOS_APIENTRY *MapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY *MapParameterfvNV)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MapParameterivNV)(GLenum, GLenum, const GLint *);
    void *(KHRONOS_APIENTRY *MapTexture2DINTEL)(GLuint, GLint, GLbitfield, GLint *, GLenum *);
    void (KHRONOS_APIENTRY *MapVertexAttrib1dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *MapVertexAttrib1fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *MapVertexAttrib2dAPPLE)(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *MapVertexAttrib2fAPPLE)(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *Materialf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *Materialfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Materiali)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *Materialiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Materialx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *MaterialxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *Materialxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MaterialxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MatrixFrustumEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixIndexPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *MatrixIndexPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *MatrixIndexubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY *MatrixIndexuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY *MatrixIndexusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY *MatrixLoad3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoad3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoadIdentityEXT)(GLenum);
    void (KHRONOS_APIENTRY *MatrixLoadTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoadTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixLoadTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixLoaddEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixLoadfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMode)(GLenum);
    void (KHRONOS_APIENTRY *MatrixMult3x2fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMult3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMultTranspose3x3fNV)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMultTransposedEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixMultTransposefEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixMultdEXT)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MatrixMultfEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MatrixOrthoEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixPopEXT)(GLenum);
    void (KHRONOS_APIENTRY *MatrixPushEXT)(GLenum);
    void (KHRONOS_APIENTRY *MatrixRotatedEXT)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixRotatefEXT)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MatrixScaledEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixScalefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MatrixTranslatedEXT)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MatrixTranslatefEXT)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MaxShaderCompilerThreadsARB)(GLuint);
    void (KHRONOS_APIENTRY *MaxShaderCompilerThreadsKHR)(GLuint);
    void (KHRONOS_APIENTRY *MemoryBarrier)(GLbitfield);
    void (KHRONOS_APIENTRY *MemoryBarrierByRegion)(GLbitfield);
    void (KHRONOS_APIENTRY *MemoryBarrierEXT)(GLbitfield);
    void (KHRONOS_APIENTRY *MemoryObjectParameterivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MinSampleShading)(GLfloat);
    void (KHRONOS_APIENTRY *MinSampleShadingARB)(GLfloat);
    void (KHRONOS_APIENTRY *MinSampleShadingOES)(GLfloat);
    void (KHRONOS_APIENTRY *Minmax)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *MinmaxEXT)(GLenum, GLenum, GLboolean);
    void (KHRONOS_APIENTRY *MultMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *MultMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *MultMatrixx)(const GLfixed *);
    void (KHRONOS_APIENTRY *MultMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixd)(const GLdouble *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixdARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixf)(const GLfloat *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixfARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *MultTransposeMatrixxOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *MultiDrawArrays)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysEXT)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirect)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectAMD)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectBindlessCountNV)(GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectBindlessNV)(GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectCount)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectCountARB)(GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawArraysIndirectEXT)(GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementArrayAPPLE)(GLenum, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElements)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsBaseVertex)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *MultiDrawElementsBaseVertexEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *MultiDrawElementsEXT)(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirect)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectAMD)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectBindlessCountNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectBindlessNV)(GLenum, GLenum, const void *, GLsizei, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectCount)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectCountARB)(GLenum, GLenum, const void *, GLintptr, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawElementsIndirectEXT)(GLenum, GLenum, const void *, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MultiDrawRangeElementArrayAPPLE)(GLenum, GLuint, GLuint, const GLint *, const GLsizei *, GLsizei);
    void (KHRONOS_APIENTRY *MultiModeDrawArraysIBM)(const GLenum *, const GLint *, const GLsizei *, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiModeDrawElementsIBM)(const GLenum *, const GLsizei *, GLenum, const void *const*, GLsizei, GLint);
    void (KHRONOS_APIENTRY *MultiTexBufferEXT)(GLenum, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoord1bOES)(GLenum, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord1bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord1d)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord1dARB)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord1dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord1dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord1f)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord1fARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord1fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord1fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord1hNV)(GLenum, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord1hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord1i)(GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord1iARB)(GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord1iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord1ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord1s)(GLenum, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord1sARB)(GLenum, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord1sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord1svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord1xOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord1xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoord2bOES)(GLenum, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord2bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord2d)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord2dARB)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord2dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord2dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord2f)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord2fARB)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord2fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord2fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord2hNV)(GLenum, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord2hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord2i)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord2iARB)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord2iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord2ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord2s)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord2sARB)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord2sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord2svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord2xOES)(GLenum, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord2xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoord3bOES)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord3bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord3d)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord3dARB)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord3dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord3dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord3f)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord3fARB)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord3fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord3fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord3hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord3hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord3i)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord3iARB)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord3iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord3ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord3s)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord3sARB)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord3sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord3svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord3xOES)(GLenum, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord3xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoord4bOES)(GLenum, GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *MultiTexCoord4bvOES)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *MultiTexCoord4d)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord4dARB)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexCoord4dv)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord4dvARB)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexCoord4f)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord4fARB)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexCoord4fv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord4fvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexCoord4hNV)(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *MultiTexCoord4hvNV)(GLenum, const GLhalfNV *);
    void (KHRONOS_APIENTRY *MultiTexCoord4i)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord4iARB)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *MultiTexCoord4iv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord4ivARB)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexCoord4s)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord4sARB)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *MultiTexCoord4sv)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord4svARB)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *MultiTexCoord4x)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord4xOES)(GLenum, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *MultiTexCoord4xvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *MultiTexCoordP1ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP1uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordP2ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP2uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordP3ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP3uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordP4ui)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexCoordP4uiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexCoordPointerEXT)(GLenum, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *MultiTexEnvfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexEnvfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexEnviEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexEnvivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexGendEXT)(GLenum, GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY *MultiTexGendvEXT)(GLenum, GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *MultiTexGenfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexGenfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexGeniEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexGenivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexImage2DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexImage3DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexParameterIivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexParameterIuivEXT)(GLenum, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *MultiTexParameterfEXT)(GLenum, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *MultiTexParameterfvEXT)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *MultiTexParameteriEXT)(GLenum, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *MultiTexParameterivEXT)(GLenum, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *MultiTexRenderbufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *MultiTexSubImage1DEXT)(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexSubImage2DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MultiTexSubImage3DEXT)(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *MulticastBarrierNV)(void);
    void (KHRONOS_APIENTRY *MulticastBlitFramebufferNV)(GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum);
    void (KHRONOS_APIENTRY *MulticastBufferSubDataNV)(GLbitfield, GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *MulticastCopyBufferSubDataNV)(GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *MulticastCopyImageSubDataNV)(GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *MulticastFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjecti64vNV)(GLuint, GLuint, GLenum, GLint64 *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjectivNV)(GLuint, GLuint, GLenum, GLint *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjectui64vNV)(GLuint, GLuint, GLenum, GLuint64 *);
    void (KHRONOS_APIENTRY *MulticastGetQueryObjectuivNV)(GLuint, GLuint, GLenum, GLuint *);
    void (KHRONOS_APIENTRY *MulticastWaitSyncNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferData)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY *NamedBufferDataEXT)(GLuint, GLsizeiptr, const void *, GLenum);
    void (KHRONOS_APIENTRY *NamedBufferPageCommitmentARB)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY *NamedBufferPageCommitmentEXT)(GLuint, GLintptr, GLsizeiptr, GLboolean);
    void (KHRONOS_APIENTRY *NamedBufferStorage)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferStorageEXT)(GLuint, GLsizeiptr, const void *, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferStorageExternalEXT)(GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield);
    void (KHRONOS_APIENTRY *NamedBufferStorageMemEXT)(GLuint, GLsizeiptr, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *NamedBufferSubData)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *NamedBufferSubDataEXT)(GLuint, GLintptr, GLsizeiptr, const void *);
    void (KHRONOS_APIENTRY *NamedCopyBufferSubDataEXT)(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *NamedFramebufferDrawBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *NamedFramebufferDrawBuffers)(GLuint, GLsizei, const GLenum *);
    void (KHRONOS_APIENTRY *NamedFramebufferParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferReadBuffer)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *NamedFramebufferRenderbuffer)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *NamedFramebufferRenderbufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *NamedFramebufferSampleLocationsfvARB)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedFramebufferSampleLocationsfvNV)(GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedFramebufferSamplePositionsfvAMD)(GLuint, GLuint, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture1DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture2DEXT)(GLuint, GLenum, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTexture3DEXT)(GLuint, GLenum, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureEXT)(GLuint, GLenum, GLuint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureFaceEXT)(GLuint, GLenum, GLuint, GLint, GLenum);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureLayer)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedFramebufferTextureLayerEXT)(GLuint, GLenum, GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4dEXT)(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4dvEXT)(GLuint, GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4fEXT)(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameter4fvEXT)(GLuint, GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4iEXT)(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4ivEXT)(GLuint, GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4uiEXT)(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameterI4uivEXT)(GLuint, GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParameters4fvEXT)(GLuint, GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParametersI4ivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *NamedProgramLocalParametersI4uivEXT)(GLuint, GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *NamedProgramStringEXT)(GLuint, GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorage)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageEXT)(GLuint, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageMultisampleCoverageEXT)(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedRenderbufferStorageMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *NamedStringARB)(GLenum, GLint, const GLchar *, GLint, const GLchar *);
    GLuint(KHRONOS_APIENTRY *NewBufferRegion)(GLenum);
    void (KHRONOS_APIENTRY *NewList)(GLuint, GLenum);
    GLuint(KHRONOS_APIENTRY *NewObjectBufferATI)(GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY *Normal3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Normal3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *Normal3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Normal3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Normal3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Normal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Normal3fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Normal3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Normal3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Normal3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Normal3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Normal3iv)(const GLint *);
    void (KHRONOS_APIENTRY *Normal3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Normal3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Normal3x)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Normal3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Normal3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *NormalFormatNV)(GLenum, GLsizei);
    void (KHRONOS_APIENTRY *NormalP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *NormalP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *NormalPointer)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *NormalPointerEXT)(GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *NormalPointerListIBM)(GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *NormalPointervINTEL)(GLenum, const void **);
    void (KHRONOS_APIENTRY *NormalStream3bATI)(GLenum, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *NormalStream3bvATI)(GLenum, const GLbyte *);
    void (KHRONOS_APIENTRY *NormalStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *NormalStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *NormalStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *NormalStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *NormalStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *NormalStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *NormalStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *NormalStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *ObjectLabel)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *ObjectLabelKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *ObjectPtrLabel)(const void *, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *ObjectPtrLabelKHR)(const void *, GLsizei, const GLchar *);
    GLenum(KHRONOS_APIENTRY *ObjectPurgeableAPPLE)(GLenum, GLuint, GLenum);
    GLenum(KHRONOS_APIENTRY *ObjectUnpurgeableAPPLE)(GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY *Ortho)(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Orthof)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *OrthofOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Orthox)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *OrthoxOES)(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *PNTrianglesfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PNTrianglesiATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PassTexCoordATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY *PassThrough)(GLfloat);
    void (KHRONOS_APIENTRY *PassThroughxOES)(GLfixed);
    void (KHRONOS_APIENTRY *PatchParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PatchParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PatchParameteriEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PatchParameteriOES)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PathColorGenNV)(GLenum, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PathCommandsNV)(GLuint, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathCoordsNV)(GLuint, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathCoverDepthFuncNV)(GLenum);
    void (KHRONOS_APIENTRY *PathDashArrayNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *PathFogGenNV)(GLenum);
    GLenum(KHRONOS_APIENTRY *PathGlyphIndexArrayNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY *PathGlyphIndexRangeNV)(GLenum, const void *, GLbitfield, GLuint, GLfloat, GLuint[2]);
    void (KHRONOS_APIENTRY *PathGlyphRangeNV)(GLuint, GLenum, const void *, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat);
    void (KHRONOS_APIENTRY *PathGlyphsNV)(GLuint, GLenum, const void *, GLbitfield, GLsizei, GLenum, const void *, GLenum, GLuint, GLfloat);
    GLenum(KHRONOS_APIENTRY *PathMemoryGlyphIndexArrayNV)(GLuint, GLenum, GLsizeiptr, const void *, GLsizei, GLuint, GLsizei, GLuint, GLfloat);
    void (KHRONOS_APIENTRY *PathParameterfNV)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PathParameterfvNV)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PathParameteriNV)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *PathParameterivNV)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PathStencilDepthOffsetNV)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PathStencilFuncNV)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *PathStringNV)(GLuint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *PathSubCommandsNV)(GLuint, GLsizei, GLsizei, GLsizei, const GLubyte *, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathSubCoordsNV)(GLuint, GLsizei, GLsizei, GLenum, const void *);
    void (KHRONOS_APIENTRY *PathTexGenNV)(GLenum, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *PauseTransformFeedback)(void);
    void (KHRONOS_APIENTRY *PauseTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY *PixelDataRangeNV)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *PixelMapfv)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *PixelMapuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *PixelMapusv)(GLenum, GLsizei, const GLushort *);
    void (KHRONOS_APIENTRY *PixelMapx)(GLenum, GLint, const GLfixed *);
    void (KHRONOS_APIENTRY *PixelStoref)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelStorei)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelStorex)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PixelTexGenParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelTexGenParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PixelTexGenParameteriSGIS)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelTexGenParameterivSGIS)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PixelTexGenSGIX)(GLenum);
    void (KHRONOS_APIENTRY *PixelTransferf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelTransferi)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelTransferxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PixelTransformParameterfEXT)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PixelTransformParameterfvEXT)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PixelTransformParameteriEXT)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *PixelTransformParameterivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PixelZoom)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PixelZoomxOES)(GLfixed, GLfixed);
    GLboolean(KHRONOS_APIENTRY *PointAlongPathNV)(GLuint, GLsizei, GLsizei, GLfloat, GLfloat *, GLfloat *, GLfloat *, GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterf)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfARB)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfEXT)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfSGIS)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *PointParameterfv)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterfvARB)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterfvEXT)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameterfvSGIS)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *PointParameteri)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PointParameteriNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *PointParameteriv)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PointParameterivNV)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *PointParameterx)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PointParameterxOES)(GLenum, GLfixed);
    void (KHRONOS_APIENTRY *PointParameterxv)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *PointParameterxvOES)(GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *PointSize)(GLfloat);
    void (KHRONOS_APIENTRY *PointSizePointerOES)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *PointSizex)(GLfixed);
    void (KHRONOS_APIENTRY *PointSizexOES)(GLfixed);
    GLint(KHRONOS_APIENTRY *PollAsyncSGIX)(GLuint *);
    GLint(KHRONOS_APIENTRY *PollInstrumentsSGIX)(GLint *);
    void (KHRONOS_APIENTRY *PolygonMode)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *PolygonModeNV)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *PolygonOffset)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetClamp)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetClampEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetEXT)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PolygonOffsetx)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *PolygonOffsetxOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *PolygonStipple)(const GLubyte *);
    void (KHRONOS_APIENTRY *PopAttrib)(void);
    void (KHRONOS_APIENTRY *PopClientAttrib)(void);
    void (KHRONOS_APIENTRY *PopDebugGroup)(void);
    void (KHRONOS_APIENTRY *PopDebugGroupKHR)(void);
    void (KHRONOS_APIENTRY *PopGroupMarkerEXT)(void);
    void (KHRONOS_APIENTRY *PopMatrix)(void);
    void (KHRONOS_APIENTRY *PopName)(void);
    void (KHRONOS_APIENTRY *PresentFrameDualFillNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *PresentFrameKeyedNV)(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBox)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBoxARB)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBoxEXT)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveBoundingBoxOES)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *PrimitiveRestartIndex)(GLuint);
    void (KHRONOS_APIENTRY *PrimitiveRestartIndexNV)(GLuint);
    void (KHRONOS_APIENTRY *PrimitiveRestartNV)(void);
    void (KHRONOS_APIENTRY *PrioritizeTextures)(GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY *PrioritizeTexturesEXT)(GLsizei, const GLuint *, const GLclampf *);
    void (KHRONOS_APIENTRY *PrioritizeTexturesxOES)(GLsizei, const GLuint *, const GLfixed *);
    void (KHRONOS_APIENTRY *ProgramBinary)(GLuint, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *ProgramBinaryOES)(GLuint, GLenum, const void *, GLint);
    void (KHRONOS_APIENTRY *ProgramBufferParametersIivNV)(GLenum, GLuint, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramBufferParametersIuivNV)(GLenum, GLuint, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramBufferParametersfvNV)(GLenum, GLuint, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramEnvParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramEnvParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramEnvParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramEnvParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramEnvParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4dARB)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4dvARB)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4fARB)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramLocalParameter4fvARB)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4iNV)(GLenum, GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4ivNV)(GLenum, GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4uiNV)(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramLocalParameterI4uivNV)(GLenum, GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramLocalParameters4fvEXT)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramLocalParametersI4ivNV)(GLenum, GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramLocalParametersI4uivNV)(GLenum, GLuint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4dNV)(GLuint, GLsizei, const GLubyte *, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4dvNV)(GLuint, GLsizei, const GLubyte *, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4fNV)(GLuint, GLsizei, const GLubyte *, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramNamedParameter4fvNV)(GLuint, GLsizei, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramParameter4dNV)(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramParameter4dvNV)(GLenum, GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramParameter4fNV)(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramParameter4fvNV)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ProgramParameteriARB)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ProgramParameteriEXT)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *ProgramParameters4dvNV)(GLenum, GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramParameters4fvNV)(GLenum, GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramPathFragmentInputGenNV)(GLuint, GLint, GLenum, GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramStringARB)(GLenum, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *ProgramSubroutineParametersuivNV)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform1d)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform1dEXT)(GLuint, GLint, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform1dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform1dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform1f)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform1fEXT)(GLuint, GLint, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform1fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform1fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform1i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform1i64ARB)(GLuint, GLint, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform1i64NV)(GLuint, GLint, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform1i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform1i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform1iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform1iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform1ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform1ui)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform1ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform1uiEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform1uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform1uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform2d)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform2dEXT)(GLuint, GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform2dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform2dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform2f)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform2fEXT)(GLuint, GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform2fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform2fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform2i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform2i64ARB)(GLuint, GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform2i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform2i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform2i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform2iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform2iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform2ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform2ui)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64ARB)(GLuint, GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform2ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform2uiEXT)(GLuint, GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform2uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform2uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform3d)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform3dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform3dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform3dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform3f)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform3fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform3fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform3fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform3i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform3i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform3i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform3i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform3i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform3iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform3iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform3ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform3ui)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform3ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform3uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform3uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform3uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform4d)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform4dEXT)(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *ProgramUniform4dv)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform4dvEXT)(GLuint, GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniform4f)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform4fEXT)(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ProgramUniform4fv)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform4fvEXT)(GLuint, GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniform4i)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform4i64ARB)(GLuint, GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *ProgramUniform4i64NV)(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform4i64vARB)(GLuint, GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform4i64vNV)(GLuint, GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform4iEXT)(GLuint, GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *ProgramUniform4iv)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform4ivEXT)(GLuint, GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ProgramUniform4ui)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64ARB)(GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64NV)(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniform4ui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramUniform4uiEXT)(GLuint, GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ProgramUniform4uiv)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniform4uivEXT)(GLuint, GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64ARB)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64IMG)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64NV)(GLuint, GLint, GLuint64);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64vARB)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64vIMG)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniformHandleui64vNV)(GLuint, GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix2x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix3x4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x2fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3dv)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3dvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3fv)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformMatrix4x3fvEXT)(GLuint, GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *ProgramUniformui64NV)(GLuint, GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *ProgramUniformui64vNV)(GLuint, GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *ProgramVertexLimitNV)(GLenum, GLint);
    void (KHRONOS_APIENTRY *ProvokingVertex)(GLenum);
    void (KHRONOS_APIENTRY *ProvokingVertexEXT)(GLenum);
    void (KHRONOS_APIENTRY *PushAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY *PushClientAttrib)(GLbitfield);
    void (KHRONOS_APIENTRY *PushClientAttribDefaultEXT)(GLbitfield);
    void (KHRONOS_APIENTRY *PushDebugGroup)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *PushDebugGroupKHR)(GLenum, GLuint, GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *PushGroupMarkerEXT)(GLsizei, const GLchar *);
    void (KHRONOS_APIENTRY *PushMatrix)(void);
    void (KHRONOS_APIENTRY *PushName)(GLuint);
    void (KHRONOS_APIENTRY *QueryCounter)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *QueryCounterEXT)(GLuint, GLenum);
    GLbitfield(KHRONOS_APIENTRY *QueryMatrixxOES)(GLfixed *, GLint *);
    void (KHRONOS_APIENTRY *QueryObjectParameteruiAMD)(GLenum, GLuint, GLenum, GLuint);
    GLint(KHRONOS_APIENTRY *QueryResourceNV)(GLenum, GLint, GLuint, GLint *);
    void (KHRONOS_APIENTRY *QueryResourceTagNV)(GLint, const GLchar *);
    void (KHRONOS_APIENTRY *RasterPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *RasterPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *RasterPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *RasterPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *RasterPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *RasterPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY *RasterPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *RasterPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *RasterPos2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RasterPos2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *RasterPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *RasterPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *RasterPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *RasterPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *RasterPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *RasterPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY *RasterPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *RasterPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *RasterPos3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RasterPos3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *RasterPos4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *RasterPos4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *RasterPos4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *RasterPos4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *RasterPos4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *RasterPos4iv)(const GLint *);
    void (KHRONOS_APIENTRY *RasterPos4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *RasterPos4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *RasterPos4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RasterPos4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *RasterSamplesEXT)(GLuint, GLboolean);
    void (KHRONOS_APIENTRY *ReadBuffer)(GLenum);
    void (KHRONOS_APIENTRY *ReadBufferIndexedEXT)(GLenum, GLint);
    void (KHRONOS_APIENTRY *ReadBufferNV)(GLenum);
    void (KHRONOS_APIENTRY *ReadBufferRegion)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ReadInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY *ReadPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *);
    void (KHRONOS_APIENTRY *ReadnPixels)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *ReadnPixelsARB)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *ReadnPixelsEXT)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *ReadnPixelsKHR)(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *);
    void (KHRONOS_APIENTRY *Rectd)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Rectdv)(const GLdouble *, const GLdouble *);
    void (KHRONOS_APIENTRY *Rectf)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Rectfv)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *Recti)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Rectiv)(const GLint *, const GLint *);
    void (KHRONOS_APIENTRY *Rects)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Rectsv)(const GLshort *, const GLshort *);
    void (KHRONOS_APIENTRY *RectxOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RectxvOES)(const GLfixed *, const GLfixed *);
    void (KHRONOS_APIENTRY *ReferencePlaneSGIX)(const GLdouble *);
    GLboolean(KHRONOS_APIENTRY *ReleaseKeyedMutexWin32EXT)(GLuint, GLuint64);
    void (KHRONOS_APIENTRY *ReleaseShaderCompiler)(void);
    void (KHRONOS_APIENTRY *RenderGpuMaskNV)(GLbitfield);
    GLint(KHRONOS_APIENTRY *RenderMode)(GLenum);
    void (KHRONOS_APIENTRY *RenderbufferStorage)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleANGLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleAPPLE)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleIMG)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageMultisampleNV)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *RenderbufferStorageOES)(GLenum, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ReplacementCodePointerSUN)(GLenum, GLsizei, const void **);
    void (KHRONOS_APIENTRY *ReplacementCodeubSUN)(GLubyte);
    void (KHRONOS_APIENTRY *ReplacementCodeubvSUN)(const GLubyte *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4ubVertex3fSUN)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiColor4ubVertex3fvSUN)(const GLuint *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiSUN)(GLuint);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiTexCoord2fVertex3fvSUN)(const GLuint *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuiVertex3fSUN)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ReplacementCodeuiVertex3fvSUN)(const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY *ReplacementCodeuivSUN)(const GLuint *);
    void (KHRONOS_APIENTRY *ReplacementCodeusSUN)(GLushort);
    void (KHRONOS_APIENTRY *ReplacementCodeusvSUN)(const GLushort *);
    void (KHRONOS_APIENTRY *RequestResidentProgramsNV)(GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *ResetHistogram)(GLenum);
    void (KHRONOS_APIENTRY *ResetHistogramEXT)(GLenum);
    void (KHRONOS_APIENTRY *ResetMinmax)(GLenum);
    void (KHRONOS_APIENTRY *ResetMinmaxEXT)(GLenum);
    void (KHRONOS_APIENTRY *ResizeBuffersMESA)(void);
    void (KHRONOS_APIENTRY *ResolveDepthValuesNV)(void);
    void (KHRONOS_APIENTRY *ResolveMultisampleFramebufferAPPLE)(void);
    void (KHRONOS_APIENTRY *ResumeTransformFeedback)(void);
    void (KHRONOS_APIENTRY *ResumeTransformFeedbackNV)(void);
    void (KHRONOS_APIENTRY *Rotated)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Rotatef)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Rotatex)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *RotatexOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *SampleCoverage)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY *SampleCoverageARB)(GLfloat, GLboolean);
    void (KHRONOS_APIENTRY *SampleCoveragex)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY *SampleCoveragexOES)(GLclampx, GLboolean);
    void (KHRONOS_APIENTRY *SampleMapATI)(GLuint, GLuint, GLenum);
    void (KHRONOS_APIENTRY *SampleMaskEXT)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY *SampleMaskIndexedNV)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *SampleMaskSGIS)(GLclampf, GLboolean);
    void (KHRONOS_APIENTRY *SampleMaski)(GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *SamplePatternEXT)(GLenum);
    void (KHRONOS_APIENTRY *SamplePatternSGIS)(GLenum);
    void (KHRONOS_APIENTRY *SamplerParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *SamplerParameterIivEXT)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *SamplerParameterIivOES)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *SamplerParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SamplerParameterIuivEXT)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SamplerParameterIuivOES)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SamplerParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *SamplerParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *SamplerParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *SamplerParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Scaled)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Scalef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Scalex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *ScalexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Scissor)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorArrayv)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ScissorArrayvNV)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ScissorArrayvOES)(GLuint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *ScissorIndexed)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorIndexedNV)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorIndexedOES)(GLuint, GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ScissorIndexedv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ScissorIndexedvNV)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *ScissorIndexedvOES)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *SecondaryColor3b)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *SecondaryColor3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *SecondaryColor3bv)(const GLbyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *SecondaryColor3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *SecondaryColor3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *SecondaryColor3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *SecondaryColor3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *SecondaryColor3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *SecondaryColor3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *SecondaryColor3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *SecondaryColor3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *SecondaryColor3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *SecondaryColor3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *SecondaryColor3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *SecondaryColor3iv)(const GLint *);
    void (KHRONOS_APIENTRY *SecondaryColor3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY *SecondaryColor3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *SecondaryColor3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *SecondaryColor3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *SecondaryColor3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY *SecondaryColor3ub)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *SecondaryColor3ubEXT)(GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *SecondaryColor3ubv)(const GLubyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3ubvEXT)(const GLubyte *);
    void (KHRONOS_APIENTRY *SecondaryColor3ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *SecondaryColor3uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *SecondaryColor3uiv)(const GLuint *);
    void (KHRONOS_APIENTRY *SecondaryColor3uivEXT)(const GLuint *);
    void (KHRONOS_APIENTRY *SecondaryColor3us)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *SecondaryColor3usEXT)(GLushort, GLushort, GLushort);
    void (KHRONOS_APIENTRY *SecondaryColor3usv)(const GLushort *);
    void (KHRONOS_APIENTRY *SecondaryColor3usvEXT)(const GLushort *);
    void (KHRONOS_APIENTRY *SecondaryColorFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *SecondaryColorP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *SecondaryColorP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *SecondaryColorPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *SecondaryColorPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *SecondaryColorPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *SelectBuffer)(GLsizei, GLuint *);
    void (KHRONOS_APIENTRY *SelectPerfMonitorCountersAMD)(GLuint, GLboolean, GLuint, GLint, GLuint *);
    void (KHRONOS_APIENTRY *SemaphoreParameterui64vEXT)(GLuint, GLenum, const GLuint64 *);
    void (KHRONOS_APIENTRY *SeparableFilter2D)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY *SeparableFilter2DEXT)(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, const void *, const void *);
    void (KHRONOS_APIENTRY *SetFenceAPPLE)(GLuint);
    void (KHRONOS_APIENTRY *SetFenceNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *SetFragmentShaderConstantATI)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *SetInvariantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY *SetLocalConstantEXT)(GLuint, GLenum, const void *);
    void (KHRONOS_APIENTRY *SetMultisamplefvAMD)(GLenum, GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ShadeModel)(GLenum);
    void (KHRONOS_APIENTRY *ShaderBinary)(GLsizei, const GLuint *, GLenum, const void *, GLsizei);
    void (KHRONOS_APIENTRY *ShaderOp1EXT)(GLenum, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ShaderOp2EXT)(GLenum, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ShaderOp3EXT)(GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *ShaderSource)(GLuint, GLsizei, const GLchar *const*, const GLint *);
    void (KHRONOS_APIENTRY *ShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *);
    void (KHRONOS_APIENTRY *ShaderStorageBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *SharpenTexFuncSGIS)(GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *SignalSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY *SignalVkFenceNV)(GLuint64);
    void (KHRONOS_APIENTRY *SignalVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY *SpecializeShader)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY *SpecializeShaderARB)(GLuint, const GLchar *, GLuint, const GLuint *, const GLuint *);
    void (KHRONOS_APIENTRY *SpriteParameterfSGIX)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *SpriteParameterfvSGIX)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *SpriteParameteriSGIX)(GLenum, GLint);
    void (KHRONOS_APIENTRY *SpriteParameterivSGIX)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *StartInstrumentsSGIX)(void);
    void (KHRONOS_APIENTRY *StartTilingQCOM)(GLuint, GLuint, GLuint, GLuint, GLbitfield);
    void (KHRONOS_APIENTRY *StateCaptureNV)(GLuint, GLenum);
    void (KHRONOS_APIENTRY *StencilClearTagEXT)(GLsizei, GLuint);
    void (KHRONOS_APIENTRY *StencilFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilFillPathNV)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *StencilFunc)(GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilFuncSeparate)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilFuncSeparateATI)(GLenum, GLenum, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilMask)(GLuint);
    void (KHRONOS_APIENTRY *StencilMaskSeparate)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *StencilOp)(GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *StencilOpSeparate)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *StencilOpSeparateATI)(GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *StencilOpValueAMD)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *StencilStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilStrokePathNV)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *StencilThenCoverFillPathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLenum, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilThenCoverFillPathNV)(GLuint, GLenum, GLuint, GLenum);
    void (KHRONOS_APIENTRY *StencilThenCoverStrokePathInstancedNV)(GLsizei, GLenum, const void *, GLuint, GLint, GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *StencilThenCoverStrokePathNV)(GLuint, GLint, GLuint, GLenum);
    void (KHRONOS_APIENTRY *StopInstrumentsSGIX)(GLint);
    void (KHRONOS_APIENTRY *StringMarkerGREMEDY)(GLsizei, const void *);
    void (KHRONOS_APIENTRY *SubpixelPrecisionBiasNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *SwizzleEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *SyncTextureINTEL)(GLuint);
    void (KHRONOS_APIENTRY *TagSampleBufferSGIX)(void);
    void (KHRONOS_APIENTRY *Tangent3bEXT)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Tangent3bvEXT)(const GLbyte *);
    void (KHRONOS_APIENTRY *Tangent3dEXT)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Tangent3dvEXT)(const GLdouble *);
    void (KHRONOS_APIENTRY *Tangent3fEXT)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Tangent3fvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *Tangent3iEXT)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Tangent3ivEXT)(const GLint *);
    void (KHRONOS_APIENTRY *Tangent3sEXT)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Tangent3svEXT)(const GLshort *);
    void (KHRONOS_APIENTRY *TangentPointerEXT)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TbufferMask3DFX)(GLuint);
    void (KHRONOS_APIENTRY *TessellationFactorAMD)(GLfloat);
    void (KHRONOS_APIENTRY *TessellationModeAMD)(GLenum);
    GLboolean(KHRONOS_APIENTRY *TestFenceAPPLE)(GLuint);
    GLboolean(KHRONOS_APIENTRY *TestFenceNV)(GLuint);
    GLboolean(KHRONOS_APIENTRY *TestObjectAPPLE)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBuffer)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferARB)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferEXT)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferOES)(GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexBufferRange)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TexBufferRangeEXT)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TexBufferRangeOES)(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TexBumpParameterfvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexBumpParameterivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexCoord1bOES)(GLbyte);
    void (KHRONOS_APIENTRY *TexCoord1bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord1d)(GLdouble);
    void (KHRONOS_APIENTRY *TexCoord1dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord1f)(GLfloat);
    void (KHRONOS_APIENTRY *TexCoord1fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord1hNV)(GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord1hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord1i)(GLint);
    void (KHRONOS_APIENTRY *TexCoord1iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord1s)(GLshort);
    void (KHRONOS_APIENTRY *TexCoord1sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord1xOES)(GLfixed);
    void (KHRONOS_APIENTRY *TexCoord1xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoord2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *TexCoord2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *TexCoord2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fColor4fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor4fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fColor4ubVertex3fSUN)(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fColor4ubVertex3fvSUN)(const GLfloat *, const GLubyte *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fNormal3fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fNormal3fVertex3fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fVertex3fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord2fVertex3fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *TexCoord2iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *TexCoord2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord2xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TexCoord2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoord3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *TexCoord3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *TexCoord3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *TexCoord3iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *TexCoord3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord3xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TexCoord3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoord4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *TexCoord4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *TexCoord4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *TexCoord4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *TexCoord4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord4fColor4fNormal3fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord4fColor4fNormal3fVertex4fvSUN)(const GLfloat *, const GLfloat *, const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord4fVertex4fSUN)(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TexCoord4fVertex4fvSUN)(const GLfloat *, const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *TexCoord4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *TexCoord4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *TexCoord4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *TexCoord4iv)(const GLint *);
    void (KHRONOS_APIENTRY *TexCoord4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *TexCoord4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *TexCoord4xOES)(GLfixed, GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TexCoord4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *TexCoordFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TexCoordP1ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP1uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexCoordP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexCoordPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TexCoordPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TexCoordPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *TexCoordPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY *TexEnvf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexEnvfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexEnvi)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexEnviv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexEnvx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexEnvxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexEnvxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexEnvxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexFilterFuncSGIS)(GLenum, GLenum, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *TexGend)(GLenum, GLenum, GLdouble);
    void (KHRONOS_APIENTRY *TexGendv)(GLenum, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *TexGenf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexGenfOES)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexGenfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexGenfvOES)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexGeni)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexGeniOES)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexGeniv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexGenivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexGenxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexGenxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexImage1D)(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage2D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage2DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage3D)(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage3DEXT)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage3DMultisampleCoverageNV)(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexImage3DOES)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexImage4DSGIS)(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexPageCommitmentARB)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexPageCommitmentEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexParameterIiv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterIivEXT)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterIivOES)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterIuiv)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexParameterIuivEXT)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexParameterIuivOES)(GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TexParameterf)(GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TexParameterfv)(GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TexParameteri)(GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TexParameteriv)(GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TexParameterx)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexParameterxOES)(GLenum, GLenum, GLfixed);
    void (KHRONOS_APIENTRY *TexParameterxv)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexParameterxvOES)(GLenum, GLenum, const GLfixed *);
    void (KHRONOS_APIENTRY *TexRenderbufferNV)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *TexStorage1D)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage1DEXT)(GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage2D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage2DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexStorage3D)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TexStorage3DMultisample)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexStorage3DMultisampleOES)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TexStorageMem1DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem2DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem2DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem3DEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageMem3DMultisampleEXT)(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TexStorageSparseAMD)(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY *TexSubImage1D)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage1DEXT)(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage2D)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage2DEXT)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage3D)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage3DEXT)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage3DOES)(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TexSubImage4DSGIS)(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureBarrier)(void);
    void (KHRONOS_APIENTRY *TextureBarrierNV)(void);
    void (KHRONOS_APIENTRY *TextureBuffer)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TextureBufferEXT)(GLuint, GLenum, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TextureBufferRange)(GLuint, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TextureBufferRangeEXT)(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TextureColorMaskSGIS)(GLboolean, GLboolean, GLboolean, GLboolean);
    void (KHRONOS_APIENTRY *TextureFoveationParametersQCOM)(GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *TextureImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureImage2DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureImage2DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage2DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage3DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureImage3DMultisampleCoverageNV)(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureImage3DMultisampleNV)(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureLightEXT)(GLenum);
    void (KHRONOS_APIENTRY *TextureMaterialEXT)(GLenum, GLenum);
    void (KHRONOS_APIENTRY *TextureNormalEXT)(GLenum);
    void (KHRONOS_APIENTRY *TexturePageCommitmentEXT)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureParameterIiv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureParameterIivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureParameterIuiv)(GLuint, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TextureParameterIuivEXT)(GLuint, GLenum, GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *TextureParameterf)(GLuint, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TextureParameterfEXT)(GLuint, GLenum, GLenum, GLfloat);
    void (KHRONOS_APIENTRY *TextureParameterfv)(GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TextureParameterfvEXT)(GLuint, GLenum, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *TextureParameteri)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *TextureParameteriEXT)(GLuint, GLenum, GLenum, GLint);
    void (KHRONOS_APIENTRY *TextureParameteriv)(GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureParameterivEXT)(GLuint, GLenum, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *TextureRangeAPPLE)(GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *TextureRenderbufferEXT)(GLuint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *TextureStorage1D)(GLuint, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage1DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage2D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage2DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage2DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorage2DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorage3D)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage3DEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *TextureStorage3DMultisample)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorage3DMultisampleEXT)(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean);
    void (KHRONOS_APIENTRY *TextureStorageMem1DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem2DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem2DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem3DEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageMem3DMultisampleEXT)(GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64);
    void (KHRONOS_APIENTRY *TextureStorageSparseAMD)(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield);
    void (KHRONOS_APIENTRY *TextureSubImage1D)(GLuint, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage1DEXT)(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage2D)(GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage2DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage3D)(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureSubImage3DEXT)(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *);
    void (KHRONOS_APIENTRY *TextureView)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TextureViewEXT)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TextureViewOES)(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TrackMatrixNV)(GLenum, GLuint, GLenum, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackAttribsNV)(GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackBufferBase)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *TransformFeedbackBufferRange)(GLuint, GLuint, GLuint, GLintptr, GLsizeiptr);
    void (KHRONOS_APIENTRY *TransformFeedbackStreamAttribsNV)(GLsizei, const GLint *, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackVaryings)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackVaryingsEXT)(GLuint, GLsizei, const GLchar *const*, GLenum);
    void (KHRONOS_APIENTRY *TransformFeedbackVaryingsNV)(GLuint, GLsizei, const GLint *, GLenum);
    void (KHRONOS_APIENTRY *TransformPathNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *Translated)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Translatef)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Translatex)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *TranslatexOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Uniform1d)(GLint, GLdouble);
    void (KHRONOS_APIENTRY *Uniform1dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform1f)(GLint, GLfloat);
    void (KHRONOS_APIENTRY *Uniform1fARB)(GLint, GLfloat);
    void (KHRONOS_APIENTRY *Uniform1fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform1fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform1i)(GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform1i64ARB)(GLint, GLint64);
    void (KHRONOS_APIENTRY *Uniform1i64NV)(GLint, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform1i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform1i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform1iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform1iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform1ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform1ui)(GLint, GLuint);
    void (KHRONOS_APIENTRY *Uniform1ui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *Uniform1ui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform1ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform1ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform1uiEXT)(GLint, GLuint);
    void (KHRONOS_APIENTRY *Uniform1uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform1uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform2d)(GLint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Uniform2dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform2f)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform2fARB)(GLint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform2fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform2fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform2i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform2i64ARB)(GLint, GLint64, GLint64);
    void (KHRONOS_APIENTRY *Uniform2i64NV)(GLint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform2i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform2i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform2iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform2iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform2ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform2ui)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform2ui64ARB)(GLint, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *Uniform2ui64NV)(GLint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform2ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform2ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform2uiEXT)(GLint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform2uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform2uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform3d)(GLint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Uniform3dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform3f)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform3fARB)(GLint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform3fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform3fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform3i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform3i64ARB)(GLint, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *Uniform3i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform3i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform3i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform3iARB)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform3iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform3ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform3ui)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform3ui64ARB)(GLint, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *Uniform3ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform3ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform3ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform3uiEXT)(GLint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform3uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform3uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform4d)(GLint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Uniform4dv)(GLint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *Uniform4f)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Uniform4fv)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform4fvARB)(GLint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *Uniform4i)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform4i64ARB)(GLint, GLint64, GLint64, GLint64, GLint64);
    void (KHRONOS_APIENTRY *Uniform4i64NV)(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *Uniform4i64vARB)(GLint, GLsizei, const GLint64 *);
    void (KHRONOS_APIENTRY *Uniform4i64vNV)(GLint, GLsizei, const GLint64EXT *);
    void (KHRONOS_APIENTRY *Uniform4iARB)(GLint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Uniform4iv)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform4ivARB)(GLint, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *Uniform4ui)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform4ui64ARB)(GLint, GLuint64, GLuint64, GLuint64, GLuint64);
    void (KHRONOS_APIENTRY *Uniform4ui64NV)(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniform4ui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *Uniform4ui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *Uniform4uiEXT)(GLint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *Uniform4uiv)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniform4uivEXT)(GLint, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *UniformBlockBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *UniformBufferEXT)(GLuint, GLint, GLuint);
    void (KHRONOS_APIENTRY *UniformHandleui64ARB)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *UniformHandleui64IMG)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *UniformHandleui64NV)(GLint, GLuint64);
    void (KHRONOS_APIENTRY *UniformHandleui64vARB)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *UniformHandleui64vIMG)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *UniformHandleui64vNV)(GLint, GLsizei, const GLuint64 *);
    void (KHRONOS_APIENTRY *UniformMatrix2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix2x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix2x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix2x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix3x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix3x4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix3x4fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix4fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x2dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix4x2fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x2fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x3dv)(GLint, GLsizei, GLboolean, const GLdouble *);
    void (KHRONOS_APIENTRY *UniformMatrix4x3fv)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformMatrix4x3fvNV)(GLint, GLsizei, GLboolean, const GLfloat *);
    void (KHRONOS_APIENTRY *UniformSubroutinesuiv)(GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *Uniformui64NV)(GLint, GLuint64EXT);
    void (KHRONOS_APIENTRY *Uniformui64vNV)(GLint, GLsizei, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *UnlockArraysEXT)(void);
    GLboolean(KHRONOS_APIENTRY *UnmapBuffer)(GLenum);
    GLboolean(KHRONOS_APIENTRY *UnmapBufferARB)(GLenum);
    GLboolean(KHRONOS_APIENTRY *UnmapBufferOES)(GLenum);
    GLboolean(KHRONOS_APIENTRY *UnmapNamedBuffer)(GLuint);
    GLboolean(KHRONOS_APIENTRY *UnmapNamedBufferEXT)(GLuint);
    void (KHRONOS_APIENTRY *UnmapObjectBufferATI)(GLuint);
    void (KHRONOS_APIENTRY *UnmapTexture2DINTEL)(GLuint, GLint);
    void (KHRONOS_APIENTRY *UpdateObjectBufferATI)(GLuint, GLuint, GLsizei, const void *, GLenum);
    void (KHRONOS_APIENTRY *UseProgram)(GLuint);
    void (KHRONOS_APIENTRY *UseProgramObjectARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *UseProgramStages)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY *UseProgramStagesEXT)(GLuint, GLbitfield, GLuint);
    void (KHRONOS_APIENTRY *UseShaderProgramEXT)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VDPAUFiniNV)(void);
    void (KHRONOS_APIENTRY *VDPAUGetSurfaceivNV)(GLvdpauSurfaceNV, GLenum, GLsizei, GLsizei *, GLint *);
    void (KHRONOS_APIENTRY *VDPAUInitNV)(const void *, const void *);
    GLboolean(KHRONOS_APIENTRY *VDPAUIsSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY *VDPAUMapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY *VDPAURegisterOutputSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    GLvdpauSurfaceNV(KHRONOS_APIENTRY *VDPAURegisterVideoSurfaceNV)(const void *, GLenum, GLsizei, const GLuint *);
    void (KHRONOS_APIENTRY *VDPAUSurfaceAccessNV)(GLvdpauSurfaceNV, GLenum);
    void (KHRONOS_APIENTRY *VDPAUUnmapSurfacesNV)(GLsizei, const GLvdpauSurfaceNV *);
    void (KHRONOS_APIENTRY *VDPAUUnregisterSurfaceNV)(GLvdpauSurfaceNV);
    void (KHRONOS_APIENTRY *ValidateProgram)(GLuint);
    void (KHRONOS_APIENTRY *ValidateProgramARB)(GLhandleARB);
    void (KHRONOS_APIENTRY *ValidateProgramPipeline)(GLuint);
    void (KHRONOS_APIENTRY *ValidateProgramPipelineEXT)(GLuint);
    void (KHRONOS_APIENTRY *VariantArrayObjectATI)(GLuint, GLenum, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VariantPointerEXT)(GLuint, GLenum, GLuint, const void *);
    void (KHRONOS_APIENTRY *VariantbvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VariantdvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VariantfvEXT)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VariantivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VariantsvEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VariantubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VariantuivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VariantusvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *Vertex2bOES)(GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Vertex2bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *Vertex2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Vertex2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Vertex2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Vertex2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Vertex2hNV)(GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Vertex2hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Vertex2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *Vertex2iv)(const GLint *);
    void (KHRONOS_APIENTRY *Vertex2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *Vertex2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Vertex2xOES)(GLfixed);
    void (KHRONOS_APIENTRY *Vertex2xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *Vertex3bOES)(GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Vertex3bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *Vertex3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Vertex3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Vertex3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Vertex3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Vertex3hNV)(GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Vertex3hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Vertex3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Vertex3iv)(const GLint *);
    void (KHRONOS_APIENTRY *Vertex3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Vertex3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Vertex3xOES)(GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Vertex3xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *Vertex4bOES)(GLbyte, GLbyte, GLbyte, GLbyte);
    void (KHRONOS_APIENTRY *Vertex4bvOES)(const GLbyte *);
    void (KHRONOS_APIENTRY *Vertex4d)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *Vertex4dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *Vertex4f)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *Vertex4fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *Vertex4hNV)(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *Vertex4hvNV)(const GLhalfNV *);
    void (KHRONOS_APIENTRY *Vertex4i)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *Vertex4iv)(const GLint *);
    void (KHRONOS_APIENTRY *Vertex4s)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *Vertex4sv)(const GLshort *);
    void (KHRONOS_APIENTRY *Vertex4xOES)(GLfixed, GLfixed, GLfixed);
    void (KHRONOS_APIENTRY *Vertex4xvOES)(const GLfixed *);
    void (KHRONOS_APIENTRY *VertexArrayAttribBinding)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayAttribFormat)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayAttribIFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayAttribLFormat)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayBindVertexBufferEXT)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY *VertexArrayBindingDivisor)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayEdgeFlagOffsetEXT)(GLuint, GLuint, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayElementBuffer)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayFogCoordOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayIndexOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayMultiTexCoordOffsetEXT)(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayNormalOffsetEXT)(GLuint, GLuint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayParameteriAPPLE)(GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexArrayRangeAPPLE)(GLsizei, void *);
    void (KHRONOS_APIENTRY *VertexArrayRangeNV)(GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexArraySecondaryColorOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayTexCoordOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribBindingEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribFormatEXT)(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribIFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribIOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribLFormatEXT)(GLuint, GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribLOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexAttribOffsetEXT)(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexArrayVertexBindingDivisorEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexArrayVertexBuffer)(GLuint, GLuint, GLuint, GLintptr, GLsizei);
    void (KHRONOS_APIENTRY *VertexArrayVertexBuffers)(GLuint, GLuint, GLsizei, const GLuint *, const GLintptr *, const GLsizei *);
    void (KHRONOS_APIENTRY *VertexArrayVertexOffsetEXT)(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr);
    void (KHRONOS_APIENTRY *VertexAttrib1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib1dARB)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib1dNV)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib1dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib1dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib1f)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib1fARB)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib1fNV)(GLuint, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib1fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib1fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib1fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib1hNV)(GLuint, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib1hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib1s)(GLuint, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib1sARB)(GLuint, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib1sNV)(GLuint, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib1sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib1svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib1svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib2dARB)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib2dNV)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib2dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib2dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib2f)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib2fARB)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib2fNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib2fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib2fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib2fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib2hNV)(GLuint, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib2hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib2s)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib2sARB)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib2sNV)(GLuint, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib2sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib2svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib2svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib3dARB)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib3dNV)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib3dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib3dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib3f)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib3fARB)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib3fNV)(GLuint, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib3fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib3fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib3fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib3hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib3hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib3s)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib3sARB)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib3sNV)(GLuint, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib3sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib3svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib3svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nbv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4NbvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4Niv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4NivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nsv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4NsvARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nub)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *VertexAttrib4NubARB)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *VertexAttrib4Nubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4NubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nuiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4NuivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4Nusv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttrib4NusvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttrib4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4bvARB)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib4dARB)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib4dNV)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttrib4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib4dvARB)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib4dvNV)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttrib4f)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib4fARB)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib4fNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexAttrib4fv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib4fvARB)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib4fvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttrib4hNV)(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV);
    void (KHRONOS_APIENTRY *VertexAttrib4hvNV)(GLuint, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttrib4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4ivARB)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttrib4s)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib4sARB)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib4sNV)(GLuint, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexAttrib4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4svARB)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4svNV)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttrib4ubNV)(GLuint, GLubyte, GLubyte, GLubyte, GLubyte);
    void (KHRONOS_APIENTRY *VertexAttrib4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4ubvARB)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4ubvNV)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttrib4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4uivARB)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttrib4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttrib4usvARB)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttribArrayObjectATI)(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribBinding)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorANGLE)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorARB)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribDivisorNV)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribFormat)(GLuint, GLint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribFormatNV)(GLuint, GLint, GLenum, GLboolean, GLsizei);
    void (KHRONOS_APIENTRY *VertexAttribI1i)(GLuint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI1iEXT)(GLuint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI1iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI1ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI1ui)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI1uiEXT)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI1uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI1uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI2i)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI2iEXT)(GLuint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI2iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI2ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI2ui)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI2uiEXT)(GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI2uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI2uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI3i)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI3iEXT)(GLuint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI3iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI3ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI3ui)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI3uiEXT)(GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI3uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI3uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI4bv)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4bvEXT)(GLuint, const GLbyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4i)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI4iEXT)(GLuint, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexAttribI4iv)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI4ivEXT)(GLuint, const GLint *);
    void (KHRONOS_APIENTRY *VertexAttribI4sv)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribI4svEXT)(GLuint, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribI4ubv)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4ubvEXT)(GLuint, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexAttribI4ui)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI4uiEXT)(GLuint, GLuint, GLuint, GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribI4uiv)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI4uivEXT)(GLuint, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribI4usv)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttribI4usvEXT)(GLuint, const GLushort *);
    void (KHRONOS_APIENTRY *VertexAttribIFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribIFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *VertexAttribIPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribIPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribL1d)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL1dEXT)(GLuint, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL1dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL1dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL1i64NV)(GLuint, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL1i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64ARB)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64NV)(GLuint, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64vARB)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL1ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL2d)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL2dEXT)(GLuint, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL2dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL2dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL2i64NV)(GLuint, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL2i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL2ui64NV)(GLuint, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL2ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL3d)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL3dEXT)(GLuint, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL3dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL3dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL3i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL3i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL3ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL3ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL4d)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL4dEXT)(GLuint, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexAttribL4dv)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL4dvEXT)(GLuint, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribL4i64NV)(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL4i64vNV)(GLuint, const GLint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribL4ui64NV)(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT);
    void (KHRONOS_APIENTRY *VertexAttribL4ui64vNV)(GLuint, const GLuint64EXT *);
    void (KHRONOS_APIENTRY *VertexAttribLFormat)(GLuint, GLint, GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribLFormatNV)(GLuint, GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *VertexAttribLPointer)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribLPointerEXT)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribP1ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP1uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribP2ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP2uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribP3ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP3uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribP4ui)(GLuint, GLenum, GLboolean, GLuint);
    void (KHRONOS_APIENTRY *VertexAttribP4uiv)(GLuint, GLenum, GLboolean, const GLuint *);
    void (KHRONOS_APIENTRY *VertexAttribParameteriAMD)(GLuint, GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexAttribPointer)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribPointerARB)(GLuint, GLint, GLenum, GLboolean, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribPointerNV)(GLuint, GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexAttribs1dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs1fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs1hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs1svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs2dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs2fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs2hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs2svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs3dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs3fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs3hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs3svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs4dvNV)(GLuint, GLsizei, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexAttribs4fvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexAttribs4hvNV)(GLuint, GLsizei, const GLhalfNV *);
    void (KHRONOS_APIENTRY *VertexAttribs4svNV)(GLuint, GLsizei, const GLshort *);
    void (KHRONOS_APIENTRY *VertexAttribs4ubvNV)(GLuint, GLsizei, const GLubyte *);
    void (KHRONOS_APIENTRY *VertexBindingDivisor)(GLuint, GLuint);
    void (KHRONOS_APIENTRY *VertexBlendARB)(GLint);
    void (KHRONOS_APIENTRY *VertexBlendEnvfATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *VertexBlendEnviATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexFormatNV)(GLint, GLenum, GLsizei);
    void (KHRONOS_APIENTRY *VertexP2ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexP2uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *VertexP3ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexP3uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *VertexP4ui)(GLenum, GLuint);
    void (KHRONOS_APIENTRY *VertexP4uiv)(GLenum, const GLuint *);
    void (KHRONOS_APIENTRY *VertexPointer)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexPointerEXT)(GLint, GLenum, GLsizei, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexPointerListIBM)(GLint, GLenum, GLint, const void **, GLint);
    void (KHRONOS_APIENTRY *VertexPointervINTEL)(GLint, GLenum, const void **);
    void (KHRONOS_APIENTRY *VertexStream1dATI)(GLenum, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream1dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream1fATI)(GLenum, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream1fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream1iATI)(GLenum, GLint);
    void (KHRONOS_APIENTRY *VertexStream1ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream1sATI)(GLenum, GLshort);
    void (KHRONOS_APIENTRY *VertexStream1svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexStream2dATI)(GLenum, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream2dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream2fATI)(GLenum, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream2fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream2iATI)(GLenum, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexStream2ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream2sATI)(GLenum, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexStream2svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexStream3dATI)(GLenum, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream3dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream3fATI)(GLenum, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream3fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream3iATI)(GLenum, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexStream3ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream3sATI)(GLenum, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexStream3svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexStream4dATI)(GLenum, GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *VertexStream4dvATI)(GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VertexStream4fATI)(GLenum, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *VertexStream4fvATI)(GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VertexStream4iATI)(GLenum, GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *VertexStream4ivATI)(GLenum, const GLint *);
    void (KHRONOS_APIENTRY *VertexStream4sATI)(GLenum, GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *VertexStream4svATI)(GLenum, const GLshort *);
    void (KHRONOS_APIENTRY *VertexWeightPointerEXT)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *VertexWeightfEXT)(GLfloat);
    void (KHRONOS_APIENTRY *VertexWeightfvEXT)(const GLfloat *);
    void (KHRONOS_APIENTRY *VertexWeighthNV)(GLhalfNV);
    void (KHRONOS_APIENTRY *VertexWeighthvNV)(const GLhalfNV *);
    GLenum(KHRONOS_APIENTRY *VideoCaptureNV)(GLuint, GLuint *, GLuint64EXT *);
    void (KHRONOS_APIENTRY *VideoCaptureStreamParameterdvNV)(GLuint, GLuint, GLenum, const GLdouble *);
    void (KHRONOS_APIENTRY *VideoCaptureStreamParameterfvNV)(GLuint, GLuint, GLenum, const GLfloat *);
    void (KHRONOS_APIENTRY *VideoCaptureStreamParameterivNV)(GLuint, GLuint, GLenum, const GLint *);
    void (KHRONOS_APIENTRY *Viewport)(GLint, GLint, GLsizei, GLsizei);
    void (KHRONOS_APIENTRY *ViewportArrayv)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportArrayvNV)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportArrayvOES)(GLuint, GLsizei, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportIndexedf)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportIndexedfNV)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportIndexedfOES)(GLuint, GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportIndexedfv)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportIndexedfvNV)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportIndexedfvOES)(GLuint, const GLfloat *);
    void (KHRONOS_APIENTRY *ViewportPositionWScaleNV)(GLuint, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *ViewportSwizzleNV)(GLuint, GLenum, GLenum, GLenum, GLenum);
    void (KHRONOS_APIENTRY *WaitSemaphoreEXT)(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *);
    void (KHRONOS_APIENTRY *WaitSync)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY *WaitSyncAPPLE)(GLsync, GLbitfield, GLuint64);
    void (KHRONOS_APIENTRY *WaitVkSemaphoreNV)(GLuint64);
    void (KHRONOS_APIENTRY *WeightPathsNV)(GLuint, GLsizei, const GLuint *, const GLfloat *);
    void (KHRONOS_APIENTRY *WeightPointerARB)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *WeightPointerOES)(GLint, GLenum, GLsizei, const void *);
    void (KHRONOS_APIENTRY *WeightbvARB)(GLint, const GLbyte *);
    void (KHRONOS_APIENTRY *WeightdvARB)(GLint, const GLdouble *);
    void (KHRONOS_APIENTRY *WeightfvARB)(GLint, const GLfloat *);
    void (KHRONOS_APIENTRY *WeightivARB)(GLint, const GLint *);
    void (KHRONOS_APIENTRY *WeightsvARB)(GLint, const GLshort *);
    void (KHRONOS_APIENTRY *WeightubvARB)(GLint, const GLubyte *);
    void (KHRONOS_APIENTRY *WeightuivARB)(GLint, const GLuint *);
    void (KHRONOS_APIENTRY *WeightusvARB)(GLint, const GLushort *);
    void (KHRONOS_APIENTRY *WindowPos2d)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos2dARB)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos2dMESA)(GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos2dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos2dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos2dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos2f)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos2fARB)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos2fMESA)(GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos2fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos2fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos2fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos2i)(GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos2iARB)(GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos2iMESA)(GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos2iv)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos2ivARB)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos2ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos2s)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos2sARB)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos2sMESA)(GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos2sv)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos2svARB)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos2svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos3d)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos3dARB)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos3dMESA)(GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos3dv)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos3dvARB)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos3dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos3f)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos3fARB)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos3fMESA)(GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos3fv)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos3fvARB)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos3fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos3i)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos3iARB)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos3iMESA)(GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos3iv)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos3ivARB)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos3ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos3s)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos3sARB)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos3sMESA)(GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos3sv)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos3svARB)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos3svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowPos4dMESA)(GLdouble, GLdouble, GLdouble, GLdouble);
    void (KHRONOS_APIENTRY *WindowPos4dvMESA)(const GLdouble *);
    void (KHRONOS_APIENTRY *WindowPos4fMESA)(GLfloat, GLfloat, GLfloat, GLfloat);
    void (KHRONOS_APIENTRY *WindowPos4fvMESA)(const GLfloat *);
    void (KHRONOS_APIENTRY *WindowPos4iMESA)(GLint, GLint, GLint, GLint);
    void (KHRONOS_APIENTRY *WindowPos4ivMESA)(const GLint *);
    void (KHRONOS_APIENTRY *WindowPos4sMESA)(GLshort, GLshort, GLshort, GLshort);
    void (KHRONOS_APIENTRY *WindowPos4svMESA)(const GLshort *);
    void (KHRONOS_APIENTRY *WindowRectanglesEXT)(GLenum, GLsizei, const GLint *);
    void (KHRONOS_APIENTRY *WriteMaskEXT)(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum);

} PhaserGLConfig;

extern PhaserGLConfig phaserGL; /* global instance. */

PHASER_FORCE_INLINE khronos_int8_t phaserGLSupport(khronos_usize_t id) {
    return phaserGL.support[id];
}

#if PHASER_PROTO_IMPL

PHASER_FORCE_INLINE void  phaserAccum(GLenum op, GLfloat value) { phaserGL.Accum(op, value); }
PHASER_FORCE_INLINE void  phaserAccumxOES(GLenum op, GLfixed value) { phaserGL.AccumxOES(op, value); }
PHASER_FORCE_INLINE GLboolean phaserAcquireKeyedMutexWin32EXT(GLuint memory, GLuint64 key, GLuint timeout) { return phaserGL.AcquireKeyedMutexWin32EXT(memory, key, timeout); }
PHASER_FORCE_INLINE void  phaserActiveProgramEXT(GLuint program) { phaserGL.ActiveProgramEXT(program); }
PHASER_FORCE_INLINE void  phaserActiveShaderProgram(GLuint pipeline, GLuint program) { phaserGL.ActiveShaderProgram(pipeline, program); }
PHASER_FORCE_INLINE void  phaserActiveShaderProgramEXT(GLuint pipeline, GLuint program) { phaserGL.ActiveShaderProgramEXT(pipeline, program); }
PHASER_FORCE_INLINE void  phaserActiveStencilFaceEXT(GLenum face) { phaserGL.ActiveStencilFaceEXT(face); }
PHASER_FORCE_INLINE void  phaserActiveTexture(GLenum texture) { phaserGL.ActiveTexture(texture); }
PHASER_FORCE_INLINE void  phaserActiveTextureARB(GLenum texture) { phaserGL.ActiveTextureARB(texture); }
PHASER_FORCE_INLINE void  phaserActiveVaryingNV(GLuint program, const GLchar * name) { phaserGL.ActiveVaryingNV(program, name); }
PHASER_FORCE_INLINE void  phaserAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { phaserGL.AlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod); }
PHASER_FORCE_INLINE void  phaserAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { phaserGL.AlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
PHASER_FORCE_INLINE void  phaserAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { phaserGL.AlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
PHASER_FORCE_INLINE void  phaserAlphaFunc(GLenum func, GLfloat ref) { phaserGL.AlphaFunc(func, ref); }
PHASER_FORCE_INLINE void  phaserAlphaFuncQCOM(GLenum func, GLclampf ref) { phaserGL.AlphaFuncQCOM(func, ref); }
PHASER_FORCE_INLINE void  phaserAlphaFuncx(GLenum func, GLfixed ref) { phaserGL.AlphaFuncx(func, ref); }
PHASER_FORCE_INLINE void  phaserAlphaFuncxOES(GLenum func, GLfixed ref) { phaserGL.AlphaFuncxOES(func, ref); }
PHASER_FORCE_INLINE void  phaserAlphaToCoverageDitherControlNV(GLenum mode) { phaserGL.AlphaToCoverageDitherControlNV(mode); }
PHASER_FORCE_INLINE void  phaserApplyFramebufferAttachmentCMAAINTEL(void) { phaserGL.ApplyFramebufferAttachmentCMAAINTEL(); }
PHASER_FORCE_INLINE void  phaserApplyTextureEXT(GLenum mode) { phaserGL.ApplyTextureEXT(mode); }
PHASER_FORCE_INLINE GLboolean phaserAreProgramsResidentNV(GLsizei n, const GLuint * programs, GLboolean * residences) { return phaserGL.AreProgramsResidentNV(n, programs, residences); }
PHASER_FORCE_INLINE GLboolean phaserAreTexturesResident(GLsizei n, const GLuint * textures, GLboolean * residences) { return phaserGL.AreTexturesResident(n, textures, residences); }
PHASER_FORCE_INLINE GLboolean phaserAreTexturesResidentEXT(GLsizei n, const GLuint * textures, GLboolean * residences) { return phaserGL.AreTexturesResidentEXT(n, textures, residences); }
PHASER_FORCE_INLINE void  phaserArrayElement(GLint i) { phaserGL.ArrayElement(i); }
PHASER_FORCE_INLINE void  phaserArrayElementEXT(GLint i) { phaserGL.ArrayElementEXT(i); }
PHASER_FORCE_INLINE void  phaserArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { phaserGL.ArrayObjectATI(array, size, type, stride, buffer, offset); }
PHASER_FORCE_INLINE void  phaserAsyncMarkerSGIX(GLuint marker) { phaserGL.AsyncMarkerSGIX(marker); }
PHASER_FORCE_INLINE void  phaserAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj) { phaserGL.AttachObjectARB(containerObj, obj); }
PHASER_FORCE_INLINE void  phaserAttachShader(GLuint program, GLuint shader) { phaserGL.AttachShader(program, shader); }
PHASER_FORCE_INLINE void  phaserBegin(GLenum mode) { phaserGL.Begin(mode); }
PHASER_FORCE_INLINE void  phaserBeginConditionalRender(GLuint id, GLenum mode) { phaserGL.BeginConditionalRender(id, mode); }
PHASER_FORCE_INLINE void  phaserBeginConditionalRenderNV(GLuint id, GLenum mode) { phaserGL.BeginConditionalRenderNV(id, mode); }
PHASER_FORCE_INLINE void  phaserBeginConditionalRenderNVX(GLuint id) { phaserGL.BeginConditionalRenderNVX(id); }
PHASER_FORCE_INLINE void  phaserBeginFragmentShaderATI(void) { phaserGL.BeginFragmentShaderATI(); }
PHASER_FORCE_INLINE void  phaserBeginOcclusionQueryNV(GLuint id) { phaserGL.BeginOcclusionQueryNV(id); }
PHASER_FORCE_INLINE void  phaserBeginPerfMonitorAMD(GLuint monitor) { phaserGL.BeginPerfMonitorAMD(monitor); }
PHASER_FORCE_INLINE void  phaserBeginPerfQueryINTEL(GLuint queryHandle) { phaserGL.BeginPerfQueryINTEL(queryHandle); }
PHASER_FORCE_INLINE void  phaserBeginQuery(GLenum target, GLuint id) { phaserGL.BeginQuery(target, id); }
PHASER_FORCE_INLINE void  phaserBeginQueryARB(GLenum target, GLuint id) { phaserGL.BeginQueryARB(target, id); }
PHASER_FORCE_INLINE void  phaserBeginQueryEXT(GLenum target, GLuint id) { phaserGL.BeginQueryEXT(target, id); }
PHASER_FORCE_INLINE void  phaserBeginQueryIndexed(GLenum target, GLuint index, GLuint id) { phaserGL.BeginQueryIndexed(target, index, id); }
PHASER_FORCE_INLINE void  phaserBeginTransformFeedback(GLenum primitiveMode) { phaserGL.BeginTransformFeedback(primitiveMode); }
PHASER_FORCE_INLINE void  phaserBeginTransformFeedbackEXT(GLenum primitiveMode) { phaserGL.BeginTransformFeedbackEXT(primitiveMode); }
PHASER_FORCE_INLINE void  phaserBeginTransformFeedbackNV(GLenum primitiveMode) { phaserGL.BeginTransformFeedbackNV(primitiveMode); }
PHASER_FORCE_INLINE void  phaserBeginVertexShaderEXT(void) { phaserGL.BeginVertexShaderEXT(); }
PHASER_FORCE_INLINE void  phaserBeginVideoCaptureNV(GLuint video_capture_slot) { phaserGL.BeginVideoCaptureNV(video_capture_slot); }
PHASER_FORCE_INLINE void  phaserBindAttribLocation(GLuint program, GLuint index, const GLchar * name) { phaserGL.BindAttribLocation(program, index, name); }
PHASER_FORCE_INLINE void  phaserBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB * name) { phaserGL.BindAttribLocationARB(programObj, index, name); }
PHASER_FORCE_INLINE void  phaserBindBuffer(GLenum target, GLuint buffer) { phaserGL.BindBuffer(target, buffer); }
PHASER_FORCE_INLINE void  phaserBindBufferARB(GLenum target, GLuint buffer) { phaserGL.BindBufferARB(target, buffer); }
PHASER_FORCE_INLINE void  phaserBindBufferBase(GLenum target, GLuint index, GLuint buffer) { phaserGL.BindBufferBase(target, index, buffer); }
PHASER_FORCE_INLINE void  phaserBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer) { phaserGL.BindBufferBaseEXT(target, index, buffer); }
PHASER_FORCE_INLINE void  phaserBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer) { phaserGL.BindBufferBaseNV(target, index, buffer); }
PHASER_FORCE_INLINE void  phaserBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { phaserGL.BindBufferOffsetEXT(target, index, buffer, offset); }
PHASER_FORCE_INLINE void  phaserBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset) { phaserGL.BindBufferOffsetNV(target, index, buffer, offset); }
PHASER_FORCE_INLINE void  phaserBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.BindBufferRange(target, index, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.BindBufferRangeEXT(target, index, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.BindBufferRangeNV(target, index, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint * buffers) { phaserGL.BindBuffersBase(target, first, count, buffers); }
PHASER_FORCE_INLINE void  phaserBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) { phaserGL.BindBuffersRange(target, first, count, buffers, offsets, sizes); }
PHASER_FORCE_INLINE void  phaserBindFragDataLocation(GLuint program, GLuint color, const GLchar * name) { phaserGL.BindFragDataLocation(program, color, name); }
PHASER_FORCE_INLINE void  phaserBindFragDataLocationEXT(GLuint program, GLuint color, const GLchar * name) { phaserGL.BindFragDataLocationEXT(program, color, name); }
PHASER_FORCE_INLINE void  phaserBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { phaserGL.BindFragDataLocationIndexed(program, colorNumber, index, name); }
PHASER_FORCE_INLINE void  phaserBindFragDataLocationIndexedEXT(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name) { phaserGL.BindFragDataLocationIndexedEXT(program, colorNumber, index, name); }
PHASER_FORCE_INLINE void  phaserBindFragmentShaderATI(GLuint id) { phaserGL.BindFragmentShaderATI(id); }
PHASER_FORCE_INLINE void  phaserBindFramebuffer(GLenum target, GLuint framebuffer) { phaserGL.BindFramebuffer(target, framebuffer); }
PHASER_FORCE_INLINE void  phaserBindFramebufferEXT(GLenum target, GLuint framebuffer) { phaserGL.BindFramebufferEXT(target, framebuffer); }
PHASER_FORCE_INLINE void  phaserBindFramebufferOES(GLenum target, GLuint framebuffer) { phaserGL.BindFramebufferOES(target, framebuffer); }
PHASER_FORCE_INLINE void  phaserBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) { phaserGL.BindImageTexture(unit, texture, level, layered, layer, access, format); }
PHASER_FORCE_INLINE void  phaserBindImageTextureEXT(GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format) { phaserGL.BindImageTextureEXT(index, texture, level, layered, layer, access, format); }
PHASER_FORCE_INLINE void  phaserBindImageTextures(GLuint first, GLsizei count, const GLuint * textures) { phaserGL.BindImageTextures(first, count, textures); }
PHASER_FORCE_INLINE GLuint phaserBindLightParameterEXT(GLenum light, GLenum value) { return phaserGL.BindLightParameterEXT(light, value); }
PHASER_FORCE_INLINE GLuint phaserBindMaterialParameterEXT(GLenum face, GLenum value) { return phaserGL.BindMaterialParameterEXT(face, value); }
PHASER_FORCE_INLINE void  phaserBindMultiTextureEXT(GLenum texunit, GLenum target, GLuint texture) { phaserGL.BindMultiTextureEXT(texunit, target, texture); }
PHASER_FORCE_INLINE GLuint phaserBindParameterEXT(GLenum value) { return phaserGL.BindParameterEXT(value); }
PHASER_FORCE_INLINE void  phaserBindProgramARB(GLenum target, GLuint program) { phaserGL.BindProgramARB(target, program); }
PHASER_FORCE_INLINE void  phaserBindProgramNV(GLenum target, GLuint id) { phaserGL.BindProgramNV(target, id); }
PHASER_FORCE_INLINE void  phaserBindProgramPipeline(GLuint pipeline) { phaserGL.BindProgramPipeline(pipeline); }
PHASER_FORCE_INLINE void  phaserBindProgramPipelineEXT(GLuint pipeline) { phaserGL.BindProgramPipelineEXT(pipeline); }
PHASER_FORCE_INLINE void  phaserBindRenderbuffer(GLenum target, GLuint renderbuffer) { phaserGL.BindRenderbuffer(target, renderbuffer); }
PHASER_FORCE_INLINE void  phaserBindRenderbufferEXT(GLenum target, GLuint renderbuffer) { phaserGL.BindRenderbufferEXT(target, renderbuffer); }
PHASER_FORCE_INLINE void  phaserBindRenderbufferOES(GLenum target, GLuint renderbuffer) { phaserGL.BindRenderbufferOES(target, renderbuffer); }
PHASER_FORCE_INLINE void  phaserBindSampler(GLuint unit, GLuint sampler) { phaserGL.BindSampler(unit, sampler); }
PHASER_FORCE_INLINE void  phaserBindSamplers(GLuint first, GLsizei count, const GLuint * samplers) { phaserGL.BindSamplers(first, count, samplers); }
PHASER_FORCE_INLINE GLuint phaserBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value) { return phaserGL.BindTexGenParameterEXT(unit, coord, value); }
PHASER_FORCE_INLINE void  phaserBindTexture(GLenum target, GLuint texture) { phaserGL.BindTexture(target, texture); }
PHASER_FORCE_INLINE void  phaserBindTextureEXT(GLenum target, GLuint texture) { phaserGL.BindTextureEXT(target, texture); }
PHASER_FORCE_INLINE void  phaserBindTextureUnit(GLuint unit, GLuint texture) { phaserGL.BindTextureUnit(unit, texture); }
PHASER_FORCE_INLINE GLuint phaserBindTextureUnitParameterEXT(GLenum unit, GLenum value) { return phaserGL.BindTextureUnitParameterEXT(unit, value); }
PHASER_FORCE_INLINE void  phaserBindTextures(GLuint first, GLsizei count, const GLuint * textures) { phaserGL.BindTextures(first, count, textures); }
PHASER_FORCE_INLINE void  phaserBindTransformFeedback(GLenum target, GLuint id) { phaserGL.BindTransformFeedback(target, id); }
PHASER_FORCE_INLINE void  phaserBindTransformFeedbackNV(GLenum target, GLuint id) { phaserGL.BindTransformFeedbackNV(target, id); }
PHASER_FORCE_INLINE void  phaserBindVertexArray(GLuint array) { phaserGL.BindVertexArray(array); }
PHASER_FORCE_INLINE void  phaserBindVertexArrayAPPLE(GLuint array) { phaserGL.BindVertexArrayAPPLE(array); }
PHASER_FORCE_INLINE void  phaserBindVertexArrayOES(GLuint array) { phaserGL.BindVertexArrayOES(array); }
PHASER_FORCE_INLINE void  phaserBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { phaserGL.BindVertexBuffer(bindingindex, buffer, offset, stride); }
PHASER_FORCE_INLINE void  phaserBindVertexBuffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { phaserGL.BindVertexBuffers(first, count, buffers, offsets, strides); }
PHASER_FORCE_INLINE void  phaserBindVertexShaderEXT(GLuint id) { phaserGL.BindVertexShaderEXT(id); }
PHASER_FORCE_INLINE void  phaserBindVideoCaptureStreamBufferNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset) { phaserGL.BindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset); }
PHASER_FORCE_INLINE void  phaserBindVideoCaptureStreamTextureNV(GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture) { phaserGL.BindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture); }
PHASER_FORCE_INLINE void  phaserBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz) { phaserGL.Binormal3bEXT(bx, by, bz); }
PHASER_FORCE_INLINE void  phaserBinormal3bvEXT(const GLbyte * v) { phaserGL.Binormal3bvEXT(v); }
PHASER_FORCE_INLINE void  phaserBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz) { phaserGL.Binormal3dEXT(bx, by, bz); }
PHASER_FORCE_INLINE void  phaserBinormal3dvEXT(const GLdouble * v) { phaserGL.Binormal3dvEXT(v); }
PHASER_FORCE_INLINE void  phaserBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz) { phaserGL.Binormal3fEXT(bx, by, bz); }
PHASER_FORCE_INLINE void  phaserBinormal3fvEXT(const GLfloat * v) { phaserGL.Binormal3fvEXT(v); }
PHASER_FORCE_INLINE void  phaserBinormal3iEXT(GLint bx, GLint by, GLint bz) { phaserGL.Binormal3iEXT(bx, by, bz); }
PHASER_FORCE_INLINE void  phaserBinormal3ivEXT(const GLint * v) { phaserGL.Binormal3ivEXT(v); }
PHASER_FORCE_INLINE void  phaserBinormal3sEXT(GLshort bx, GLshort by, GLshort bz) { phaserGL.Binormal3sEXT(bx, by, bz); }
PHASER_FORCE_INLINE void  phaserBinormal3svEXT(const GLshort * v) { phaserGL.Binormal3svEXT(v); }
PHASER_FORCE_INLINE void  phaserBinormalPointerEXT(GLenum type, GLsizei stride, const void * pointer) { phaserGL.BinormalPointerEXT(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) { phaserGL.Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap); }
PHASER_FORCE_INLINE void  phaserBitmapxOES(GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap) { phaserGL.BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap); }
PHASER_FORCE_INLINE void  phaserBlendBarrier(void) { phaserGL.BlendBarrier(); }
PHASER_FORCE_INLINE void  phaserBlendBarrierKHR(void) { phaserGL.BlendBarrierKHR(); }
PHASER_FORCE_INLINE void  phaserBlendBarrierNV(void) { phaserGL.BlendBarrierNV(); }
PHASER_FORCE_INLINE void  phaserBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { phaserGL.BlendColor(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserBlendColorEXT(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { phaserGL.BlendColorEXT(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserBlendColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { phaserGL.BlendColorxOES(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserBlendEquation(GLenum mode) { phaserGL.BlendEquation(mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationEXT(GLenum mode) { phaserGL.BlendEquationEXT(mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationIndexedAMD(GLuint buf, GLenum mode) { phaserGL.BlendEquationIndexedAMD(buf, mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationOES(GLenum mode) { phaserGL.BlendEquationOES(mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparate(modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparateEXT(modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparateIndexedAMD(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparateOES(modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparatei(buf, modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparateiARB(buf, modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparateiEXT(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparateiEXT(buf, modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationSeparateiOES(GLuint buf, GLenum modeRGB, GLenum modeAlpha) { phaserGL.BlendEquationSeparateiOES(buf, modeRGB, modeAlpha); }
PHASER_FORCE_INLINE void  phaserBlendEquationi(GLuint buf, GLenum mode) { phaserGL.BlendEquationi(buf, mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationiARB(GLuint buf, GLenum mode) { phaserGL.BlendEquationiARB(buf, mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationiEXT(GLuint buf, GLenum mode) { phaserGL.BlendEquationiEXT(buf, mode); }
PHASER_FORCE_INLINE void  phaserBlendEquationiOES(GLuint buf, GLenum mode) { phaserGL.BlendEquationiOES(buf, mode); }
PHASER_FORCE_INLINE void  phaserBlendFunc(GLenum sfactor, GLenum dfactor) { phaserGL.BlendFunc(sfactor, dfactor); }
PHASER_FORCE_INLINE void  phaserBlendFuncIndexedAMD(GLuint buf, GLenum src, GLenum dst) { phaserGL.BlendFuncIndexedAMD(buf, src, dst); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { phaserGL.BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { phaserGL.BlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha) { phaserGL.BlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateIndexedAMD(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { phaserGL.BlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { phaserGL.BlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { phaserGL.BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { phaserGL.BlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateiEXT(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { phaserGL.BlendFuncSeparateiEXT(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFuncSeparateiOES(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha) { phaserGL.BlendFuncSeparateiOES(buf, srcRGB, dstRGB, srcAlpha, dstAlpha); }
PHASER_FORCE_INLINE void  phaserBlendFunci(GLuint buf, GLenum src, GLenum dst) { phaserGL.BlendFunci(buf, src, dst); }
PHASER_FORCE_INLINE void  phaserBlendFunciARB(GLuint buf, GLenum src, GLenum dst) { phaserGL.BlendFunciARB(buf, src, dst); }
PHASER_FORCE_INLINE void  phaserBlendFunciEXT(GLuint buf, GLenum src, GLenum dst) { phaserGL.BlendFunciEXT(buf, src, dst); }
PHASER_FORCE_INLINE void  phaserBlendFunciOES(GLuint buf, GLenum src, GLenum dst) { phaserGL.BlendFunciOES(buf, src, dst); }
PHASER_FORCE_INLINE void  phaserBlendParameteriNV(GLenum pname, GLint value) { phaserGL.BlendParameteriNV(pname, value); }
PHASER_FORCE_INLINE void  phaserBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { phaserGL.BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
PHASER_FORCE_INLINE void  phaserBlitFramebufferANGLE(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { phaserGL.BlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
PHASER_FORCE_INLINE void  phaserBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { phaserGL.BlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
PHASER_FORCE_INLINE void  phaserBlitFramebufferNV(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { phaserGL.BlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
PHASER_FORCE_INLINE void  phaserBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { phaserGL.BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
PHASER_FORCE_INLINE void  phaserBufferAddressRangeNV(GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length) { phaserGL.BufferAddressRangeNV(pname, index, address, length); }
PHASER_FORCE_INLINE void  phaserBufferData(GLenum target, GLsizeiptr size, const void * data, GLenum usage) { phaserGL.BufferData(target, size, data, usage); }
PHASER_FORCE_INLINE void  phaserBufferDataARB(GLenum target, GLsizeiptrARB size, const void * data, GLenum usage) { phaserGL.BufferDataARB(target, size, data, usage); }
PHASER_FORCE_INLINE void  phaserBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit) { phaserGL.BufferPageCommitmentARB(target, offset, size, commit); }
PHASER_FORCE_INLINE void  phaserBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param) { phaserGL.BufferParameteriAPPLE(target, pname, param); }
PHASER_FORCE_INLINE GLuint phaserBufferRegionEnabled(void) { return phaserGL.BufferRegionEnabled(); }
PHASER_FORCE_INLINE void  phaserBufferStorage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { phaserGL.BufferStorage(target, size, data, flags); }
PHASER_FORCE_INLINE void  phaserBufferStorageEXT(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags) { phaserGL.BufferStorageEXT(target, size, data, flags); }
PHASER_FORCE_INLINE void  phaserBufferStorageExternalEXT(GLenum target, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { phaserGL.BufferStorageExternalEXT(target, offset, size, clientBuffer, flags); }
PHASER_FORCE_INLINE void  phaserBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset) { phaserGL.BufferStorageMemEXT(target, size, memory, offset); }
PHASER_FORCE_INLINE void  phaserBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void * data) { phaserGL.BufferSubData(target, offset, size, data); }
PHASER_FORCE_INLINE void  phaserBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data) { phaserGL.BufferSubDataARB(target, offset, size, data); }
PHASER_FORCE_INLINE void  phaserCallCommandListNV(GLuint list) { phaserGL.CallCommandListNV(list); }
PHASER_FORCE_INLINE void  phaserCallList(GLuint list) { phaserGL.CallList(list); }
PHASER_FORCE_INLINE void  phaserCallLists(GLsizei n, GLenum type, const void * lists) { phaserGL.CallLists(n, type, lists); }
PHASER_FORCE_INLINE GLenum phaserCheckFramebufferStatus(GLenum target) { return phaserGL.CheckFramebufferStatus(target); }
PHASER_FORCE_INLINE GLenum phaserCheckFramebufferStatusEXT(GLenum target) { return phaserGL.CheckFramebufferStatusEXT(target); }
PHASER_FORCE_INLINE GLenum phaserCheckFramebufferStatusOES(GLenum target) { return phaserGL.CheckFramebufferStatusOES(target); }
PHASER_FORCE_INLINE GLenum phaserCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target) { return phaserGL.CheckNamedFramebufferStatus(framebuffer, target); }
PHASER_FORCE_INLINE GLenum phaserCheckNamedFramebufferStatusEXT(GLuint framebuffer, GLenum target) { return phaserGL.CheckNamedFramebufferStatusEXT(framebuffer, target); }
PHASER_FORCE_INLINE void  phaserClampColor(GLenum target, GLenum clamp) { phaserGL.ClampColor(target, clamp); }
PHASER_FORCE_INLINE void  phaserClampColorARB(GLenum target, GLenum clamp) { phaserGL.ClampColorARB(target, clamp); }
PHASER_FORCE_INLINE void  phaserClear(GLbitfield mask) { phaserGL.Clear(mask); }
PHASER_FORCE_INLINE void  phaserClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { phaserGL.ClearAccum(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearAccumxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { phaserGL.ClearAccumxOES(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data) { phaserGL.ClearBufferData(target, internalformat, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { phaserGL.ClearBufferSubData(target, internalformat, offset, size, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { phaserGL.ClearBufferfi(buffer, drawbuffer, depth, stencil); }
PHASER_FORCE_INLINE void  phaserClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat * value) { phaserGL.ClearBufferfv(buffer, drawbuffer, value); }
PHASER_FORCE_INLINE void  phaserClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint * value) { phaserGL.ClearBufferiv(buffer, drawbuffer, value); }
PHASER_FORCE_INLINE void  phaserClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint * value) { phaserGL.ClearBufferuiv(buffer, drawbuffer, value); }
PHASER_FORCE_INLINE void  phaserClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { phaserGL.ClearColor(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha) { phaserGL.ClearColorIiEXT(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha) { phaserGL.ClearColorIuiEXT(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearColorx(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { phaserGL.ClearColorx(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearColorxOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { phaserGL.ClearColorxOES(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserClearDepth(GLdouble depth) { phaserGL.ClearDepth(depth); }
PHASER_FORCE_INLINE void  phaserClearDepthdNV(GLdouble depth) { phaserGL.ClearDepthdNV(depth); }
PHASER_FORCE_INLINE void  phaserClearDepthf(GLfloat d) { phaserGL.ClearDepthf(d); }
PHASER_FORCE_INLINE void  phaserClearDepthfOES(GLclampf depth) { phaserGL.ClearDepthfOES(depth); }
PHASER_FORCE_INLINE void  phaserClearDepthx(GLfixed depth) { phaserGL.ClearDepthx(depth); }
PHASER_FORCE_INLINE void  phaserClearDepthxOES(GLfixed depth) { phaserGL.ClearDepthxOES(depth); }
PHASER_FORCE_INLINE void  phaserClearIndex(GLfloat c) { phaserGL.ClearIndex(c); }
PHASER_FORCE_INLINE void  phaserClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { phaserGL.ClearNamedBufferData(buffer, internalformat, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearNamedBufferDataEXT(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data) { phaserGL.ClearNamedBufferDataEXT(buffer, internalformat, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { phaserGL.ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearNamedBufferSubDataEXT(GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data) { phaserGL.ClearNamedBufferSubDataEXT(buffer, internalformat, offset, size, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil) { phaserGL.ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil); }
PHASER_FORCE_INLINE void  phaserClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value) { phaserGL.ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value); }
PHASER_FORCE_INLINE void  phaserClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value) { phaserGL.ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value); }
PHASER_FORCE_INLINE void  phaserClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value) { phaserGL.ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value); }
PHASER_FORCE_INLINE void  phaserClearPixelLocalStorageuiEXT(GLsizei offset, GLsizei n, const GLuint * values) { phaserGL.ClearPixelLocalStorageuiEXT(offset, n, values); }
PHASER_FORCE_INLINE void  phaserClearStencil(GLint s) { phaserGL.ClearStencil(s); }
PHASER_FORCE_INLINE void  phaserClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { phaserGL.ClearTexImage(texture, level, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearTexImageEXT(GLuint texture, GLint level, GLenum format, GLenum type, const void * data) { phaserGL.ClearTexImageEXT(texture, level, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { phaserGL.ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
PHASER_FORCE_INLINE void  phaserClearTexSubImageEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data) { phaserGL.ClearTexSubImageEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data); }
PHASER_FORCE_INLINE void  phaserClientActiveTexture(GLenum texture) { phaserGL.ClientActiveTexture(texture); }
PHASER_FORCE_INLINE void  phaserClientActiveTextureARB(GLenum texture) { phaserGL.ClientActiveTextureARB(texture); }
PHASER_FORCE_INLINE void  phaserClientActiveVertexStreamATI(GLenum stream) { phaserGL.ClientActiveVertexStreamATI(stream); }
PHASER_FORCE_INLINE void  phaserClientAttribDefaultEXT(GLbitfield mask) { phaserGL.ClientAttribDefaultEXT(mask); }
PHASER_FORCE_INLINE GLenum phaserClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { return phaserGL.ClientWaitSync(sync, flags, timeout); }
PHASER_FORCE_INLINE GLenum phaserClientWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { return phaserGL.ClientWaitSyncAPPLE(sync, flags, timeout); }
PHASER_FORCE_INLINE void  phaserClipControl(GLenum origin, GLenum depth) { phaserGL.ClipControl(origin, depth); }
PHASER_FORCE_INLINE void  phaserClipControlEXT(GLenum origin, GLenum depth) { phaserGL.ClipControlEXT(origin, depth); }
PHASER_FORCE_INLINE void  phaserClipPlane(GLenum plane, const GLdouble * equation) { phaserGL.ClipPlane(plane, equation); }
PHASER_FORCE_INLINE void  phaserClipPlanef(GLenum p, const GLfloat * eqn) { phaserGL.ClipPlanef(p, eqn); }
PHASER_FORCE_INLINE void  phaserClipPlanefIMG(GLenum p, const GLfloat * eqn) { phaserGL.ClipPlanefIMG(p, eqn); }
PHASER_FORCE_INLINE void  phaserClipPlanefOES(GLenum plane, const GLfloat * equation) { phaserGL.ClipPlanefOES(plane, equation); }
PHASER_FORCE_INLINE void  phaserClipPlanex(GLenum plane, const GLfixed * equation) { phaserGL.ClipPlanex(plane, equation); }
PHASER_FORCE_INLINE void  phaserClipPlanexIMG(GLenum p, const GLfixed * eqn) { phaserGL.ClipPlanexIMG(p, eqn); }
PHASER_FORCE_INLINE void  phaserClipPlanexOES(GLenum plane, const GLfixed * equation) { phaserGL.ClipPlanexOES(plane, equation); }
PHASER_FORCE_INLINE void  phaserColor3b(GLbyte red, GLbyte green, GLbyte blue) { phaserGL.Color3b(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3bv(const GLbyte * v) { phaserGL.Color3bv(v); }
PHASER_FORCE_INLINE void  phaserColor3d(GLdouble red, GLdouble green, GLdouble blue) { phaserGL.Color3d(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3dv(const GLdouble * v) { phaserGL.Color3dv(v); }
PHASER_FORCE_INLINE void  phaserColor3f(GLfloat red, GLfloat green, GLfloat blue) { phaserGL.Color3f(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { phaserGL.Color3fVertex3fSUN(r, g, b, x, y, z); }
PHASER_FORCE_INLINE void  phaserColor3fVertex3fvSUN(const GLfloat * c, const GLfloat * v) { phaserGL.Color3fVertex3fvSUN(c, v); }
PHASER_FORCE_INLINE void  phaserColor3fv(const GLfloat * v) { phaserGL.Color3fv(v); }
PHASER_FORCE_INLINE void  phaserColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { phaserGL.Color3hNV(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3hvNV(const GLhalfNV * v) { phaserGL.Color3hvNV(v); }
PHASER_FORCE_INLINE void  phaserColor3i(GLint red, GLint green, GLint blue) { phaserGL.Color3i(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3iv(const GLint * v) { phaserGL.Color3iv(v); }
PHASER_FORCE_INLINE void  phaserColor3s(GLshort red, GLshort green, GLshort blue) { phaserGL.Color3s(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3sv(const GLshort * v) { phaserGL.Color3sv(v); }
PHASER_FORCE_INLINE void  phaserColor3ub(GLubyte red, GLubyte green, GLubyte blue) { phaserGL.Color3ub(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3ubv(const GLubyte * v) { phaserGL.Color3ubv(v); }
PHASER_FORCE_INLINE void  phaserColor3ui(GLuint red, GLuint green, GLuint blue) { phaserGL.Color3ui(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3uiv(const GLuint * v) { phaserGL.Color3uiv(v); }
PHASER_FORCE_INLINE void  phaserColor3us(GLushort red, GLushort green, GLushort blue) { phaserGL.Color3us(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3usv(const GLushort * v) { phaserGL.Color3usv(v); }
PHASER_FORCE_INLINE void  phaserColor3xOES(GLfixed red, GLfixed green, GLfixed blue) { phaserGL.Color3xOES(red, green, blue); }
PHASER_FORCE_INLINE void  phaserColor3xvOES(const GLfixed * components) { phaserGL.Color3xvOES(components); }
PHASER_FORCE_INLINE void  phaserColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) { phaserGL.Color4b(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4bv(const GLbyte * v) { phaserGL.Color4bv(v); }
PHASER_FORCE_INLINE void  phaserColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) { phaserGL.Color4d(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4dv(const GLdouble * v) { phaserGL.Color4dv(v); }
PHASER_FORCE_INLINE void  phaserColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) { phaserGL.Color4f(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.Color4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserColor4fNormal3fVertex3fvSUN(const GLfloat * c, const GLfloat * n, const GLfloat * v) { phaserGL.Color4fNormal3fVertex3fvSUN(c, n, v); }
PHASER_FORCE_INLINE void  phaserColor4fv(const GLfloat * v) { phaserGL.Color4fv(v); }
PHASER_FORCE_INLINE void  phaserColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha) { phaserGL.Color4hNV(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4hvNV(const GLhalfNV * v) { phaserGL.Color4hvNV(v); }
PHASER_FORCE_INLINE void  phaserColor4i(GLint red, GLint green, GLint blue, GLint alpha) { phaserGL.Color4i(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4iv(const GLint * v) { phaserGL.Color4iv(v); }
PHASER_FORCE_INLINE void  phaserColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha) { phaserGL.Color4s(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4sv(const GLshort * v) { phaserGL.Color4sv(v); }
PHASER_FORCE_INLINE void  phaserColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) { phaserGL.Color4ub(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y) { phaserGL.Color4ubVertex2fSUN(r, g, b, a, x, y); }
PHASER_FORCE_INLINE void  phaserColor4ubVertex2fvSUN(const GLubyte * c, const GLfloat * v) { phaserGL.Color4ubVertex2fvSUN(c, v); }
PHASER_FORCE_INLINE void  phaserColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { phaserGL.Color4ubVertex3fSUN(r, g, b, a, x, y, z); }
PHASER_FORCE_INLINE void  phaserColor4ubVertex3fvSUN(const GLubyte * c, const GLfloat * v) { phaserGL.Color4ubVertex3fvSUN(c, v); }
PHASER_FORCE_INLINE void  phaserColor4ubv(const GLubyte * v) { phaserGL.Color4ubv(v); }
PHASER_FORCE_INLINE void  phaserColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha) { phaserGL.Color4ui(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4uiv(const GLuint * v) { phaserGL.Color4uiv(v); }
PHASER_FORCE_INLINE void  phaserColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha) { phaserGL.Color4us(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4usv(const GLushort * v) { phaserGL.Color4usv(v); }
PHASER_FORCE_INLINE void  phaserColor4x(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { phaserGL.Color4x(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4xOES(GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha) { phaserGL.Color4xOES(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColor4xvOES(const GLfixed * components) { phaserGL.Color4xvOES(components); }
PHASER_FORCE_INLINE void  phaserColorFormatNV(GLint size, GLenum type, GLsizei stride) { phaserGL.ColorFormatNV(size, type, stride); }
PHASER_FORCE_INLINE void  phaserColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod) { phaserGL.ColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod); }
PHASER_FORCE_INLINE void  phaserColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod) { phaserGL.ColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod); }
PHASER_FORCE_INLINE void  phaserColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod) { phaserGL.ColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod); }
PHASER_FORCE_INLINE void  phaserColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { phaserGL.ColorMask(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { phaserGL.ColorMaskIndexedEXT(index, r, g, b, a); }
PHASER_FORCE_INLINE void  phaserColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { phaserGL.ColorMaski(index, r, g, b, a); }
PHASER_FORCE_INLINE void  phaserColorMaskiEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { phaserGL.ColorMaskiEXT(index, r, g, b, a); }
PHASER_FORCE_INLINE void  phaserColorMaskiOES(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a) { phaserGL.ColorMaskiOES(index, r, g, b, a); }
PHASER_FORCE_INLINE void  phaserColorMaterial(GLenum face, GLenum mode) { phaserGL.ColorMaterial(face, mode); }
PHASER_FORCE_INLINE void  phaserColorP3ui(GLenum type, GLuint color) { phaserGL.ColorP3ui(type, color); }
PHASER_FORCE_INLINE void  phaserColorP3uiv(GLenum type, const GLuint * color) { phaserGL.ColorP3uiv(type, color); }
PHASER_FORCE_INLINE void  phaserColorP4ui(GLenum type, GLuint color) { phaserGL.ColorP4ui(type, color); }
PHASER_FORCE_INLINE void  phaserColorP4uiv(GLenum type, const GLuint * color) { phaserGL.ColorP4uiv(type, color); }
PHASER_FORCE_INLINE void  phaserColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.ColorPointer(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { phaserGL.ColorPointerEXT(size, type, stride, count, pointer); }
PHASER_FORCE_INLINE void  phaserColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.ColorPointerListIBM(size, type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserColorPointervINTEL(GLint size, GLenum type, const void ** pointer) { phaserGL.ColorPointervINTEL(size, type, pointer); }
PHASER_FORCE_INLINE void  phaserColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { phaserGL.ColorSubTable(target, start, count, format, type, data); }
PHASER_FORCE_INLINE void  phaserColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data) { phaserGL.ColorSubTableEXT(target, start, count, format, type, data); }
PHASER_FORCE_INLINE void  phaserColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { phaserGL.ColorTable(target, internalformat, width, format, type, table); }
PHASER_FORCE_INLINE void  phaserColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table) { phaserGL.ColorTableEXT(target, internalFormat, width, format, type, table); }
PHASER_FORCE_INLINE void  phaserColorTableParameterfv(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.ColorTableParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserColorTableParameterfvSGI(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.ColorTableParameterfvSGI(target, pname, params); }
PHASER_FORCE_INLINE void  phaserColorTableParameteriv(GLenum target, GLenum pname, const GLint * params) { phaserGL.ColorTableParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserColorTableParameterivSGI(GLenum target, GLenum pname, const GLint * params) { phaserGL.ColorTableParameterivSGI(target, pname, params); }
PHASER_FORCE_INLINE void  phaserColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table) { phaserGL.ColorTableSGI(target, internalformat, width, format, type, table); }
PHASER_FORCE_INLINE void  phaserCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { phaserGL.CombinerInputNV(stage, portion, variable, input, mapping, componentUsage); }
PHASER_FORCE_INLINE void  phaserCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum) { phaserGL.CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum); }
PHASER_FORCE_INLINE void  phaserCombinerParameterfNV(GLenum pname, GLfloat param) { phaserGL.CombinerParameterfNV(pname, param); }
PHASER_FORCE_INLINE void  phaserCombinerParameterfvNV(GLenum pname, const GLfloat * params) { phaserGL.CombinerParameterfvNV(pname, params); }
PHASER_FORCE_INLINE void  phaserCombinerParameteriNV(GLenum pname, GLint param) { phaserGL.CombinerParameteriNV(pname, param); }
PHASER_FORCE_INLINE void  phaserCombinerParameterivNV(GLenum pname, const GLint * params) { phaserGL.CombinerParameterivNV(pname, params); }
PHASER_FORCE_INLINE void  phaserCombinerStageParameterfvNV(GLenum stage, GLenum pname, const GLfloat * params) { phaserGL.CombinerStageParameterfvNV(stage, pname, params); }
PHASER_FORCE_INLINE void  phaserCommandListSegmentsNV(GLuint list, GLuint segments) { phaserGL.CommandListSegmentsNV(list, segments); }
PHASER_FORCE_INLINE void  phaserCompileCommandListNV(GLuint list) { phaserGL.CompileCommandListNV(list); }
PHASER_FORCE_INLINE void  phaserCompileShader(GLuint shader) { phaserGL.CompileShader(shader); }
PHASER_FORCE_INLINE void  phaserCompileShaderARB(GLhandleARB shaderObj) { phaserGL.CompileShaderARB(shaderObj); }
PHASER_FORCE_INLINE void  phaserCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length) { phaserGL.CompileShaderIncludeARB(shader, count, path, length); }
PHASER_FORCE_INLINE void  phaserCompressedMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { phaserGL.CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { phaserGL.CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { phaserGL.CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { phaserGL.CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { phaserGL.CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { phaserGL.CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data) { phaserGL.CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits) { phaserGL.CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits) { phaserGL.CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits) { phaserGL.CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits) { phaserGL.CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits) { phaserGL.CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data) { phaserGL.CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data); }
PHASER_FORCE_INLINE void  phaserCompressedTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits) { phaserGL.CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits); }
PHASER_FORCE_INLINE void  phaserConservativeRasterParameterfNV(GLenum pname, GLfloat value) { phaserGL.ConservativeRasterParameterfNV(pname, value); }
PHASER_FORCE_INLINE void  phaserConservativeRasterParameteriNV(GLenum pname, GLint param) { phaserGL.ConservativeRasterParameteriNV(pname, param); }
PHASER_FORCE_INLINE void  phaserConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { phaserGL.ConvolutionFilter1D(target, internalformat, width, format, type, image); }
PHASER_FORCE_INLINE void  phaserConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image) { phaserGL.ConvolutionFilter1DEXT(target, internalformat, width, format, type, image); }
PHASER_FORCE_INLINE void  phaserConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { phaserGL.ConvolutionFilter2D(target, internalformat, width, height, format, type, image); }
PHASER_FORCE_INLINE void  phaserConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image) { phaserGL.ConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterf(GLenum target, GLenum pname, GLfloat params) { phaserGL.ConvolutionParameterf(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat params) { phaserGL.ConvolutionParameterfEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterfv(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.ConvolutionParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.ConvolutionParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameteri(GLenum target, GLenum pname, GLint params) { phaserGL.ConvolutionParameteri(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameteriEXT(GLenum target, GLenum pname, GLint params) { phaserGL.ConvolutionParameteriEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameteriv(GLenum target, GLenum pname, const GLint * params) { phaserGL.ConvolutionParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterivEXT(GLenum target, GLenum pname, const GLint * params) { phaserGL.ConvolutionParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterxOES(GLenum target, GLenum pname, GLfixed param) { phaserGL.ConvolutionParameterxOES(target, pname, param); }
PHASER_FORCE_INLINE void  phaserConvolutionParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { phaserGL.ConvolutionParameterxvOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { phaserGL.CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size); }
PHASER_FORCE_INLINE void  phaserCopyBufferSubDataNV(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { phaserGL.CopyBufferSubDataNV(readTarget, writeTarget, readOffset, writeOffset, size); }
PHASER_FORCE_INLINE void  phaserCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { phaserGL.CopyColorSubTable(target, start, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width) { phaserGL.CopyColorSubTableEXT(target, start, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { phaserGL.CopyColorTable(target, internalformat, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { phaserGL.CopyColorTableSGI(target, internalformat, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { phaserGL.CopyConvolutionFilter1D(target, internalformat, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width) { phaserGL.CopyConvolutionFilter1DEXT(target, internalformat, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyConvolutionFilter2D(target, internalformat, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { phaserGL.CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
PHASER_FORCE_INLINE void  phaserCopyImageSubDataEXT(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { phaserGL.CopyImageSubDataEXT(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
PHASER_FORCE_INLINE void  phaserCopyImageSubDataNV(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.CopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
PHASER_FORCE_INLINE void  phaserCopyImageSubDataOES(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { phaserGL.CopyImageSubDataOES(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
PHASER_FORCE_INLINE void  phaserCopyMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { phaserGL.CopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border); }
PHASER_FORCE_INLINE void  phaserCopyMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { phaserGL.CopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border); }
PHASER_FORCE_INLINE void  phaserCopyMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { phaserGL.CopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { phaserGL.CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size); }
PHASER_FORCE_INLINE void  phaserCopyPathNV(GLuint resultPath, GLuint srcPath) { phaserGL.CopyPathNV(resultPath, srcPath); }
PHASER_FORCE_INLINE void  phaserCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) { phaserGL.CopyPixels(x, y, width, height, type); }
PHASER_FORCE_INLINE void  phaserCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { phaserGL.CopyTexImage1D(target, level, internalformat, x, y, width, border); }
PHASER_FORCE_INLINE void  phaserCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { phaserGL.CopyTexImage1DEXT(target, level, internalformat, x, y, width, border); }
PHASER_FORCE_INLINE void  phaserCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { phaserGL.CopyTexImage2D(target, level, internalformat, x, y, width, height, border); }
PHASER_FORCE_INLINE void  phaserCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { phaserGL.CopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { phaserGL.CopyTexSubImage1D(target, level, xoffset, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { phaserGL.CopyTexSubImage1DEXT(target, level, xoffset, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border) { phaserGL.CopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border); }
PHASER_FORCE_INLINE void  phaserCopyTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) { phaserGL.CopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border); }
PHASER_FORCE_INLINE void  phaserCopyTextureLevelsAPPLE(GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount) { phaserGL.CopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount); }
PHASER_FORCE_INLINE void  phaserCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { phaserGL.CopyTextureSubImage1D(texture, level, xoffset, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) { phaserGL.CopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width); }
PHASER_FORCE_INLINE void  phaserCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCopyTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.CopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { phaserGL.CoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserCoverFillPathNV(GLuint path, GLenum coverMode) { phaserGL.CoverFillPathNV(path, coverMode); }
PHASER_FORCE_INLINE void  phaserCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { phaserGL.CoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserCoverStrokePathNV(GLuint path, GLenum coverMode) { phaserGL.CoverStrokePathNV(path, coverMode); }
PHASER_FORCE_INLINE void  phaserCoverageMaskNV(GLboolean mask) { phaserGL.CoverageMaskNV(mask); }
PHASER_FORCE_INLINE void  phaserCoverageModulationNV(GLenum components) { phaserGL.CoverageModulationNV(components); }
PHASER_FORCE_INLINE void  phaserCoverageModulationTableNV(GLsizei n, const GLfloat * v) { phaserGL.CoverageModulationTableNV(n, v); }
PHASER_FORCE_INLINE void  phaserCoverageOperationNV(GLenum operation) { phaserGL.CoverageOperationNV(operation); }
PHASER_FORCE_INLINE void  phaserCreateBuffers(GLsizei n, GLuint * buffers) { phaserGL.CreateBuffers(n, buffers); }
PHASER_FORCE_INLINE void  phaserCreateCommandListsNV(GLsizei n, GLuint * lists) { phaserGL.CreateCommandListsNV(n, lists); }
PHASER_FORCE_INLINE void  phaserCreateFramebuffers(GLsizei n, GLuint * framebuffers) { phaserGL.CreateFramebuffers(n, framebuffers); }
PHASER_FORCE_INLINE void  phaserCreateMemoryObjectsEXT(GLsizei n, GLuint * memoryObjects) { phaserGL.CreateMemoryObjectsEXT(n, memoryObjects); }
PHASER_FORCE_INLINE void  phaserCreatePerfQueryINTEL(GLuint queryId, GLuint * queryHandle) { phaserGL.CreatePerfQueryINTEL(queryId, queryHandle); }
PHASER_FORCE_INLINE GLuint phaserCreateProgram(void) { return phaserGL.CreateProgram(); }
PHASER_FORCE_INLINE GLhandleARB phaserCreateProgramObjectARB(void) { return phaserGL.CreateProgramObjectARB(); }
PHASER_FORCE_INLINE void  phaserCreateProgramPipelines(GLsizei n, GLuint * pipelines) { phaserGL.CreateProgramPipelines(n, pipelines); }
PHASER_FORCE_INLINE void  phaserCreateQueries(GLenum target, GLsizei n, GLuint * ids) { phaserGL.CreateQueries(target, n, ids); }
PHASER_FORCE_INLINE void  phaserCreateRenderbuffers(GLsizei n, GLuint * renderbuffers) { phaserGL.CreateRenderbuffers(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserCreateSamplers(GLsizei n, GLuint * samplers) { phaserGL.CreateSamplers(n, samplers); }
PHASER_FORCE_INLINE GLuint phaserCreateShader(GLenum type) { return phaserGL.CreateShader(type); }
PHASER_FORCE_INLINE GLhandleARB phaserCreateShaderObjectARB(GLenum shaderType) { return phaserGL.CreateShaderObjectARB(shaderType); }
PHASER_FORCE_INLINE GLuint phaserCreateShaderProgramEXT(GLenum type, const GLchar * string) { return phaserGL.CreateShaderProgramEXT(type, string); }
PHASER_FORCE_INLINE GLuint phaserCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const* strings) { return phaserGL.CreateShaderProgramv(type, count, strings); }
PHASER_FORCE_INLINE GLuint phaserCreateShaderProgramvEXT(GLenum type, GLsizei count, const GLchar ** strings) { return phaserGL.CreateShaderProgramvEXT(type, count, strings); }
PHASER_FORCE_INLINE void  phaserCreateStatesNV(GLsizei n, GLuint * states) { phaserGL.CreateStatesNV(n, states); }
PHASER_FORCE_INLINE GLsync phaserCreateSyncFromCLeventARB(struct _cl_context * context, struct _cl_event * event, GLbitfield flags) { return phaserGL.CreateSyncFromCLeventARB(context, event, flags); }
PHASER_FORCE_INLINE void  phaserCreateTextures(GLenum target, GLsizei n, GLuint * textures) { phaserGL.CreateTextures(target, n, textures); }
PHASER_FORCE_INLINE void  phaserCreateTransformFeedbacks(GLsizei n, GLuint * ids) { phaserGL.CreateTransformFeedbacks(n, ids); }
PHASER_FORCE_INLINE void  phaserCreateVertexArrays(GLsizei n, GLuint * arrays) { phaserGL.CreateVertexArrays(n, arrays); }
PHASER_FORCE_INLINE void  phaserCullFace(GLenum mode) { phaserGL.CullFace(mode); }
PHASER_FORCE_INLINE void  phaserCullParameterdvEXT(GLenum pname, GLdouble * params) { phaserGL.CullParameterdvEXT(pname, params); }
PHASER_FORCE_INLINE void  phaserCullParameterfvEXT(GLenum pname, GLfloat * params) { phaserGL.CullParameterfvEXT(pname, params); }
PHASER_FORCE_INLINE void  phaserCurrentPaletteMatrixARB(GLint index) { phaserGL.CurrentPaletteMatrixARB(index); }
PHASER_FORCE_INLINE void  phaserCurrentPaletteMatrixOES(GLuint matrixpaletteindex) { phaserGL.CurrentPaletteMatrixOES(matrixpaletteindex); }
PHASER_FORCE_INLINE void  phaserDebugMessageCallback(GLDEBUGPROC callback, const void * userParam) { phaserGL.DebugMessageCallback(callback, userParam); }
PHASER_FORCE_INLINE void  phaserDebugMessageCallbackAMD(GLDEBUGPROCAMD callback, void * userParam) { phaserGL.DebugMessageCallbackAMD(callback, userParam); }
PHASER_FORCE_INLINE void  phaserDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void * userParam) { phaserGL.DebugMessageCallbackARB(callback, userParam); }
PHASER_FORCE_INLINE void  phaserDebugMessageCallbackKHR(GLDEBUGPROCKHR callback, const void * userParam) { phaserGL.DebugMessageCallbackKHR(callback, userParam); }
PHASER_FORCE_INLINE void  phaserDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { phaserGL.DebugMessageControl(source, type, severity, count, ids, enabled); }
PHASER_FORCE_INLINE void  phaserDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { phaserGL.DebugMessageControlARB(source, type, severity, count, ids, enabled); }
PHASER_FORCE_INLINE void  phaserDebugMessageControlKHR(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { phaserGL.DebugMessageControlKHR(source, type, severity, count, ids, enabled); }
PHASER_FORCE_INLINE void  phaserDebugMessageEnableAMD(GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) { phaserGL.DebugMessageEnableAMD(category, severity, count, ids, enabled); }
PHASER_FORCE_INLINE void  phaserDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { phaserGL.DebugMessageInsert(source, type, id, severity, length, buf); }
PHASER_FORCE_INLINE void  phaserDebugMessageInsertAMD(GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf) { phaserGL.DebugMessageInsertAMD(category, severity, id, length, buf); }
PHASER_FORCE_INLINE void  phaserDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { phaserGL.DebugMessageInsertARB(source, type, id, severity, length, buf); }
PHASER_FORCE_INLINE void  phaserDebugMessageInsertKHR(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) { phaserGL.DebugMessageInsertKHR(source, type, id, severity, length, buf); }
PHASER_FORCE_INLINE void  phaserDeformSGIX(GLbitfield mask) { phaserGL.DeformSGIX(mask); }
PHASER_FORCE_INLINE void  phaserDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points) { phaserGL.DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
PHASER_FORCE_INLINE void  phaserDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points) { phaserGL.DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points); }
PHASER_FORCE_INLINE void  phaserDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range) { phaserGL.DeleteAsyncMarkersSGIX(marker, range); }
PHASER_FORCE_INLINE void  phaserDeleteBufferRegion(GLenum region) { phaserGL.DeleteBufferRegion(region); }
PHASER_FORCE_INLINE void  phaserDeleteBuffers(GLsizei n, const GLuint * buffers) { phaserGL.DeleteBuffers(n, buffers); }
PHASER_FORCE_INLINE void  phaserDeleteBuffersARB(GLsizei n, const GLuint * buffers) { phaserGL.DeleteBuffersARB(n, buffers); }
PHASER_FORCE_INLINE void  phaserDeleteCommandListsNV(GLsizei n, const GLuint * lists) { phaserGL.DeleteCommandListsNV(n, lists); }
PHASER_FORCE_INLINE void  phaserDeleteFencesAPPLE(GLsizei n, const GLuint * fences) { phaserGL.DeleteFencesAPPLE(n, fences); }
PHASER_FORCE_INLINE void  phaserDeleteFencesNV(GLsizei n, const GLuint * fences) { phaserGL.DeleteFencesNV(n, fences); }
PHASER_FORCE_INLINE void  phaserDeleteFragmentShaderATI(GLuint id) { phaserGL.DeleteFragmentShaderATI(id); }
PHASER_FORCE_INLINE void  phaserDeleteFramebuffers(GLsizei n, const GLuint * framebuffers) { phaserGL.DeleteFramebuffers(n, framebuffers); }
PHASER_FORCE_INLINE void  phaserDeleteFramebuffersEXT(GLsizei n, const GLuint * framebuffers) { phaserGL.DeleteFramebuffersEXT(n, framebuffers); }
PHASER_FORCE_INLINE void  phaserDeleteFramebuffersOES(GLsizei n, const GLuint * framebuffers) { phaserGL.DeleteFramebuffersOES(n, framebuffers); }
PHASER_FORCE_INLINE void  phaserDeleteLists(GLuint list, GLsizei range) { phaserGL.DeleteLists(list, range); }
PHASER_FORCE_INLINE void  phaserDeleteMemoryObjectsEXT(GLsizei n, const GLuint * memoryObjects) { phaserGL.DeleteMemoryObjectsEXT(n, memoryObjects); }
PHASER_FORCE_INLINE void  phaserDeleteNamedStringARB(GLint namelen, const GLchar * name) { phaserGL.DeleteNamedStringARB(namelen, name); }
PHASER_FORCE_INLINE void  phaserDeleteNamesAMD(GLenum identifier, GLuint num, const GLuint * names) { phaserGL.DeleteNamesAMD(identifier, num, names); }
PHASER_FORCE_INLINE void  phaserDeleteObjectARB(GLhandleARB obj) { phaserGL.DeleteObjectARB(obj); }
PHASER_FORCE_INLINE void  phaserDeleteOcclusionQueriesNV(GLsizei n, const GLuint * ids) { phaserGL.DeleteOcclusionQueriesNV(n, ids); }
PHASER_FORCE_INLINE void  phaserDeletePathsNV(GLuint path, GLsizei range) { phaserGL.DeletePathsNV(path, range); }
PHASER_FORCE_INLINE void  phaserDeletePerfMonitorsAMD(GLsizei n, GLuint * monitors) { phaserGL.DeletePerfMonitorsAMD(n, monitors); }
PHASER_FORCE_INLINE void  phaserDeletePerfQueryINTEL(GLuint queryHandle) { phaserGL.DeletePerfQueryINTEL(queryHandle); }
PHASER_FORCE_INLINE void  phaserDeleteProgram(GLuint program) { phaserGL.DeleteProgram(program); }
PHASER_FORCE_INLINE void  phaserDeleteProgramPipelines(GLsizei n, const GLuint * pipelines) { phaserGL.DeleteProgramPipelines(n, pipelines); }
PHASER_FORCE_INLINE void  phaserDeleteProgramPipelinesEXT(GLsizei n, const GLuint * pipelines) { phaserGL.DeleteProgramPipelinesEXT(n, pipelines); }
PHASER_FORCE_INLINE void  phaserDeleteProgramsARB(GLsizei n, const GLuint * programs) { phaserGL.DeleteProgramsARB(n, programs); }
PHASER_FORCE_INLINE void  phaserDeleteProgramsNV(GLsizei n, const GLuint * programs) { phaserGL.DeleteProgramsNV(n, programs); }
PHASER_FORCE_INLINE void  phaserDeleteQueries(GLsizei n, const GLuint * ids) { phaserGL.DeleteQueries(n, ids); }
PHASER_FORCE_INLINE void  phaserDeleteQueriesARB(GLsizei n, const GLuint * ids) { phaserGL.DeleteQueriesARB(n, ids); }
PHASER_FORCE_INLINE void  phaserDeleteQueriesEXT(GLsizei n, const GLuint * ids) { phaserGL.DeleteQueriesEXT(n, ids); }
PHASER_FORCE_INLINE void  phaserDeleteQueryResourceTagNV(GLsizei n, const GLint * tagIds) { phaserGL.DeleteQueryResourceTagNV(n, tagIds); }
PHASER_FORCE_INLINE void  phaserDeleteRenderbuffers(GLsizei n, const GLuint * renderbuffers) { phaserGL.DeleteRenderbuffers(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserDeleteRenderbuffersEXT(GLsizei n, const GLuint * renderbuffers) { phaserGL.DeleteRenderbuffersEXT(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserDeleteRenderbuffersOES(GLsizei n, const GLuint * renderbuffers) { phaserGL.DeleteRenderbuffersOES(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserDeleteSamplers(GLsizei count, const GLuint * samplers) { phaserGL.DeleteSamplers(count, samplers); }
PHASER_FORCE_INLINE void  phaserDeleteSemaphoresEXT(GLsizei n, const GLuint * semaphores) { phaserGL.DeleteSemaphoresEXT(n, semaphores); }
PHASER_FORCE_INLINE void  phaserDeleteShader(GLuint shader) { phaserGL.DeleteShader(shader); }
PHASER_FORCE_INLINE void  phaserDeleteStatesNV(GLsizei n, const GLuint * states) { phaserGL.DeleteStatesNV(n, states); }
PHASER_FORCE_INLINE void  phaserDeleteSync(GLsync sync) { phaserGL.DeleteSync(sync); }
PHASER_FORCE_INLINE void  phaserDeleteSyncAPPLE(GLsync sync) { phaserGL.DeleteSyncAPPLE(sync); }
PHASER_FORCE_INLINE void  phaserDeleteTextures(GLsizei n, const GLuint * textures) { phaserGL.DeleteTextures(n, textures); }
PHASER_FORCE_INLINE void  phaserDeleteTexturesEXT(GLsizei n, const GLuint * textures) { phaserGL.DeleteTexturesEXT(n, textures); }
PHASER_FORCE_INLINE void  phaserDeleteTransformFeedbacks(GLsizei n, const GLuint * ids) { phaserGL.DeleteTransformFeedbacks(n, ids); }
PHASER_FORCE_INLINE void  phaserDeleteTransformFeedbacksNV(GLsizei n, const GLuint * ids) { phaserGL.DeleteTransformFeedbacksNV(n, ids); }
PHASER_FORCE_INLINE void  phaserDeleteVertexArrays(GLsizei n, const GLuint * arrays) { phaserGL.DeleteVertexArrays(n, arrays); }
PHASER_FORCE_INLINE void  phaserDeleteVertexArraysAPPLE(GLsizei n, const GLuint * arrays) { phaserGL.DeleteVertexArraysAPPLE(n, arrays); }
PHASER_FORCE_INLINE void  phaserDeleteVertexArraysOES(GLsizei n, const GLuint * arrays) { phaserGL.DeleteVertexArraysOES(n, arrays); }
PHASER_FORCE_INLINE void  phaserDeleteVertexShaderEXT(GLuint id) { phaserGL.DeleteVertexShaderEXT(id); }
PHASER_FORCE_INLINE void  phaserDepthBoundsEXT(GLclampd zmin, GLclampd zmax) { phaserGL.DepthBoundsEXT(zmin, zmax); }
PHASER_FORCE_INLINE void  phaserDepthBoundsdNV(GLdouble zmin, GLdouble zmax) { phaserGL.DepthBoundsdNV(zmin, zmax); }
PHASER_FORCE_INLINE void  phaserDepthFunc(GLenum func) { phaserGL.DepthFunc(func); }
PHASER_FORCE_INLINE void  phaserDepthMask(GLboolean flag) { phaserGL.DepthMask(flag); }
PHASER_FORCE_INLINE void  phaserDepthRange(GLdouble near, GLdouble far) { phaserGL.DepthRange(near, far); }
PHASER_FORCE_INLINE void  phaserDepthRangeArrayfvNV(GLuint first, GLsizei count, const GLfloat * v) { phaserGL.DepthRangeArrayfvNV(first, count, v); }
PHASER_FORCE_INLINE void  phaserDepthRangeArrayfvOES(GLuint first, GLsizei count, const GLfloat * v) { phaserGL.DepthRangeArrayfvOES(first, count, v); }
PHASER_FORCE_INLINE void  phaserDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble * v) { phaserGL.DepthRangeArrayv(first, count, v); }
PHASER_FORCE_INLINE void  phaserDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f) { phaserGL.DepthRangeIndexed(index, n, f); }
PHASER_FORCE_INLINE void  phaserDepthRangeIndexedfNV(GLuint index, GLfloat n, GLfloat f) { phaserGL.DepthRangeIndexedfNV(index, n, f); }
PHASER_FORCE_INLINE void  phaserDepthRangeIndexedfOES(GLuint index, GLfloat n, GLfloat f) { phaserGL.DepthRangeIndexedfOES(index, n, f); }
PHASER_FORCE_INLINE void  phaserDepthRangedNV(GLdouble zNear, GLdouble zFar) { phaserGL.DepthRangedNV(zNear, zFar); }
PHASER_FORCE_INLINE void  phaserDepthRangef(GLfloat n, GLfloat f) { phaserGL.DepthRangef(n, f); }
PHASER_FORCE_INLINE void  phaserDepthRangefOES(GLclampf n, GLclampf f) { phaserGL.DepthRangefOES(n, f); }
PHASER_FORCE_INLINE void  phaserDepthRangex(GLfixed n, GLfixed f) { phaserGL.DepthRangex(n, f); }
PHASER_FORCE_INLINE void  phaserDepthRangexOES(GLfixed n, GLfixed f) { phaserGL.DepthRangexOES(n, f); }
PHASER_FORCE_INLINE void  phaserDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj) { phaserGL.DetachObjectARB(containerObj, attachedObj); }
PHASER_FORCE_INLINE void  phaserDetachShader(GLuint program, GLuint shader) { phaserGL.DetachShader(program, shader); }
PHASER_FORCE_INLINE void  phaserDetailTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { phaserGL.DetailTexFuncSGIS(target, n, points); }
PHASER_FORCE_INLINE void  phaserDisable(GLenum cap) { phaserGL.Disable(cap); }
PHASER_FORCE_INLINE void  phaserDisableClientState(GLenum array) { phaserGL.DisableClientState(array); }
PHASER_FORCE_INLINE void  phaserDisableClientStateIndexedEXT(GLenum array, GLuint index) { phaserGL.DisableClientStateIndexedEXT(array, index); }
PHASER_FORCE_INLINE void  phaserDisableClientStateiEXT(GLenum array, GLuint index) { phaserGL.DisableClientStateiEXT(array, index); }
PHASER_FORCE_INLINE void  phaserDisableDriverControlQCOM(GLuint driverControl) { phaserGL.DisableDriverControlQCOM(driverControl); }
PHASER_FORCE_INLINE void  phaserDisableIndexedEXT(GLenum target, GLuint index) { phaserGL.DisableIndexedEXT(target, index); }
PHASER_FORCE_INLINE void  phaserDisableVariantClientStateEXT(GLuint id) { phaserGL.DisableVariantClientStateEXT(id); }
PHASER_FORCE_INLINE void  phaserDisableVertexArrayAttrib(GLuint vaobj, GLuint index) { phaserGL.DisableVertexArrayAttrib(vaobj, index); }
PHASER_FORCE_INLINE void  phaserDisableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { phaserGL.DisableVertexArrayAttribEXT(vaobj, index); }
PHASER_FORCE_INLINE void  phaserDisableVertexArrayEXT(GLuint vaobj, GLenum array) { phaserGL.DisableVertexArrayEXT(vaobj, array); }
PHASER_FORCE_INLINE void  phaserDisableVertexAttribAPPLE(GLuint index, GLenum pname) { phaserGL.DisableVertexAttribAPPLE(index, pname); }
PHASER_FORCE_INLINE void  phaserDisableVertexAttribArray(GLuint index) { phaserGL.DisableVertexAttribArray(index); }
PHASER_FORCE_INLINE void  phaserDisableVertexAttribArrayARB(GLuint index) { phaserGL.DisableVertexAttribArrayARB(index); }
PHASER_FORCE_INLINE void  phaserDisablei(GLenum target, GLuint index) { phaserGL.Disablei(target, index); }
PHASER_FORCE_INLINE void  phaserDisableiEXT(GLenum target, GLuint index) { phaserGL.DisableiEXT(target, index); }
PHASER_FORCE_INLINE void  phaserDisableiNV(GLenum target, GLuint index) { phaserGL.DisableiNV(target, index); }
PHASER_FORCE_INLINE void  phaserDisableiOES(GLenum target, GLuint index) { phaserGL.DisableiOES(target, index); }
PHASER_FORCE_INLINE void  phaserDiscardFramebufferEXT(GLenum target, GLsizei numAttachments, const GLenum * attachments) { phaserGL.DiscardFramebufferEXT(target, numAttachments, attachments); }
PHASER_FORCE_INLINE void  phaserDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) { phaserGL.DispatchCompute(num_groups_x, num_groups_y, num_groups_z); }
PHASER_FORCE_INLINE void  phaserDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z) { phaserGL.DispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z); }
PHASER_FORCE_INLINE void  phaserDispatchComputeIndirect(GLintptr indirect) { phaserGL.DispatchComputeIndirect(indirect); }
PHASER_FORCE_INLINE void  phaserDrawArrays(GLenum mode, GLint first, GLsizei count) { phaserGL.DrawArrays(mode, first, count); }
PHASER_FORCE_INLINE void  phaserDrawArraysEXT(GLenum mode, GLint first, GLsizei count) { phaserGL.DrawArraysEXT(mode, first, count); }
PHASER_FORCE_INLINE void  phaserDrawArraysIndirect(GLenum mode, const void * indirect) { phaserGL.DrawArraysIndirect(mode, indirect); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount) { phaserGL.DrawArraysInstanced(mode, first, count, instancecount); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstancedANGLE(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { phaserGL.DrawArraysInstancedANGLE(mode, first, count, primcount); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { phaserGL.DrawArraysInstancedARB(mode, first, count, primcount); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { phaserGL.DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstancedBaseInstanceEXT(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance) { phaserGL.DrawArraysInstancedBaseInstanceEXT(mode, first, count, instancecount, baseinstance); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount) { phaserGL.DrawArraysInstancedEXT(mode, start, count, primcount); }
PHASER_FORCE_INLINE void  phaserDrawArraysInstancedNV(GLenum mode, GLint first, GLsizei count, GLsizei primcount) { phaserGL.DrawArraysInstancedNV(mode, first, count, primcount); }
PHASER_FORCE_INLINE void  phaserDrawBuffer(GLenum buf) { phaserGL.DrawBuffer(buf); }
PHASER_FORCE_INLINE void  phaserDrawBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest) { phaserGL.DrawBufferRegion(region, x, y, width, height, xDest, yDest); }
PHASER_FORCE_INLINE void  phaserDrawBuffers(GLsizei n, const GLenum * bufs) { phaserGL.DrawBuffers(n, bufs); }
PHASER_FORCE_INLINE void  phaserDrawBuffersARB(GLsizei n, const GLenum * bufs) { phaserGL.DrawBuffersARB(n, bufs); }
PHASER_FORCE_INLINE void  phaserDrawBuffersATI(GLsizei n, const GLenum * bufs) { phaserGL.DrawBuffersATI(n, bufs); }
PHASER_FORCE_INLINE void  phaserDrawBuffersEXT(GLsizei n, const GLenum * bufs) { phaserGL.DrawBuffersEXT(n, bufs); }
PHASER_FORCE_INLINE void  phaserDrawBuffersIndexedEXT(GLint n, const GLenum * location, const GLint * indices) { phaserGL.DrawBuffersIndexedEXT(n, location, indices); }
PHASER_FORCE_INLINE void  phaserDrawBuffersNV(GLsizei n, const GLenum * bufs) { phaserGL.DrawBuffersNV(n, bufs); }
PHASER_FORCE_INLINE void  phaserDrawCommandsAddressNV(GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count) { phaserGL.DrawCommandsAddressNV(primitiveMode, indirects, sizes, count); }
PHASER_FORCE_INLINE void  phaserDrawCommandsNV(GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count) { phaserGL.DrawCommandsNV(primitiveMode, buffer, indirects, sizes, count); }
PHASER_FORCE_INLINE void  phaserDrawCommandsStatesAddressNV(const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { phaserGL.DrawCommandsStatesAddressNV(indirects, sizes, states, fbos, count); }
PHASER_FORCE_INLINE void  phaserDrawCommandsStatesNV(GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { phaserGL.DrawCommandsStatesNV(buffer, indirects, sizes, states, fbos, count); }
PHASER_FORCE_INLINE void  phaserDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count) { phaserGL.DrawElementArrayAPPLE(mode, first, count); }
PHASER_FORCE_INLINE void  phaserDrawElementArrayATI(GLenum mode, GLsizei count) { phaserGL.DrawElementArrayATI(mode, count); }
PHASER_FORCE_INLINE void  phaserDrawElements(GLenum mode, GLsizei count, GLenum type, const void * indices) { phaserGL.DrawElements(mode, count, type, indices); }
PHASER_FORCE_INLINE void  phaserDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { phaserGL.DrawElementsBaseVertex(mode, count, type, indices, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawElementsBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { phaserGL.DrawElementsBaseVertexEXT(mode, count, type, indices, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawElementsBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex) { phaserGL.DrawElementsBaseVertexOES(mode, count, type, indices, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect) { phaserGL.DrawElementsIndirect(mode, type, indirect); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount) { phaserGL.DrawElementsInstanced(mode, count, type, indices, instancecount); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedANGLE(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { phaserGL.DrawElementsInstancedANGLE(mode, count, type, indices, primcount); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { phaserGL.DrawElementsInstancedARB(mode, count, type, indices, primcount); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { phaserGL.DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance) { phaserGL.DrawElementsInstancedBaseInstanceEXT(mode, count, type, indices, instancecount, baseinstance); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { phaserGL.DrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { phaserGL.DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseVertexBaseInstanceEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance) { phaserGL.DrawElementsInstancedBaseVertexBaseInstanceEXT(mode, count, type, indices, instancecount, basevertex, baseinstance); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseVertexEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { phaserGL.DrawElementsInstancedBaseVertexEXT(mode, count, type, indices, instancecount, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedBaseVertexOES(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex) { phaserGL.DrawElementsInstancedBaseVertexOES(mode, count, type, indices, instancecount, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { phaserGL.DrawElementsInstancedEXT(mode, count, type, indices, primcount); }
PHASER_FORCE_INLINE void  phaserDrawElementsInstancedNV(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount) { phaserGL.DrawElementsInstancedNV(mode, count, type, indices, primcount); }
PHASER_FORCE_INLINE void  phaserDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width) { phaserGL.DrawMeshArraysSUN(mode, first, count, width); }
PHASER_FORCE_INLINE void  phaserDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { phaserGL.DrawPixels(width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count) { phaserGL.DrawRangeElementArrayAPPLE(mode, start, end, first, count); }
PHASER_FORCE_INLINE void  phaserDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count) { phaserGL.DrawRangeElementArrayATI(mode, start, end, count); }
PHASER_FORCE_INLINE void  phaserDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { phaserGL.DrawRangeElements(mode, start, end, count, type, indices); }
PHASER_FORCE_INLINE void  phaserDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { phaserGL.DrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawRangeElementsBaseVertexEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { phaserGL.DrawRangeElementsBaseVertexEXT(mode, start, end, count, type, indices, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawRangeElementsBaseVertexOES(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex) { phaserGL.DrawRangeElementsBaseVertexOES(mode, start, end, count, type, indices, basevertex); }
PHASER_FORCE_INLINE void  phaserDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices) { phaserGL.DrawRangeElementsEXT(mode, start, end, count, type, indices); }
PHASER_FORCE_INLINE void  phaserDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height) { phaserGL.DrawTexfOES(x, y, z, width, height); }
PHASER_FORCE_INLINE void  phaserDrawTexfvOES(const GLfloat * coords) { phaserGL.DrawTexfvOES(coords); }
PHASER_FORCE_INLINE void  phaserDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height) { phaserGL.DrawTexiOES(x, y, z, width, height); }
PHASER_FORCE_INLINE void  phaserDrawTexivOES(const GLint * coords) { phaserGL.DrawTexivOES(coords); }
PHASER_FORCE_INLINE void  phaserDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height) { phaserGL.DrawTexsOES(x, y, z, width, height); }
PHASER_FORCE_INLINE void  phaserDrawTexsvOES(const GLshort * coords) { phaserGL.DrawTexsvOES(coords); }
PHASER_FORCE_INLINE void  phaserDrawTextureNV(GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { phaserGL.DrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
PHASER_FORCE_INLINE void  phaserDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height) { phaserGL.DrawTexxOES(x, y, z, width, height); }
PHASER_FORCE_INLINE void  phaserDrawTexxvOES(const GLfixed * coords) { phaserGL.DrawTexxvOES(coords); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedback(GLenum mode, GLuint id) { phaserGL.DrawTransformFeedback(mode, id); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedbackEXT(GLenum mode, GLuint id) { phaserGL.DrawTransformFeedbackEXT(mode, id); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount) { phaserGL.DrawTransformFeedbackInstanced(mode, id, instancecount); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedbackInstancedEXT(GLenum mode, GLuint id, GLsizei instancecount) { phaserGL.DrawTransformFeedbackInstancedEXT(mode, id, instancecount); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedbackNV(GLenum mode, GLuint id) { phaserGL.DrawTransformFeedbackNV(mode, id); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream) { phaserGL.DrawTransformFeedbackStream(mode, id, stream); }
PHASER_FORCE_INLINE void  phaserDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount) { phaserGL.DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount); }
PHASER_FORCE_INLINE void  phaserDrawVkImageNV(GLuint64 vkImage, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1) { phaserGL.DrawVkImageNV(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1); }
PHASER_FORCE_INLINE void  phaserEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image) { phaserGL.EGLImageTargetRenderbufferStorageOES(target, image); }
PHASER_FORCE_INLINE void  phaserEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image) { phaserGL.EGLImageTargetTexture2DOES(target, image); }
PHASER_FORCE_INLINE void  phaserEdgeFlag(GLboolean flag) { phaserGL.EdgeFlag(flag); }
PHASER_FORCE_INLINE void  phaserEdgeFlagFormatNV(GLsizei stride) { phaserGL.EdgeFlagFormatNV(stride); }
PHASER_FORCE_INLINE void  phaserEdgeFlagPointer(GLsizei stride, const void * pointer) { phaserGL.EdgeFlagPointer(stride, pointer); }
PHASER_FORCE_INLINE void  phaserEdgeFlagPointerEXT(GLsizei stride, GLsizei count, const GLboolean * pointer) { phaserGL.EdgeFlagPointerEXT(stride, count, pointer); }
PHASER_FORCE_INLINE void  phaserEdgeFlagPointerListIBM(GLint stride, const GLboolean ** pointer, GLint ptrstride) { phaserGL.EdgeFlagPointerListIBM(stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserEdgeFlagv(const GLboolean * flag) { phaserGL.EdgeFlagv(flag); }
PHASER_FORCE_INLINE void  phaserElementPointerAPPLE(GLenum type, const void * pointer) { phaserGL.ElementPointerAPPLE(type, pointer); }
PHASER_FORCE_INLINE void  phaserElementPointerATI(GLenum type, const void * pointer) { phaserGL.ElementPointerATI(type, pointer); }
PHASER_FORCE_INLINE void  phaserEnable(GLenum cap) { phaserGL.Enable(cap); }
PHASER_FORCE_INLINE void  phaserEnableClientState(GLenum array) { phaserGL.EnableClientState(array); }
PHASER_FORCE_INLINE void  phaserEnableClientStateIndexedEXT(GLenum array, GLuint index) { phaserGL.EnableClientStateIndexedEXT(array, index); }
PHASER_FORCE_INLINE void  phaserEnableClientStateiEXT(GLenum array, GLuint index) { phaserGL.EnableClientStateiEXT(array, index); }
PHASER_FORCE_INLINE void  phaserEnableDriverControlQCOM(GLuint driverControl) { phaserGL.EnableDriverControlQCOM(driverControl); }
PHASER_FORCE_INLINE void  phaserEnableIndexedEXT(GLenum target, GLuint index) { phaserGL.EnableIndexedEXT(target, index); }
PHASER_FORCE_INLINE void  phaserEnableVariantClientStateEXT(GLuint id) { phaserGL.EnableVariantClientStateEXT(id); }
PHASER_FORCE_INLINE void  phaserEnableVertexArrayAttrib(GLuint vaobj, GLuint index) { phaserGL.EnableVertexArrayAttrib(vaobj, index); }
PHASER_FORCE_INLINE void  phaserEnableVertexArrayAttribEXT(GLuint vaobj, GLuint index) { phaserGL.EnableVertexArrayAttribEXT(vaobj, index); }
PHASER_FORCE_INLINE void  phaserEnableVertexArrayEXT(GLuint vaobj, GLenum array) { phaserGL.EnableVertexArrayEXT(vaobj, array); }
PHASER_FORCE_INLINE void  phaserEnableVertexAttribAPPLE(GLuint index, GLenum pname) { phaserGL.EnableVertexAttribAPPLE(index, pname); }
PHASER_FORCE_INLINE void  phaserEnableVertexAttribArray(GLuint index) { phaserGL.EnableVertexAttribArray(index); }
PHASER_FORCE_INLINE void  phaserEnableVertexAttribArrayARB(GLuint index) { phaserGL.EnableVertexAttribArrayARB(index); }
PHASER_FORCE_INLINE void  phaserEnablei(GLenum target, GLuint index) { phaserGL.Enablei(target, index); }
PHASER_FORCE_INLINE void  phaserEnableiEXT(GLenum target, GLuint index) { phaserGL.EnableiEXT(target, index); }
PHASER_FORCE_INLINE void  phaserEnableiNV(GLenum target, GLuint index) { phaserGL.EnableiNV(target, index); }
PHASER_FORCE_INLINE void  phaserEnableiOES(GLenum target, GLuint index) { phaserGL.EnableiOES(target, index); }
PHASER_FORCE_INLINE void  phaserEnd(void) { phaserGL.End(); }
PHASER_FORCE_INLINE void  phaserEndConditionalRender(void) { phaserGL.EndConditionalRender(); }
PHASER_FORCE_INLINE void  phaserEndConditionalRenderNV(void) { phaserGL.EndConditionalRenderNV(); }
PHASER_FORCE_INLINE void  phaserEndConditionalRenderNVX(void) { phaserGL.EndConditionalRenderNVX(); }
PHASER_FORCE_INLINE void  phaserEndFragmentShaderATI(void) { phaserGL.EndFragmentShaderATI(); }
PHASER_FORCE_INLINE void  phaserEndList(void) { phaserGL.EndList(); }
PHASER_FORCE_INLINE void  phaserEndOcclusionQueryNV(void) { phaserGL.EndOcclusionQueryNV(); }
PHASER_FORCE_INLINE void  phaserEndPerfMonitorAMD(GLuint monitor) { phaserGL.EndPerfMonitorAMD(monitor); }
PHASER_FORCE_INLINE void  phaserEndPerfQueryINTEL(GLuint queryHandle) { phaserGL.EndPerfQueryINTEL(queryHandle); }
PHASER_FORCE_INLINE void  phaserEndQuery(GLenum target) { phaserGL.EndQuery(target); }
PHASER_FORCE_INLINE void  phaserEndQueryARB(GLenum target) { phaserGL.EndQueryARB(target); }
PHASER_FORCE_INLINE void  phaserEndQueryEXT(GLenum target) { phaserGL.EndQueryEXT(target); }
PHASER_FORCE_INLINE void  phaserEndQueryIndexed(GLenum target, GLuint index) { phaserGL.EndQueryIndexed(target, index); }
PHASER_FORCE_INLINE void  phaserEndTilingQCOM(GLbitfield preserveMask) { phaserGL.EndTilingQCOM(preserveMask); }
PHASER_FORCE_INLINE void  phaserEndTransformFeedback(void) { phaserGL.EndTransformFeedback(); }
PHASER_FORCE_INLINE void  phaserEndTransformFeedbackEXT(void) { phaserGL.EndTransformFeedbackEXT(); }
PHASER_FORCE_INLINE void  phaserEndTransformFeedbackNV(void) { phaserGL.EndTransformFeedbackNV(); }
PHASER_FORCE_INLINE void  phaserEndVertexShaderEXT(void) { phaserGL.EndVertexShaderEXT(); }
PHASER_FORCE_INLINE void  phaserEndVideoCaptureNV(GLuint video_capture_slot) { phaserGL.EndVideoCaptureNV(video_capture_slot); }
PHASER_FORCE_INLINE void  phaserEvalCoord1d(GLdouble u) { phaserGL.EvalCoord1d(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord1dv(const GLdouble * u) { phaserGL.EvalCoord1dv(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord1f(GLfloat u) { phaserGL.EvalCoord1f(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord1fv(const GLfloat * u) { phaserGL.EvalCoord1fv(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord1xOES(GLfixed u) { phaserGL.EvalCoord1xOES(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord1xvOES(const GLfixed * coords) { phaserGL.EvalCoord1xvOES(coords); }
PHASER_FORCE_INLINE void  phaserEvalCoord2d(GLdouble u, GLdouble v) { phaserGL.EvalCoord2d(u, v); }
PHASER_FORCE_INLINE void  phaserEvalCoord2dv(const GLdouble * u) { phaserGL.EvalCoord2dv(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord2f(GLfloat u, GLfloat v) { phaserGL.EvalCoord2f(u, v); }
PHASER_FORCE_INLINE void  phaserEvalCoord2fv(const GLfloat * u) { phaserGL.EvalCoord2fv(u); }
PHASER_FORCE_INLINE void  phaserEvalCoord2xOES(GLfixed u, GLfixed v) { phaserGL.EvalCoord2xOES(u, v); }
PHASER_FORCE_INLINE void  phaserEvalCoord2xvOES(const GLfixed * coords) { phaserGL.EvalCoord2xvOES(coords); }
PHASER_FORCE_INLINE void  phaserEvalMapsNV(GLenum target, GLenum mode) { phaserGL.EvalMapsNV(target, mode); }
PHASER_FORCE_INLINE void  phaserEvalMesh1(GLenum mode, GLint i1, GLint i2) { phaserGL.EvalMesh1(mode, i1, i2); }
PHASER_FORCE_INLINE void  phaserEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) { phaserGL.EvalMesh2(mode, i1, i2, j1, j2); }
PHASER_FORCE_INLINE void  phaserEvalPoint1(GLint i) { phaserGL.EvalPoint1(i); }
PHASER_FORCE_INLINE void  phaserEvalPoint2(GLint i, GLint j) { phaserGL.EvalPoint2(i, j); }
PHASER_FORCE_INLINE void  phaserEvaluateDepthValuesARB(void) { phaserGL.EvaluateDepthValuesARB(); }
PHASER_FORCE_INLINE void  phaserExecuteProgramNV(GLenum target, GLuint id, const GLfloat * params) { phaserGL.ExecuteProgramNV(target, id, params); }
PHASER_FORCE_INLINE void  phaserExtGetBufferPointervQCOM(GLenum target, void ** params) { phaserGL.ExtGetBufferPointervQCOM(target, params); }
PHASER_FORCE_INLINE void  phaserExtGetBuffersQCOM(GLuint * buffers, GLint maxBuffers, GLint * numBuffers) { phaserGL.ExtGetBuffersQCOM(buffers, maxBuffers, numBuffers); }
PHASER_FORCE_INLINE void  phaserExtGetFramebuffersQCOM(GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers) { phaserGL.ExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers); }
PHASER_FORCE_INLINE void  phaserExtGetProgramBinarySourceQCOM(GLuint program, GLenum shadertype, GLchar * source, GLint * length) { phaserGL.ExtGetProgramBinarySourceQCOM(program, shadertype, source, length); }
PHASER_FORCE_INLINE void  phaserExtGetProgramsQCOM(GLuint * programs, GLint maxPrograms, GLint * numPrograms) { phaserGL.ExtGetProgramsQCOM(programs, maxPrograms, numPrograms); }
PHASER_FORCE_INLINE void  phaserExtGetRenderbuffersQCOM(GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers) { phaserGL.ExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers); }
PHASER_FORCE_INLINE void  phaserExtGetShadersQCOM(GLuint * shaders, GLint maxShaders, GLint * numShaders) { phaserGL.ExtGetShadersQCOM(shaders, maxShaders, numShaders); }
PHASER_FORCE_INLINE void  phaserExtGetTexLevelParameterivQCOM(GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params) { phaserGL.ExtGetTexLevelParameterivQCOM(texture, face, level, pname, params); }
PHASER_FORCE_INLINE void  phaserExtGetTexSubImageQCOM(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels) { phaserGL.ExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels); }
PHASER_FORCE_INLINE void  phaserExtGetTexturesQCOM(GLuint * textures, GLint maxTextures, GLint * numTextures) { phaserGL.ExtGetTexturesQCOM(textures, maxTextures, numTextures); }
PHASER_FORCE_INLINE GLboolean phaserExtIsProgramBinaryQCOM(GLuint program) { return phaserGL.ExtIsProgramBinaryQCOM(program); }
PHASER_FORCE_INLINE void  phaserExtTexObjectStateOverrideiQCOM(GLenum target, GLenum pname, GLint param) { phaserGL.ExtTexObjectStateOverrideiQCOM(target, pname, param); }
PHASER_FORCE_INLINE void  phaserExtractComponentEXT(GLuint res, GLuint src, GLuint num) { phaserGL.ExtractComponentEXT(res, src, num); }
PHASER_FORCE_INLINE void  phaserFeedbackBuffer(GLsizei size, GLenum type, GLfloat * buffer) { phaserGL.FeedbackBuffer(size, type, buffer); }
PHASER_FORCE_INLINE void  phaserFeedbackBufferxOES(GLsizei n, GLenum type, const GLfixed * buffer) { phaserGL.FeedbackBufferxOES(n, type, buffer); }
PHASER_FORCE_INLINE GLsync phaserFenceSync(GLenum condition, GLbitfield flags) { return phaserGL.FenceSync(condition, flags); }
PHASER_FORCE_INLINE GLsync phaserFenceSyncAPPLE(GLenum condition, GLbitfield flags) { return phaserGL.FenceSyncAPPLE(condition, flags); }
PHASER_FORCE_INLINE void  phaserFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage) { phaserGL.FinalCombinerInputNV(variable, input, mapping, componentUsage); }
PHASER_FORCE_INLINE void  phaserFinish(void) { phaserGL.Finish(); }
PHASER_FORCE_INLINE GLint phaserFinishAsyncSGIX(GLuint * markerp) { return phaserGL.FinishAsyncSGIX(markerp); }
PHASER_FORCE_INLINE void  phaserFinishFenceAPPLE(GLuint fence) { phaserGL.FinishFenceAPPLE(fence); }
PHASER_FORCE_INLINE void  phaserFinishFenceNV(GLuint fence) { phaserGL.FinishFenceNV(fence); }
PHASER_FORCE_INLINE void  phaserFinishObjectAPPLE(GLenum object, GLint name) { phaserGL.FinishObjectAPPLE(object, name); }
PHASER_FORCE_INLINE void  phaserFinishTextureSUNX(void) { phaserGL.FinishTextureSUNX(); }
PHASER_FORCE_INLINE void  phaserFlush(void) { phaserGL.Flush(); }
PHASER_FORCE_INLINE void  phaserFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length) { phaserGL.FlushMappedBufferRange(target, offset, length); }
PHASER_FORCE_INLINE void  phaserFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size) { phaserGL.FlushMappedBufferRangeAPPLE(target, offset, size); }
PHASER_FORCE_INLINE void  phaserFlushMappedBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length) { phaserGL.FlushMappedBufferRangeEXT(target, offset, length); }
PHASER_FORCE_INLINE void  phaserFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length) { phaserGL.FlushMappedNamedBufferRange(buffer, offset, length); }
PHASER_FORCE_INLINE void  phaserFlushMappedNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length) { phaserGL.FlushMappedNamedBufferRangeEXT(buffer, offset, length); }
PHASER_FORCE_INLINE void  phaserFlushPixelDataRangeNV(GLenum target) { phaserGL.FlushPixelDataRangeNV(target); }
PHASER_FORCE_INLINE void  phaserFlushRasterSGIX(void) { phaserGL.FlushRasterSGIX(); }
PHASER_FORCE_INLINE void  phaserFlushStaticDataIBM(GLenum target) { phaserGL.FlushStaticDataIBM(target); }
PHASER_FORCE_INLINE void  phaserFlushVertexArrayRangeAPPLE(GLsizei length, void * pointer) { phaserGL.FlushVertexArrayRangeAPPLE(length, pointer); }
PHASER_FORCE_INLINE void  phaserFlushVertexArrayRangeNV(void) { phaserGL.FlushVertexArrayRangeNV(); }
PHASER_FORCE_INLINE void  phaserFogCoordFormatNV(GLenum type, GLsizei stride) { phaserGL.FogCoordFormatNV(type, stride); }
PHASER_FORCE_INLINE void  phaserFogCoordPointer(GLenum type, GLsizei stride, const void * pointer) { phaserGL.FogCoordPointer(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserFogCoordPointerEXT(GLenum type, GLsizei stride, const void * pointer) { phaserGL.FogCoordPointerEXT(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserFogCoordPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.FogCoordPointerListIBM(type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserFogCoordd(GLdouble coord) { phaserGL.FogCoordd(coord); }
PHASER_FORCE_INLINE void  phaserFogCoorddEXT(GLdouble coord) { phaserGL.FogCoorddEXT(coord); }
PHASER_FORCE_INLINE void  phaserFogCoorddv(const GLdouble * coord) { phaserGL.FogCoorddv(coord); }
PHASER_FORCE_INLINE void  phaserFogCoorddvEXT(const GLdouble * coord) { phaserGL.FogCoorddvEXT(coord); }
PHASER_FORCE_INLINE void  phaserFogCoordf(GLfloat coord) { phaserGL.FogCoordf(coord); }
PHASER_FORCE_INLINE void  phaserFogCoordfEXT(GLfloat coord) { phaserGL.FogCoordfEXT(coord); }
PHASER_FORCE_INLINE void  phaserFogCoordfv(const GLfloat * coord) { phaserGL.FogCoordfv(coord); }
PHASER_FORCE_INLINE void  phaserFogCoordfvEXT(const GLfloat * coord) { phaserGL.FogCoordfvEXT(coord); }
PHASER_FORCE_INLINE void  phaserFogCoordhNV(GLhalfNV fog) { phaserGL.FogCoordhNV(fog); }
PHASER_FORCE_INLINE void  phaserFogCoordhvNV(const GLhalfNV * fog) { phaserGL.FogCoordhvNV(fog); }
PHASER_FORCE_INLINE void  phaserFogFuncSGIS(GLsizei n, const GLfloat * points) { phaserGL.FogFuncSGIS(n, points); }
PHASER_FORCE_INLINE void  phaserFogf(GLenum pname, GLfloat param) { phaserGL.Fogf(pname, param); }
PHASER_FORCE_INLINE void  phaserFogfv(GLenum pname, const GLfloat * params) { phaserGL.Fogfv(pname, params); }
PHASER_FORCE_INLINE void  phaserFogi(GLenum pname, GLint param) { phaserGL.Fogi(pname, param); }
PHASER_FORCE_INLINE void  phaserFogiv(GLenum pname, const GLint * params) { phaserGL.Fogiv(pname, params); }
PHASER_FORCE_INLINE void  phaserFogx(GLenum pname, GLfixed param) { phaserGL.Fogx(pname, param); }
PHASER_FORCE_INLINE void  phaserFogxOES(GLenum pname, GLfixed param) { phaserGL.FogxOES(pname, param); }
PHASER_FORCE_INLINE void  phaserFogxv(GLenum pname, const GLfixed * param) { phaserGL.Fogxv(pname, param); }
PHASER_FORCE_INLINE void  phaserFogxvOES(GLenum pname, const GLfixed * param) { phaserGL.FogxvOES(pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentColorMaterialSGIX(GLenum face, GLenum mode) { phaserGL.FragmentColorMaterialSGIX(face, mode); }
PHASER_FORCE_INLINE void  phaserFragmentCoverageColorNV(GLuint color) { phaserGL.FragmentCoverageColorNV(color); }
PHASER_FORCE_INLINE void  phaserFragmentLightModelfSGIX(GLenum pname, GLfloat param) { phaserGL.FragmentLightModelfSGIX(pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentLightModelfvSGIX(GLenum pname, const GLfloat * params) { phaserGL.FragmentLightModelfvSGIX(pname, params); }
PHASER_FORCE_INLINE void  phaserFragmentLightModeliSGIX(GLenum pname, GLint param) { phaserGL.FragmentLightModeliSGIX(pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentLightModelivSGIX(GLenum pname, const GLint * params) { phaserGL.FragmentLightModelivSGIX(pname, params); }
PHASER_FORCE_INLINE void  phaserFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param) { phaserGL.FragmentLightfSGIX(light, pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentLightfvSGIX(GLenum light, GLenum pname, const GLfloat * params) { phaserGL.FragmentLightfvSGIX(light, pname, params); }
PHASER_FORCE_INLINE void  phaserFragmentLightiSGIX(GLenum light, GLenum pname, GLint param) { phaserGL.FragmentLightiSGIX(light, pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentLightivSGIX(GLenum light, GLenum pname, const GLint * params) { phaserGL.FragmentLightivSGIX(light, pname, params); }
PHASER_FORCE_INLINE void  phaserFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param) { phaserGL.FragmentMaterialfSGIX(face, pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentMaterialfvSGIX(GLenum face, GLenum pname, const GLfloat * params) { phaserGL.FragmentMaterialfvSGIX(face, pname, params); }
PHASER_FORCE_INLINE void  phaserFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param) { phaserGL.FragmentMaterialiSGIX(face, pname, param); }
PHASER_FORCE_INLINE void  phaserFragmentMaterialivSGIX(GLenum face, GLenum pname, const GLint * params) { phaserGL.FragmentMaterialivSGIX(face, pname, params); }
PHASER_FORCE_INLINE void  phaserFrameTerminatorGREMEDY(void) { phaserGL.FrameTerminatorGREMEDY(); }
PHASER_FORCE_INLINE void  phaserFrameZoomSGIX(GLint factor) { phaserGL.FrameZoomSGIX(factor); }
PHASER_FORCE_INLINE void  phaserFramebufferDrawBufferEXT(GLuint framebuffer, GLenum mode) { phaserGL.FramebufferDrawBufferEXT(framebuffer, mode); }
PHASER_FORCE_INLINE void  phaserFramebufferDrawBuffersEXT(GLuint framebuffer, GLsizei n, const GLenum * bufs) { phaserGL.FramebufferDrawBuffersEXT(framebuffer, n, bufs); }
PHASER_FORCE_INLINE void  phaserFramebufferFetchBarrierQCOM(void) { phaserGL.FramebufferFetchBarrierQCOM(); }
PHASER_FORCE_INLINE void  phaserFramebufferFoveationConfigQCOM(GLuint framebuffer, GLuint numLayers, GLuint focalPointsPerLayer, GLuint requestedFeatures, GLuint * providedFeatures) { phaserGL.FramebufferFoveationConfigQCOM(framebuffer, numLayers, focalPointsPerLayer, requestedFeatures, providedFeatures); }
PHASER_FORCE_INLINE void  phaserFramebufferFoveationParametersQCOM(GLuint framebuffer, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { phaserGL.FramebufferFoveationParametersQCOM(framebuffer, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
PHASER_FORCE_INLINE void  phaserFramebufferParameteri(GLenum target, GLenum pname, GLint param) { phaserGL.FramebufferParameteri(target, pname, param); }
PHASER_FORCE_INLINE void  phaserFramebufferPixelLocalStorageSizeEXT(GLuint target, GLsizei size) { phaserGL.FramebufferPixelLocalStorageSizeEXT(target, size); }
PHASER_FORCE_INLINE void  phaserFramebufferReadBufferEXT(GLuint framebuffer, GLenum mode) { phaserGL.FramebufferReadBufferEXT(framebuffer, mode); }
PHASER_FORCE_INLINE void  phaserFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { phaserGL.FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer); }
PHASER_FORCE_INLINE void  phaserFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { phaserGL.FramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer); }
PHASER_FORCE_INLINE void  phaserFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { phaserGL.FramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer); }
PHASER_FORCE_INLINE void  phaserFramebufferSampleLocationsfvARB(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { phaserGL.FramebufferSampleLocationsfvARB(target, start, count, v); }
PHASER_FORCE_INLINE void  phaserFramebufferSampleLocationsfvNV(GLenum target, GLuint start, GLsizei count, const GLfloat * v) { phaserGL.FramebufferSampleLocationsfvNV(target, start, count, v); }
PHASER_FORCE_INLINE void  phaserFramebufferSamplePositionsfvAMD(GLenum target, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { phaserGL.FramebufferSamplePositionsfvAMD(target, numsamples, pixelindex, values); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level) { phaserGL.FramebufferTexture(target, attachment, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.FramebufferTexture1D(target, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.FramebufferTexture1DEXT(target, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.FramebufferTexture2D(target, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture2DDownsampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale) { phaserGL.FramebufferTexture2DDownsampleIMG(target, attachment, textarget, texture, level, xscale, yscale); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.FramebufferTexture2DEXT(target, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture2DMultisampleEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { phaserGL.FramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture2DMultisampleIMG(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples) { phaserGL.FramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.FramebufferTexture2DOES(target, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { phaserGL.FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { phaserGL.FramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset); }
PHASER_FORCE_INLINE void  phaserFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { phaserGL.FramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureARB(GLenum target, GLenum attachment, GLuint texture, GLint level) { phaserGL.FramebufferTextureARB(target, attachment, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level) { phaserGL.FramebufferTextureEXT(target, attachment, texture, level); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureFaceARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { phaserGL.FramebufferTextureFaceARB(target, attachment, texture, level, face); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face) { phaserGL.FramebufferTextureFaceEXT(target, attachment, texture, level, face); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { phaserGL.FramebufferTextureLayer(target, attachment, texture, level, layer); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureLayerARB(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { phaserGL.FramebufferTextureLayerARB(target, attachment, texture, level, layer); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureLayerDownsampleIMG(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale) { phaserGL.FramebufferTextureLayerDownsampleIMG(target, attachment, texture, level, layer, xscale, yscale); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer) { phaserGL.FramebufferTextureLayerEXT(target, attachment, texture, level, layer); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureMultisampleMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews) { phaserGL.FramebufferTextureMultisampleMultiviewOVR(target, attachment, texture, level, samples, baseViewIndex, numViews); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureMultiviewOVR(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews) { phaserGL.FramebufferTextureMultiviewOVR(target, attachment, texture, level, baseViewIndex, numViews); }
PHASER_FORCE_INLINE void  phaserFramebufferTextureOES(GLenum target, GLenum attachment, GLuint texture, GLint level) { phaserGL.FramebufferTextureOES(target, attachment, texture, level); }
PHASER_FORCE_INLINE void  phaserFreeObjectBufferATI(GLuint buffer) { phaserGL.FreeObjectBufferATI(buffer); }
PHASER_FORCE_INLINE void  phaserFrontFace(GLenum mode) { phaserGL.FrontFace(mode); }
PHASER_FORCE_INLINE void  phaserFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { phaserGL.Frustum(left, right, bottom, top, zNear, zFar); }
PHASER_FORCE_INLINE void  phaserFrustumf(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { phaserGL.Frustumf(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserFrustumfOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { phaserGL.FrustumfOES(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserFrustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { phaserGL.Frustumx(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserFrustumxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { phaserGL.FrustumxOES(l, r, b, t, n, f); }
PHASER_FORCE_INLINE GLuint phaserGenAsyncMarkersSGIX(GLsizei range) { return phaserGL.GenAsyncMarkersSGIX(range); }
PHASER_FORCE_INLINE void  phaserGenBuffers(GLsizei n, GLuint * buffers) { phaserGL.GenBuffers(n, buffers); }
PHASER_FORCE_INLINE void  phaserGenBuffersARB(GLsizei n, GLuint * buffers) { phaserGL.GenBuffersARB(n, buffers); }
PHASER_FORCE_INLINE void  phaserGenFencesAPPLE(GLsizei n, GLuint * fences) { phaserGL.GenFencesAPPLE(n, fences); }
PHASER_FORCE_INLINE void  phaserGenFencesNV(GLsizei n, GLuint * fences) { phaserGL.GenFencesNV(n, fences); }
PHASER_FORCE_INLINE GLuint phaserGenFragmentShadersATI(GLuint range) { return phaserGL.GenFragmentShadersATI(range); }
PHASER_FORCE_INLINE void  phaserGenFramebuffers(GLsizei n, GLuint * framebuffers) { phaserGL.GenFramebuffers(n, framebuffers); }
PHASER_FORCE_INLINE void  phaserGenFramebuffersEXT(GLsizei n, GLuint * framebuffers) { phaserGL.GenFramebuffersEXT(n, framebuffers); }
PHASER_FORCE_INLINE void  phaserGenFramebuffersOES(GLsizei n, GLuint * framebuffers) { phaserGL.GenFramebuffersOES(n, framebuffers); }
PHASER_FORCE_INLINE GLuint phaserGenLists(GLsizei range) { return phaserGL.GenLists(range); }
PHASER_FORCE_INLINE void  phaserGenNamesAMD(GLenum identifier, GLuint num, GLuint * names) { phaserGL.GenNamesAMD(identifier, num, names); }
PHASER_FORCE_INLINE void  phaserGenOcclusionQueriesNV(GLsizei n, GLuint * ids) { phaserGL.GenOcclusionQueriesNV(n, ids); }
PHASER_FORCE_INLINE GLuint phaserGenPathsNV(GLsizei range) { return phaserGL.GenPathsNV(range); }
PHASER_FORCE_INLINE void  phaserGenPerfMonitorsAMD(GLsizei n, GLuint * monitors) { phaserGL.GenPerfMonitorsAMD(n, monitors); }
PHASER_FORCE_INLINE void  phaserGenProgramPipelines(GLsizei n, GLuint * pipelines) { phaserGL.GenProgramPipelines(n, pipelines); }
PHASER_FORCE_INLINE void  phaserGenProgramPipelinesEXT(GLsizei n, GLuint * pipelines) { phaserGL.GenProgramPipelinesEXT(n, pipelines); }
PHASER_FORCE_INLINE void  phaserGenProgramsARB(GLsizei n, GLuint * programs) { phaserGL.GenProgramsARB(n, programs); }
PHASER_FORCE_INLINE void  phaserGenProgramsNV(GLsizei n, GLuint * programs) { phaserGL.GenProgramsNV(n, programs); }
PHASER_FORCE_INLINE void  phaserGenQueries(GLsizei n, GLuint * ids) { phaserGL.GenQueries(n, ids); }
PHASER_FORCE_INLINE void  phaserGenQueriesARB(GLsizei n, GLuint * ids) { phaserGL.GenQueriesARB(n, ids); }
PHASER_FORCE_INLINE void  phaserGenQueriesEXT(GLsizei n, GLuint * ids) { phaserGL.GenQueriesEXT(n, ids); }
PHASER_FORCE_INLINE void  phaserGenQueryResourceTagNV(GLsizei n, GLint * tagIds) { phaserGL.GenQueryResourceTagNV(n, tagIds); }
PHASER_FORCE_INLINE void  phaserGenRenderbuffers(GLsizei n, GLuint * renderbuffers) { phaserGL.GenRenderbuffers(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserGenRenderbuffersEXT(GLsizei n, GLuint * renderbuffers) { phaserGL.GenRenderbuffersEXT(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserGenRenderbuffersOES(GLsizei n, GLuint * renderbuffers) { phaserGL.GenRenderbuffersOES(n, renderbuffers); }
PHASER_FORCE_INLINE void  phaserGenSamplers(GLsizei count, GLuint * samplers) { phaserGL.GenSamplers(count, samplers); }
PHASER_FORCE_INLINE void  phaserGenSemaphoresEXT(GLsizei n, GLuint * semaphores) { phaserGL.GenSemaphoresEXT(n, semaphores); }
PHASER_FORCE_INLINE GLuint phaserGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components) { return phaserGL.GenSymbolsEXT(datatype, storagetype, range, components); }
PHASER_FORCE_INLINE void  phaserGenTextures(GLsizei n, GLuint * textures) { phaserGL.GenTextures(n, textures); }
PHASER_FORCE_INLINE void  phaserGenTexturesEXT(GLsizei n, GLuint * textures) { phaserGL.GenTexturesEXT(n, textures); }
PHASER_FORCE_INLINE void  phaserGenTransformFeedbacks(GLsizei n, GLuint * ids) { phaserGL.GenTransformFeedbacks(n, ids); }
PHASER_FORCE_INLINE void  phaserGenTransformFeedbacksNV(GLsizei n, GLuint * ids) { phaserGL.GenTransformFeedbacksNV(n, ids); }
PHASER_FORCE_INLINE void  phaserGenVertexArrays(GLsizei n, GLuint * arrays) { phaserGL.GenVertexArrays(n, arrays); }
PHASER_FORCE_INLINE void  phaserGenVertexArraysAPPLE(GLsizei n, GLuint * arrays) { phaserGL.GenVertexArraysAPPLE(n, arrays); }
PHASER_FORCE_INLINE void  phaserGenVertexArraysOES(GLsizei n, GLuint * arrays) { phaserGL.GenVertexArraysOES(n, arrays); }
PHASER_FORCE_INLINE GLuint phaserGenVertexShadersEXT(GLuint range) { return phaserGL.GenVertexShadersEXT(range); }
PHASER_FORCE_INLINE void  phaserGenerateMipmap(GLenum target) { phaserGL.GenerateMipmap(target); }
PHASER_FORCE_INLINE void  phaserGenerateMipmapEXT(GLenum target) { phaserGL.GenerateMipmapEXT(target); }
PHASER_FORCE_INLINE void  phaserGenerateMipmapOES(GLenum target) { phaserGL.GenerateMipmapOES(target); }
PHASER_FORCE_INLINE void  phaserGenerateMultiTexMipmapEXT(GLenum texunit, GLenum target) { phaserGL.GenerateMultiTexMipmapEXT(texunit, target); }
PHASER_FORCE_INLINE void  phaserGenerateTextureMipmap(GLuint texture) { phaserGL.GenerateTextureMipmap(texture); }
PHASER_FORCE_INLINE void  phaserGenerateTextureMipmapEXT(GLuint texture, GLenum target) { phaserGL.GenerateTextureMipmapEXT(texture, target); }
PHASER_FORCE_INLINE void  phaserGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params) { phaserGL.GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params); }
PHASER_FORCE_INLINE void  phaserGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { phaserGL.GetActiveAttrib(program, index, bufSize, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { phaserGL.GetActiveAttribARB(programObj, index, maxLength, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { phaserGL.GetActiveSubroutineName(program, shadertype, index, bufsize, length, name); }
PHASER_FORCE_INLINE void  phaserGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name) { phaserGL.GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name); }
PHASER_FORCE_INLINE void  phaserGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values) { phaserGL.GetActiveSubroutineUniformiv(program, shadertype, index, pname, values); }
PHASER_FORCE_INLINE void  phaserGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) { phaserGL.GetActiveUniform(program, index, bufSize, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) { phaserGL.GetActiveUniformARB(programObj, index, maxLength, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName) { phaserGL.GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName); }
PHASER_FORCE_INLINE void  phaserGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params) { phaserGL.GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params); }
PHASER_FORCE_INLINE void  phaserGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName) { phaserGL.GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName); }
PHASER_FORCE_INLINE void  phaserGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params) { phaserGL.GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params); }
PHASER_FORCE_INLINE void  phaserGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { phaserGL.GetActiveVaryingNV(program, index, bufSize, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat * params) { phaserGL.GetArrayObjectfvATI(array, pname, params); }
PHASER_FORCE_INLINE void  phaserGetArrayObjectivATI(GLenum array, GLenum pname, GLint * params) { phaserGL.GetArrayObjectivATI(array, pname, params); }
PHASER_FORCE_INLINE void  phaserGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj) { phaserGL.GetAttachedObjectsARB(containerObj, maxCount, count, obj); }
PHASER_FORCE_INLINE void  phaserGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders) { phaserGL.GetAttachedShaders(program, maxCount, count, shaders); }
PHASER_FORCE_INLINE GLint phaserGetAttribLocation(GLuint program, const GLchar * name) { return phaserGL.GetAttribLocation(program, name); }
PHASER_FORCE_INLINE GLint phaserGetAttribLocationARB(GLhandleARB programObj, const GLcharARB * name) { return phaserGL.GetAttribLocationARB(programObj, name); }
PHASER_FORCE_INLINE void  phaserGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean * data) { phaserGL.GetBooleanIndexedvEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetBooleani_v(GLenum target, GLuint index, GLboolean * data) { phaserGL.GetBooleani_v(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetBooleanv(GLenum pname, GLboolean * data) { phaserGL.GetBooleanv(pname, data); }
PHASER_FORCE_INLINE void  phaserGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 * params) { phaserGL.GetBufferParameteri64v(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetBufferParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferParameterivARB(GLenum target, GLenum pname, GLint * params) { phaserGL.GetBufferParameterivARB(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferParameterui64vNV(GLenum target, GLenum pname, GLuint64EXT * params) { phaserGL.GetBufferParameterui64vNV(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferPointerv(GLenum target, GLenum pname, void ** params) { phaserGL.GetBufferPointerv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferPointervARB(GLenum target, GLenum pname, void ** params) { phaserGL.GetBufferPointervARB(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferPointervOES(GLenum target, GLenum pname, void ** params) { phaserGL.GetBufferPointervOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void * data) { phaserGL.GetBufferSubData(target, offset, size, data); }
PHASER_FORCE_INLINE void  phaserGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data) { phaserGL.GetBufferSubDataARB(target, offset, size, data); }
PHASER_FORCE_INLINE void  phaserGetClipPlane(GLenum plane, GLdouble * equation) { phaserGL.GetClipPlane(plane, equation); }
PHASER_FORCE_INLINE void  phaserGetClipPlanef(GLenum plane, GLfloat * equation) { phaserGL.GetClipPlanef(plane, equation); }
PHASER_FORCE_INLINE void  phaserGetClipPlanefOES(GLenum plane, GLfloat * equation) { phaserGL.GetClipPlanefOES(plane, equation); }
PHASER_FORCE_INLINE void  phaserGetClipPlanex(GLenum plane, GLfixed * equation) { phaserGL.GetClipPlanex(plane, equation); }
PHASER_FORCE_INLINE void  phaserGetClipPlanexOES(GLenum plane, GLfixed * equation) { phaserGL.GetClipPlanexOES(plane, equation); }
PHASER_FORCE_INLINE void  phaserGetColorTable(GLenum target, GLenum format, GLenum type, void * table) { phaserGL.GetColorTable(target, format, type, table); }
PHASER_FORCE_INLINE void  phaserGetColorTableEXT(GLenum target, GLenum format, GLenum type, void * data) { phaserGL.GetColorTableEXT(target, format, type, data); }
PHASER_FORCE_INLINE void  phaserGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetColorTableParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetColorTableParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetColorTableParameterfvSGI(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetColorTableParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetColorTableParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetColorTableParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint * params) { phaserGL.GetColorTableParameterivSGI(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetColorTableSGI(GLenum target, GLenum format, GLenum type, void * table) { phaserGL.GetColorTableSGI(target, format, type, table); }
PHASER_FORCE_INLINE void  phaserGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params) { phaserGL.GetCombinerInputParameterfvNV(stage, portion, variable, pname, params); }
PHASER_FORCE_INLINE void  phaserGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params) { phaserGL.GetCombinerInputParameterivNV(stage, portion, variable, pname, params); }
PHASER_FORCE_INLINE void  phaserGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat * params) { phaserGL.GetCombinerOutputParameterfvNV(stage, portion, pname, params); }
PHASER_FORCE_INLINE void  phaserGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint * params) { phaserGL.GetCombinerOutputParameterivNV(stage, portion, pname, params); }
PHASER_FORCE_INLINE void  phaserGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat * params) { phaserGL.GetCombinerStageParameterfvNV(stage, pname, params); }
PHASER_FORCE_INLINE GLuint phaserGetCommandHeaderNV(GLenum tokenID, GLuint size) { return phaserGL.GetCommandHeaderNV(tokenID, size); }
PHASER_FORCE_INLINE void  phaserGetCompressedMultiTexImageEXT(GLenum texunit, GLenum target, GLint lod, void * img) { phaserGL.GetCompressedMultiTexImageEXT(texunit, target, lod, img); }
PHASER_FORCE_INLINE void  phaserGetCompressedTexImage(GLenum target, GLint level, void * img) { phaserGL.GetCompressedTexImage(target, level, img); }
PHASER_FORCE_INLINE void  phaserGetCompressedTexImageARB(GLenum target, GLint level, void * img) { phaserGL.GetCompressedTexImageARB(target, level, img); }
PHASER_FORCE_INLINE void  phaserGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void * pixels) { phaserGL.GetCompressedTextureImage(texture, level, bufSize, pixels); }
PHASER_FORCE_INLINE void  phaserGetCompressedTextureImageEXT(GLuint texture, GLenum target, GLint lod, void * img) { phaserGL.GetCompressedTextureImageEXT(texture, target, lod, img); }
PHASER_FORCE_INLINE void  phaserGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels) { phaserGL.GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels); }
PHASER_FORCE_INLINE void  phaserGetConvolutionFilter(GLenum target, GLenum format, GLenum type, void * image) { phaserGL.GetConvolutionFilter(target, format, type, image); }
PHASER_FORCE_INLINE void  phaserGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, void * image) { phaserGL.GetConvolutionFilterEXT(target, format, type, image); }
PHASER_FORCE_INLINE void  phaserGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetConvolutionParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetConvolutionParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetConvolutionParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetConvolutionParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetConvolutionParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetConvolutionParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { phaserGL.GetConvolutionParameterxvOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetCoverageModulationTableNV(GLsizei bufsize, GLfloat * v) { phaserGL.GetCoverageModulationTableNV(bufsize, v); }
PHASER_FORCE_INLINE GLuint phaserGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return phaserGL.GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
PHASER_FORCE_INLINE GLuint phaserGetDebugMessageLogAMD(GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) { return phaserGL.GetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message); }
PHASER_FORCE_INLINE GLuint phaserGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return phaserGL.GetDebugMessageLogARB(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
PHASER_FORCE_INLINE GLuint phaserGetDebugMessageLogKHR(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) { return phaserGL.GetDebugMessageLogKHR(count, bufSize, sources, types, ids, severities, lengths, messageLog); }
PHASER_FORCE_INLINE void  phaserGetDetailTexFuncSGIS(GLenum target, GLfloat * points) { phaserGL.GetDetailTexFuncSGIS(target, points); }
PHASER_FORCE_INLINE void  phaserGetDoubleIndexedvEXT(GLenum target, GLuint index, GLdouble * data) { phaserGL.GetDoubleIndexedvEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetDoublei_v(GLenum target, GLuint index, GLdouble * data) { phaserGL.GetDoublei_v(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetDoublei_vEXT(GLenum pname, GLuint index, GLdouble * params) { phaserGL.GetDoublei_vEXT(pname, index, params); }
PHASER_FORCE_INLINE void  phaserGetDoublev(GLenum pname, GLdouble * data) { phaserGL.GetDoublev(pname, data); }
PHASER_FORCE_INLINE void  phaserGetDriverControlStringQCOM(GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString) { phaserGL.GetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString); }
PHASER_FORCE_INLINE void  phaserGetDriverControlsQCOM(GLint * num, GLsizei size, GLuint * driverControls) { phaserGL.GetDriverControlsQCOM(num, size, driverControls); }
PHASER_FORCE_INLINE GLenum phaserGetError(void) { return phaserGL.GetError(); }
PHASER_FORCE_INLINE void  phaserGetFenceivNV(GLuint fence, GLenum pname, GLint * params) { phaserGL.GetFenceivNV(fence, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat * params) { phaserGL.GetFinalCombinerInputParameterfvNV(variable, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint * params) { phaserGL.GetFinalCombinerInputParameterivNV(variable, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFirstPerfQueryIdINTEL(GLuint * queryId) { phaserGL.GetFirstPerfQueryIdINTEL(queryId); }
PHASER_FORCE_INLINE void  phaserGetFixedv(GLenum pname, GLfixed * params) { phaserGL.GetFixedv(pname, params); }
PHASER_FORCE_INLINE void  phaserGetFixedvOES(GLenum pname, GLfixed * params) { phaserGL.GetFixedvOES(pname, params); }
PHASER_FORCE_INLINE void  phaserGetFloatIndexedvEXT(GLenum target, GLuint index, GLfloat * data) { phaserGL.GetFloatIndexedvEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetFloati_v(GLenum target, GLuint index, GLfloat * data) { phaserGL.GetFloati_v(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetFloati_vEXT(GLenum pname, GLuint index, GLfloat * params) { phaserGL.GetFloati_vEXT(pname, index, params); }
PHASER_FORCE_INLINE void  phaserGetFloati_vNV(GLenum target, GLuint index, GLfloat * data) { phaserGL.GetFloati_vNV(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetFloati_vOES(GLenum target, GLuint index, GLfloat * data) { phaserGL.GetFloati_vOES(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetFloatv(GLenum pname, GLfloat * data) { phaserGL.GetFloatv(pname, data); }
PHASER_FORCE_INLINE void  phaserGetFogFuncSGIS(GLfloat * points) { phaserGL.GetFogFuncSGIS(points); }
PHASER_FORCE_INLINE GLint phaserGetFragDataIndex(GLuint program, const GLchar * name) { return phaserGL.GetFragDataIndex(program, name); }
PHASER_FORCE_INLINE GLint phaserGetFragDataIndexEXT(GLuint program, const GLchar * name) { return phaserGL.GetFragDataIndexEXT(program, name); }
PHASER_FORCE_INLINE GLint phaserGetFragDataLocation(GLuint program, const GLchar * name) { return phaserGL.GetFragDataLocation(program, name); }
PHASER_FORCE_INLINE GLint phaserGetFragDataLocationEXT(GLuint program, const GLchar * name) { return phaserGL.GetFragDataLocationEXT(program, name); }
PHASER_FORCE_INLINE void  phaserGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat * params) { phaserGL.GetFragmentLightfvSGIX(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint * params) { phaserGL.GetFragmentLightivSGIX(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat * params) { phaserGL.GetFragmentMaterialfvSGIX(face, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint * params) { phaserGL.GetFragmentMaterialivSGIX(face, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint * params) { phaserGL.GetFramebufferAttachmentParameteriv(target, attachment, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint * params) { phaserGL.GetFramebufferAttachmentParameterivEXT(target, attachment, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint * params) { phaserGL.GetFramebufferAttachmentParameterivOES(target, attachment, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFramebufferParameterfvAMD(GLenum target, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { phaserGL.GetFramebufferParameterfvAMD(target, pname, numsamples, pixelindex, size, values); }
PHASER_FORCE_INLINE void  phaserGetFramebufferParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetFramebufferParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { phaserGL.GetFramebufferParameterivEXT(framebuffer, pname, params); }
PHASER_FORCE_INLINE GLsizei phaserGetFramebufferPixelLocalStorageSizeEXT(GLuint target) { return phaserGL.GetFramebufferPixelLocalStorageSizeEXT(target); }
PHASER_FORCE_INLINE GLenum phaserGetGraphicsResetStatus(void) { return phaserGL.GetGraphicsResetStatus(); }
PHASER_FORCE_INLINE GLenum phaserGetGraphicsResetStatusARB(void) { return phaserGL.GetGraphicsResetStatusARB(); }
PHASER_FORCE_INLINE GLenum phaserGetGraphicsResetStatusEXT(void) { return phaserGL.GetGraphicsResetStatusEXT(); }
PHASER_FORCE_INLINE GLenum phaserGetGraphicsResetStatusKHR(void) { return phaserGL.GetGraphicsResetStatusKHR(); }
PHASER_FORCE_INLINE GLhandleARB phaserGetHandleARB(GLenum pname) { return phaserGL.GetHandleARB(pname); }
PHASER_FORCE_INLINE void  phaserGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { phaserGL.GetHistogram(target, reset, format, type, values); }
PHASER_FORCE_INLINE void  phaserGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { phaserGL.GetHistogramEXT(target, reset, format, type, values); }
PHASER_FORCE_INLINE void  phaserGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetHistogramParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetHistogramParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetHistogramParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetHistogramParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetHistogramParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetHistogramParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { phaserGL.GetHistogramParameterxvOES(target, pname, params); }
PHASER_FORCE_INLINE GLuint64 phaserGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return phaserGL.GetImageHandleARB(texture, level, layered, layer, format); }
PHASER_FORCE_INLINE GLuint64 phaserGetImageHandleNV(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format) { return phaserGL.GetImageHandleNV(texture, level, layered, layer, format); }
PHASER_FORCE_INLINE void  phaserGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetImageTransformParameterfvHP(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint * params) { phaserGL.GetImageTransformParameterivHP(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog) { phaserGL.GetInfoLogARB(obj, maxLength, length, infoLog); }
PHASER_FORCE_INLINE GLint phaserGetInstrumentsSGIX(void) { return phaserGL.GetInstrumentsSGIX(); }
PHASER_FORCE_INLINE void  phaserGetInteger64i_v(GLenum target, GLuint index, GLint64 * data) { phaserGL.GetInteger64i_v(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetInteger64v(GLenum pname, GLint64 * data) { phaserGL.GetInteger64v(pname, data); }
PHASER_FORCE_INLINE void  phaserGetInteger64vAPPLE(GLenum pname, GLint64 * params) { phaserGL.GetInteger64vAPPLE(pname, params); }
PHASER_FORCE_INLINE void  phaserGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint * data) { phaserGL.GetIntegerIndexedvEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetIntegeri_v(GLenum target, GLuint index, GLint * data) { phaserGL.GetIntegeri_v(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetIntegeri_vEXT(GLenum target, GLuint index, GLint * data) { phaserGL.GetIntegeri_vEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetIntegerui64i_vNV(GLenum value, GLuint index, GLuint64EXT * result) { phaserGL.GetIntegerui64i_vNV(value, index, result); }
PHASER_FORCE_INLINE void  phaserGetIntegerui64vNV(GLenum value, GLuint64EXT * result) { phaserGL.GetIntegerui64vNV(value, result); }
PHASER_FORCE_INLINE void  phaserGetIntegerv(GLenum pname, GLint * data) { phaserGL.GetIntegerv(pname, data); }
PHASER_FORCE_INLINE void  phaserGetInternalformatSampleivNV(GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params) { phaserGL.GetInternalformatSampleivNV(target, internalformat, samples, pname, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params) { phaserGL.GetInternalformati64v(target, internalformat, pname, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params) { phaserGL.GetInternalformativ(target, internalformat, pname, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { phaserGL.GetInvariantBooleanvEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { phaserGL.GetInvariantFloatvEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetInvariantIntegervEXT(GLuint id, GLenum value, GLint * data) { phaserGL.GetInvariantIntegervEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetLightfv(GLenum light, GLenum pname, GLfloat * params) { phaserGL.GetLightfv(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetLightiv(GLenum light, GLenum pname, GLint * params) { phaserGL.GetLightiv(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetLightxOES(GLenum light, GLenum pname, GLfixed * params) { phaserGL.GetLightxOES(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetLightxv(GLenum light, GLenum pname, GLfixed * params) { phaserGL.GetLightxv(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetLightxvOES(GLenum light, GLenum pname, GLfixed * params) { phaserGL.GetLightxvOES(light, pname, params); }
PHASER_FORCE_INLINE void  phaserGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat * params) { phaserGL.GetListParameterfvSGIX(list, pname, params); }
PHASER_FORCE_INLINE void  phaserGetListParameterivSGIX(GLuint list, GLenum pname, GLint * params) { phaserGL.GetListParameterivSGIX(list, pname, params); }
PHASER_FORCE_INLINE void  phaserGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { phaserGL.GetLocalConstantBooleanvEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { phaserGL.GetLocalConstantFloatvEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint * data) { phaserGL.GetLocalConstantIntegervEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { phaserGL.GetMapAttribParameterfvNV(target, index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint * params) { phaserGL.GetMapAttribParameterivNV(target, index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points) { phaserGL.GetMapControlPointsNV(target, index, type, ustride, vstride, packed, points); }
PHASER_FORCE_INLINE void  phaserGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetMapParameterfvNV(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMapParameterivNV(GLenum target, GLenum pname, GLint * params) { phaserGL.GetMapParameterivNV(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMapdv(GLenum target, GLenum query, GLdouble * v) { phaserGL.GetMapdv(target, query, v); }
PHASER_FORCE_INLINE void  phaserGetMapfv(GLenum target, GLenum query, GLfloat * v) { phaserGL.GetMapfv(target, query, v); }
PHASER_FORCE_INLINE void  phaserGetMapiv(GLenum target, GLenum query, GLint * v) { phaserGL.GetMapiv(target, query, v); }
PHASER_FORCE_INLINE void  phaserGetMapxvOES(GLenum target, GLenum query, GLfixed * v) { phaserGL.GetMapxvOES(target, query, v); }
PHASER_FORCE_INLINE void  phaserGetMaterialfv(GLenum face, GLenum pname, GLfloat * params) { phaserGL.GetMaterialfv(face, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMaterialiv(GLenum face, GLenum pname, GLint * params) { phaserGL.GetMaterialiv(face, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMaterialxOES(GLenum face, GLenum pname, GLfixed param) { phaserGL.GetMaterialxOES(face, pname, param); }
PHASER_FORCE_INLINE void  phaserGetMaterialxv(GLenum face, GLenum pname, GLfixed * params) { phaserGL.GetMaterialxv(face, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMaterialxvOES(GLenum face, GLenum pname, GLfixed * params) { phaserGL.GetMaterialxvOES(face, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint * params) { phaserGL.GetMemoryObjectParameterivEXT(memoryObject, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { phaserGL.GetMinmax(target, reset, format, type, values); }
PHASER_FORCE_INLINE void  phaserGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, void * values) { phaserGL.GetMinmaxEXT(target, reset, format, type, values); }
PHASER_FORCE_INLINE void  phaserGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetMinmaxParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetMinmaxParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMinmaxParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetMinmaxParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetMinmaxParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetMultiTexEnvfvEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { phaserGL.GetMultiTexEnvivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble * params) { phaserGL.GetMultiTexGendvEXT(texunit, coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat * params) { phaserGL.GetMultiTexGenfvEXT(texunit, coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, GLint * params) { phaserGL.GetMultiTexGenivEXT(texunit, coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexImageEXT(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { phaserGL.GetMultiTexImageEXT(texunit, target, level, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserGetMultiTexLevelParameterfvEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params) { phaserGL.GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexLevelParameterivEXT(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params) { phaserGL.GetMultiTexLevelParameterivEXT(texunit, target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { phaserGL.GetMultiTexParameterIivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, GLuint * params) { phaserGL.GetMultiTexParameterIuivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetMultiTexParameterfvEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, GLint * params) { phaserGL.GetMultiTexParameterivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetMultisamplefv(GLenum pname, GLuint index, GLfloat * val) { phaserGL.GetMultisamplefv(pname, index, val); }
PHASER_FORCE_INLINE void  phaserGetMultisamplefvNV(GLenum pname, GLuint index, GLfloat * val) { phaserGL.GetMultisamplefvNV(pname, index, val); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 * params) { phaserGL.GetNamedBufferParameteri64v(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint * params) { phaserGL.GetNamedBufferParameteriv(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferParameterivEXT(GLuint buffer, GLenum pname, GLint * params) { phaserGL.GetNamedBufferParameterivEXT(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferParameterui64vNV(GLuint buffer, GLenum pname, GLuint64EXT * params) { phaserGL.GetNamedBufferParameterui64vNV(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferPointerv(GLuint buffer, GLenum pname, void ** params) { phaserGL.GetNamedBufferPointerv(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferPointervEXT(GLuint buffer, GLenum pname, void ** params) { phaserGL.GetNamedBufferPointervEXT(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { phaserGL.GetNamedBufferSubData(buffer, offset, size, data); }
PHASER_FORCE_INLINE void  phaserGetNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data) { phaserGL.GetNamedBufferSubDataEXT(buffer, offset, size, data); }
PHASER_FORCE_INLINE void  phaserGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { phaserGL.GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedFramebufferAttachmentParameterivEXT(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params) { phaserGL.GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedFramebufferParameterfvAMD(GLuint framebuffer, GLenum pname, GLuint numsamples, GLuint pixelindex, GLsizei size, GLfloat * values) { phaserGL.GetNamedFramebufferParameterfvAMD(framebuffer, pname, numsamples, pixelindex, size, values); }
PHASER_FORCE_INLINE void  phaserGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint * param) { phaserGL.GetNamedFramebufferParameteriv(framebuffer, pname, param); }
PHASER_FORCE_INLINE void  phaserGetNamedFramebufferParameterivEXT(GLuint framebuffer, GLenum pname, GLint * params) { phaserGL.GetNamedFramebufferParameterivEXT(framebuffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedProgramLocalParameterIivEXT(GLuint program, GLenum target, GLuint index, GLint * params) { phaserGL.GetNamedProgramLocalParameterIivEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserGetNamedProgramLocalParameterIuivEXT(GLuint program, GLenum target, GLuint index, GLuint * params) { phaserGL.GetNamedProgramLocalParameterIuivEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserGetNamedProgramLocalParameterdvEXT(GLuint program, GLenum target, GLuint index, GLdouble * params) { phaserGL.GetNamedProgramLocalParameterdvEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserGetNamedProgramLocalParameterfvEXT(GLuint program, GLenum target, GLuint index, GLfloat * params) { phaserGL.GetNamedProgramLocalParameterfvEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserGetNamedProgramStringEXT(GLuint program, GLenum target, GLenum pname, void * string) { phaserGL.GetNamedProgramStringEXT(program, target, pname, string); }
PHASER_FORCE_INLINE void  phaserGetNamedProgramivEXT(GLuint program, GLenum target, GLenum pname, GLint * params) { phaserGL.GetNamedProgramivEXT(program, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint * params) { phaserGL.GetNamedRenderbufferParameteriv(renderbuffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedRenderbufferParameterivEXT(GLuint renderbuffer, GLenum pname, GLint * params) { phaserGL.GetNamedRenderbufferParameterivEXT(renderbuffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNamedStringARB(GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string) { phaserGL.GetNamedStringARB(namelen, name, bufSize, stringlen, string); }
PHASER_FORCE_INLINE void  phaserGetNamedStringivARB(GLint namelen, const GLchar * name, GLenum pname, GLint * params) { phaserGL.GetNamedStringivARB(namelen, name, pname, params); }
PHASER_FORCE_INLINE void  phaserGetNextPerfQueryIdINTEL(GLuint queryId, GLuint * nextQueryId) { phaserGL.GetNextPerfQueryIdINTEL(queryId, nextQueryId); }
PHASER_FORCE_INLINE void  phaserGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat * params) { phaserGL.GetObjectBufferfvATI(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint * params) { phaserGL.GetObjectBufferivATI(buffer, pname, params); }
PHASER_FORCE_INLINE void  phaserGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { phaserGL.GetObjectLabel(identifier, name, bufSize, length, label); }
PHASER_FORCE_INLINE void  phaserGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label) { phaserGL.GetObjectLabelEXT(type, object, bufSize, length, label); }
PHASER_FORCE_INLINE void  phaserGetObjectLabelKHR(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label) { phaserGL.GetObjectLabelKHR(identifier, name, bufSize, length, label); }
PHASER_FORCE_INLINE void  phaserGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat * params) { phaserGL.GetObjectParameterfvARB(obj, pname, params); }
PHASER_FORCE_INLINE void  phaserGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint * params) { phaserGL.GetObjectParameterivAPPLE(objectType, name, pname, params); }
PHASER_FORCE_INLINE void  phaserGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint * params) { phaserGL.GetObjectParameterivARB(obj, pname, params); }
PHASER_FORCE_INLINE void  phaserGetObjectPtrLabel(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { phaserGL.GetObjectPtrLabel(ptr, bufSize, length, label); }
PHASER_FORCE_INLINE void  phaserGetObjectPtrLabelKHR(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label) { phaserGL.GetObjectPtrLabelKHR(ptr, bufSize, length, label); }
PHASER_FORCE_INLINE void  phaserGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint * params) { phaserGL.GetOcclusionQueryivNV(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint * params) { phaserGL.GetOcclusionQueryuivNV(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetPathColorGenfvNV(GLenum color, GLenum pname, GLfloat * value) { phaserGL.GetPathColorGenfvNV(color, pname, value); }
PHASER_FORCE_INLINE void  phaserGetPathColorGenivNV(GLenum color, GLenum pname, GLint * value) { phaserGL.GetPathColorGenivNV(color, pname, value); }
PHASER_FORCE_INLINE void  phaserGetPathCommandsNV(GLuint path, GLubyte * commands) { phaserGL.GetPathCommandsNV(path, commands); }
PHASER_FORCE_INLINE void  phaserGetPathCoordsNV(GLuint path, GLfloat * coords) { phaserGL.GetPathCoordsNV(path, coords); }
PHASER_FORCE_INLINE void  phaserGetPathDashArrayNV(GLuint path, GLfloat * dashArray) { phaserGL.GetPathDashArrayNV(path, dashArray); }
PHASER_FORCE_INLINE GLfloat phaserGetPathLengthNV(GLuint path, GLsizei startSegment, GLsizei numSegments) { return phaserGL.GetPathLengthNV(path, startSegment, numSegments); }
PHASER_FORCE_INLINE void  phaserGetPathMetricRangeNV(GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics) { phaserGL.GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics); }
PHASER_FORCE_INLINE void  phaserGetPathMetricsNV(GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics) { phaserGL.GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics); }
PHASER_FORCE_INLINE void  phaserGetPathParameterfvNV(GLuint path, GLenum pname, GLfloat * value) { phaserGL.GetPathParameterfvNV(path, pname, value); }
PHASER_FORCE_INLINE void  phaserGetPathParameterivNV(GLuint path, GLenum pname, GLint * value) { phaserGL.GetPathParameterivNV(path, pname, value); }
PHASER_FORCE_INLINE void  phaserGetPathSpacingNV(GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing) { phaserGL.GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing); }
PHASER_FORCE_INLINE void  phaserGetPathTexGenfvNV(GLenum texCoordSet, GLenum pname, GLfloat * value) { phaserGL.GetPathTexGenfvNV(texCoordSet, pname, value); }
PHASER_FORCE_INLINE void  phaserGetPathTexGenivNV(GLenum texCoordSet, GLenum pname, GLint * value) { phaserGL.GetPathTexGenivNV(texCoordSet, pname, value); }
PHASER_FORCE_INLINE void  phaserGetPerfCounterInfoINTEL(GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) { phaserGL.GetPerfCounterInfoINTEL(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue); }
PHASER_FORCE_INLINE void  phaserGetPerfMonitorCounterDataAMD(GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten) { phaserGL.GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten); }
PHASER_FORCE_INLINE void  phaserGetPerfMonitorCounterInfoAMD(GLuint group, GLuint counter, GLenum pname, void * data) { phaserGL.GetPerfMonitorCounterInfoAMD(group, counter, pname, data); }
PHASER_FORCE_INLINE void  phaserGetPerfMonitorCounterStringAMD(GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString) { phaserGL.GetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString); }
PHASER_FORCE_INLINE void  phaserGetPerfMonitorCountersAMD(GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters) { phaserGL.GetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters); }
PHASER_FORCE_INLINE void  phaserGetPerfMonitorGroupStringAMD(GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString) { phaserGL.GetPerfMonitorGroupStringAMD(group, bufSize, length, groupString); }
PHASER_FORCE_INLINE void  phaserGetPerfMonitorGroupsAMD(GLint * numGroups, GLsizei groupsSize, GLuint * groups) { phaserGL.GetPerfMonitorGroupsAMD(numGroups, groupsSize, groups); }
PHASER_FORCE_INLINE void  phaserGetPerfQueryDataINTEL(GLuint queryHandle, GLuint flags, GLsizei dataSize, void * data, GLuint * bytesWritten) { phaserGL.GetPerfQueryDataINTEL(queryHandle, flags, dataSize, data, bytesWritten); }
PHASER_FORCE_INLINE void  phaserGetPerfQueryIdByNameINTEL(GLchar * queryName, GLuint * queryId) { phaserGL.GetPerfQueryIdByNameINTEL(queryName, queryId); }
PHASER_FORCE_INLINE void  phaserGetPerfQueryInfoINTEL(GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) { phaserGL.GetPerfQueryInfoINTEL(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask); }
PHASER_FORCE_INLINE void  phaserGetPixelMapfv(GLenum map, GLfloat * values) { phaserGL.GetPixelMapfv(map, values); }
PHASER_FORCE_INLINE void  phaserGetPixelMapuiv(GLenum map, GLuint * values) { phaserGL.GetPixelMapuiv(map, values); }
PHASER_FORCE_INLINE void  phaserGetPixelMapusv(GLenum map, GLushort * values) { phaserGL.GetPixelMapusv(map, values); }
PHASER_FORCE_INLINE void  phaserGetPixelMapxv(GLenum map, GLint size, GLfixed * values) { phaserGL.GetPixelMapxv(map, size, values); }
PHASER_FORCE_INLINE void  phaserGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat * params) { phaserGL.GetPixelTexGenParameterfvSGIS(pname, params); }
PHASER_FORCE_INLINE void  phaserGetPixelTexGenParameterivSGIS(GLenum pname, GLint * params) { phaserGL.GetPixelTexGenParameterivSGIS(pname, params); }
PHASER_FORCE_INLINE void  phaserGetPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetPixelTransformParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetPixelTransformParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetPointerIndexedvEXT(GLenum target, GLuint index, void ** data) { phaserGL.GetPointerIndexedvEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetPointeri_vEXT(GLenum pname, GLuint index, void ** params) { phaserGL.GetPointeri_vEXT(pname, index, params); }
PHASER_FORCE_INLINE void  phaserGetPointerv(GLenum pname, void ** params) { phaserGL.GetPointerv(pname, params); }
PHASER_FORCE_INLINE void  phaserGetPointervEXT(GLenum pname, void ** params) { phaserGL.GetPointervEXT(pname, params); }
PHASER_FORCE_INLINE void  phaserGetPointervKHR(GLenum pname, void ** params) { phaserGL.GetPointervKHR(pname, params); }
PHASER_FORCE_INLINE void  phaserGetPolygonStipple(GLubyte * mask) { phaserGL.GetPolygonStipple(mask); }
PHASER_FORCE_INLINE void  phaserGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { phaserGL.GetProgramBinary(program, bufSize, length, binaryFormat, binary); }
PHASER_FORCE_INLINE void  phaserGetProgramBinaryOES(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) { phaserGL.GetProgramBinaryOES(program, bufSize, length, binaryFormat, binary); }
PHASER_FORCE_INLINE void  phaserGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint * params) { phaserGL.GetProgramEnvParameterIivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint * params) { phaserGL.GetProgramEnvParameterIuivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble * params) { phaserGL.GetProgramEnvParameterdvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat * params) { phaserGL.GetProgramEnvParameterfvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { phaserGL.GetProgramInfoLog(program, bufSize, length, infoLog); }
PHASER_FORCE_INLINE void  phaserGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params) { phaserGL.GetProgramInterfaceiv(program, programInterface, pname, params); }
PHASER_FORCE_INLINE void  phaserGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint * params) { phaserGL.GetProgramLocalParameterIivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint * params) { phaserGL.GetProgramLocalParameterIuivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble * params) { phaserGL.GetProgramLocalParameterdvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat * params) { phaserGL.GetProgramLocalParameterfvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserGetProgramNamedParameterdvNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble * params) { phaserGL.GetProgramNamedParameterdvNV(id, len, name, params); }
PHASER_FORCE_INLINE void  phaserGetProgramNamedParameterfvNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat * params) { phaserGL.GetProgramNamedParameterfvNV(id, len, name, params); }
PHASER_FORCE_INLINE void  phaserGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble * params) { phaserGL.GetProgramParameterdvNV(target, index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat * params) { phaserGL.GetProgramParameterfvNV(target, index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { phaserGL.GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog); }
PHASER_FORCE_INLINE void  phaserGetProgramPipelineInfoLogEXT(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { phaserGL.GetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog); }
PHASER_FORCE_INLINE void  phaserGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint * params) { phaserGL.GetProgramPipelineiv(pipeline, pname, params); }
PHASER_FORCE_INLINE void  phaserGetProgramPipelineivEXT(GLuint pipeline, GLenum pname, GLint * params) { if (phaserGLSupport(GL_ES_VERSION_2_0) && (pname == GL_CURRENT_PROGRAM)) { pname = GL_ACTIVE_PROGRAM; } else if (phaserGLSupport(GL_VERSION_1_0) && (pname == GL_ACTIVE_PROGRAM)) { pname = GL_CURRENT_PROGRAM; } phaserGL.GetProgramPipelineivEXT(pipeline, pname, params); }
PHASER_FORCE_INLINE GLuint phaserGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar * name) { return phaserGL.GetProgramResourceIndex(program, programInterface, name); }
PHASER_FORCE_INLINE GLint phaserGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar * name) { return phaserGL.GetProgramResourceLocation(program, programInterface, name); }
PHASER_FORCE_INLINE GLint phaserGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar * name) { return phaserGL.GetProgramResourceLocationIndex(program, programInterface, name); }
PHASER_FORCE_INLINE GLint phaserGetProgramResourceLocationIndexEXT(GLuint program, GLenum programInterface, const GLchar * name) { return phaserGL.GetProgramResourceLocationIndexEXT(program, programInterface, name); }
PHASER_FORCE_INLINE void  phaserGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name) { phaserGL.GetProgramResourceName(program, programInterface, index, bufSize, length, name); }
PHASER_FORCE_INLINE void  phaserGetProgramResourcefvNV(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params) { phaserGL.GetProgramResourcefvNV(program, programInterface, index, propCount, props, bufSize, length, params); }
PHASER_FORCE_INLINE void  phaserGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) { phaserGL.GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params); }
PHASER_FORCE_INLINE void  phaserGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values) { phaserGL.GetProgramStageiv(program, shadertype, pname, values); }
PHASER_FORCE_INLINE void  phaserGetProgramStringARB(GLenum target, GLenum pname, void * string) { phaserGL.GetProgramStringARB(target, pname, string); }
PHASER_FORCE_INLINE void  phaserGetProgramStringNV(GLuint id, GLenum pname, GLubyte * program) { phaserGL.GetProgramStringNV(id, pname, program); }
PHASER_FORCE_INLINE void  phaserGetProgramSubroutineParameteruivNV(GLenum target, GLuint index, GLuint * param) { phaserGL.GetProgramSubroutineParameteruivNV(target, index, param); }
PHASER_FORCE_INLINE void  phaserGetProgramiv(GLuint program, GLenum pname, GLint * params) { phaserGL.GetProgramiv(program, pname, params); }
PHASER_FORCE_INLINE void  phaserGetProgramivARB(GLenum target, GLenum pname, GLint * params) { phaserGL.GetProgramivARB(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetProgramivNV(GLuint id, GLenum pname, GLint * params) { phaserGL.GetProgramivNV(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { phaserGL.GetQueryBufferObjecti64v(id, buffer, pname, offset); }
PHASER_FORCE_INLINE void  phaserGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { phaserGL.GetQueryBufferObjectiv(id, buffer, pname, offset); }
PHASER_FORCE_INLINE void  phaserGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { phaserGL.GetQueryBufferObjectui64v(id, buffer, pname, offset); }
PHASER_FORCE_INLINE void  phaserGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset) { phaserGL.GetQueryBufferObjectuiv(id, buffer, pname, offset); }
PHASER_FORCE_INLINE void  phaserGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint * params) { phaserGL.GetQueryIndexediv(target, index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 * params) { phaserGL.GetQueryObjecti64v(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64 * params) { phaserGL.GetQueryObjecti64vEXT(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectiv(GLuint id, GLenum pname, GLint * params) { phaserGL.GetQueryObjectiv(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectivARB(GLuint id, GLenum pname, GLint * params) { phaserGL.GetQueryObjectivARB(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectivEXT(GLuint id, GLenum pname, GLint * params) { phaserGL.GetQueryObjectivEXT(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 * params) { phaserGL.GetQueryObjectui64v(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64 * params) { phaserGL.GetQueryObjectui64vEXT(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectuiv(GLuint id, GLenum pname, GLuint * params) { phaserGL.GetQueryObjectuiv(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint * params) { phaserGL.GetQueryObjectuivARB(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryObjectuivEXT(GLuint id, GLenum pname, GLuint * params) { phaserGL.GetQueryObjectuivEXT(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryiv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetQueryiv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryivARB(GLenum target, GLenum pname, GLint * params) { phaserGL.GetQueryivARB(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetQueryivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetQueryivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetRenderbufferParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetRenderbufferParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint * params) { phaserGL.GetRenderbufferParameterivOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint * params) { phaserGL.GetSamplerParameterIiv(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterIivEXT(GLuint sampler, GLenum pname, GLint * params) { phaserGL.GetSamplerParameterIivEXT(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterIivOES(GLuint sampler, GLenum pname, GLint * params) { phaserGL.GetSamplerParameterIivOES(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint * params) { phaserGL.GetSamplerParameterIuiv(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterIuivEXT(GLuint sampler, GLenum pname, GLuint * params) { phaserGL.GetSamplerParameterIuivEXT(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterIuivOES(GLuint sampler, GLenum pname, GLuint * params) { phaserGL.GetSamplerParameterIuivOES(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat * params) { phaserGL.GetSamplerParameterfv(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint * params) { phaserGL.GetSamplerParameteriv(sampler, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 * params) { phaserGL.GetSemaphoreParameterui64vEXT(semaphore, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSeparableFilter(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { phaserGL.GetSeparableFilter(target, format, type, row, column, span); }
PHASER_FORCE_INLINE void  phaserGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, void * row, void * column, void * span) { phaserGL.GetSeparableFilterEXT(target, format, type, row, column, span); }
PHASER_FORCE_INLINE void  phaserGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog) { phaserGL.GetShaderInfoLog(shader, bufSize, length, infoLog); }
PHASER_FORCE_INLINE void  phaserGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision) { phaserGL.GetShaderPrecisionFormat(shadertype, precisiontype, range, precision); }
PHASER_FORCE_INLINE void  phaserGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source) { phaserGL.GetShaderSource(shader, bufSize, length, source); }
PHASER_FORCE_INLINE void  phaserGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source) { phaserGL.GetShaderSourceARB(obj, maxLength, length, source); }
PHASER_FORCE_INLINE void  phaserGetShaderiv(GLuint shader, GLenum pname, GLint * params) { phaserGL.GetShaderiv(shader, pname, params); }
PHASER_FORCE_INLINE void  phaserGetSharpenTexFuncSGIS(GLenum target, GLfloat * points) { phaserGL.GetSharpenTexFuncSGIS(target, points); }
PHASER_FORCE_INLINE GLushort phaserGetStageIndexNV(GLenum shadertype) { return phaserGL.GetStageIndexNV(shadertype); }
PHASER_FORCE_INLINE const GLubyte * phaserGetString(GLenum name) { return phaserGL.GetString(name); }
PHASER_FORCE_INLINE const GLubyte * phaserGetStringi(GLenum name, GLuint index) { return phaserGL.GetStringi(name, index); }
PHASER_FORCE_INLINE GLuint phaserGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar * name) { return phaserGL.GetSubroutineIndex(program, shadertype, name); }
PHASER_FORCE_INLINE GLint phaserGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar * name) { return phaserGL.GetSubroutineUniformLocation(program, shadertype, name); }
PHASER_FORCE_INLINE void  phaserGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { phaserGL.GetSynciv(sync, pname, bufSize, length, values); }
PHASER_FORCE_INLINE void  phaserGetSyncivAPPLE(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { phaserGL.GetSyncivAPPLE(sync, pname, bufSize, length, values); }
PHASER_FORCE_INLINE void  phaserGetTexBumpParameterfvATI(GLenum pname, GLfloat * param) { phaserGL.GetTexBumpParameterfvATI(pname, param); }
PHASER_FORCE_INLINE void  phaserGetTexBumpParameterivATI(GLenum pname, GLint * param) { phaserGL.GetTexBumpParameterivATI(pname, param); }
PHASER_FORCE_INLINE void  phaserGetTexEnvfv(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetTexEnvfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexEnviv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetTexEnviv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexEnvxv(GLenum target, GLenum pname, GLfixed * params) { phaserGL.GetTexEnvxv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexEnvxvOES(GLenum target, GLenum pname, GLfixed * params) { phaserGL.GetTexEnvxvOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat * weights) { phaserGL.GetTexFilterFuncSGIS(target, filter, weights); }
PHASER_FORCE_INLINE void  phaserGetTexGendv(GLenum coord, GLenum pname, GLdouble * params) { phaserGL.GetTexGendv(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexGenfv(GLenum coord, GLenum pname, GLfloat * params) { phaserGL.GetTexGenfv(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat * params) { phaserGL.GetTexGenfvOES(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexGeniv(GLenum coord, GLenum pname, GLint * params) { phaserGL.GetTexGeniv(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexGenivOES(GLenum coord, GLenum pname, GLint * params) { phaserGL.GetTexGenivOES(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed * params) { phaserGL.GetTexGenxvOES(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { phaserGL.GetTexImage(target, level, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat * params) { phaserGL.GetTexLevelParameterfv(target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint * params) { phaserGL.GetTexLevelParameteriv(target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexLevelParameterxvOES(GLenum target, GLint level, GLenum pname, GLfixed * params) { phaserGL.GetTexLevelParameterxvOES(target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterIiv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetTexParameterIiv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterIivEXT(GLenum target, GLenum pname, GLint * params) { phaserGL.GetTexParameterIivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterIivOES(GLenum target, GLenum pname, GLint * params) { phaserGL.GetTexParameterIivOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterIuiv(GLenum target, GLenum pname, GLuint * params) { phaserGL.GetTexParameterIuiv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint * params) { phaserGL.GetTexParameterIuivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterIuivOES(GLenum target, GLenum pname, GLuint * params) { phaserGL.GetTexParameterIuivOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterPointervAPPLE(GLenum target, GLenum pname, void ** params) { phaserGL.GetTexParameterPointervAPPLE(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterfv(GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetTexParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameteriv(GLenum target, GLenum pname, GLint * params) { phaserGL.GetTexParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterxv(GLenum target, GLenum pname, GLfixed * params) { phaserGL.GetTexParameterxv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTexParameterxvOES(GLenum target, GLenum pname, GLfixed * params) { phaserGL.GetTexParameterxvOES(target, pname, params); }
PHASER_FORCE_INLINE GLuint64 phaserGetTextureHandleARB(GLuint texture) { return phaserGL.GetTextureHandleARB(texture); }
PHASER_FORCE_INLINE GLuint64 phaserGetTextureHandleIMG(GLuint texture) { return phaserGL.GetTextureHandleIMG(texture); }
PHASER_FORCE_INLINE GLuint64 phaserGetTextureHandleNV(GLuint texture) { return phaserGL.GetTextureHandleNV(texture); }
PHASER_FORCE_INLINE void  phaserGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { phaserGL.GetTextureImage(texture, level, format, type, bufSize, pixels); }
PHASER_FORCE_INLINE void  phaserGetTextureImageEXT(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels) { phaserGL.GetTextureImageEXT(texture, target, level, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params) { phaserGL.GetTextureLevelParameterfv(texture, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureLevelParameterfvEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params) { phaserGL.GetTextureLevelParameterfvEXT(texture, target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint * params) { phaserGL.GetTextureLevelParameteriv(texture, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureLevelParameterivEXT(GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params) { phaserGL.GetTextureLevelParameterivEXT(texture, target, level, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterIiv(GLuint texture, GLenum pname, GLint * params) { phaserGL.GetTextureParameterIiv(texture, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { phaserGL.GetTextureParameterIivEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint * params) { phaserGL.GetTextureParameterIuiv(texture, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, GLuint * params) { phaserGL.GetTextureParameterIuivEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat * params) { phaserGL.GetTextureParameterfv(texture, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, GLfloat * params) { phaserGL.GetTextureParameterfvEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameteriv(GLuint texture, GLenum pname, GLint * params) { phaserGL.GetTextureParameteriv(texture, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, GLint * params) { phaserGL.GetTextureParameterivEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE GLuint64 phaserGetTextureSamplerHandleARB(GLuint texture, GLuint sampler) { return phaserGL.GetTextureSamplerHandleARB(texture, sampler); }
PHASER_FORCE_INLINE GLuint64 phaserGetTextureSamplerHandleIMG(GLuint texture, GLuint sampler) { return phaserGL.GetTextureSamplerHandleIMG(texture, sampler); }
PHASER_FORCE_INLINE GLuint64 phaserGetTextureSamplerHandleNV(GLuint texture, GLuint sampler) { return phaserGL.GetTextureSamplerHandleNV(texture, sampler); }
PHASER_FORCE_INLINE void  phaserGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { phaserGL.GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels); }
PHASER_FORCE_INLINE void  phaserGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint * params) { phaserGL.GetTrackMatrixivNV(target, address, pname, params); }
PHASER_FORCE_INLINE void  phaserGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { phaserGL.GetTransformFeedbackVarying(program, index, bufSize, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) { phaserGL.GetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type, name); }
PHASER_FORCE_INLINE void  phaserGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint * location) { phaserGL.GetTransformFeedbackVaryingNV(program, index, location); }
PHASER_FORCE_INLINE void  phaserGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param) { phaserGL.GetTransformFeedbacki64_v(xfb, pname, index, param); }
PHASER_FORCE_INLINE void  phaserGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param) { phaserGL.GetTransformFeedbacki_v(xfb, pname, index, param); }
PHASER_FORCE_INLINE void  phaserGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint * param) { phaserGL.GetTransformFeedbackiv(xfb, pname, param); }
PHASER_FORCE_INLINE void  phaserGetTranslatedShaderSourceANGLE(GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source) { phaserGL.GetTranslatedShaderSourceANGLE(shader, bufsize, length, source); }
PHASER_FORCE_INLINE GLuint phaserGetUniformBlockIndex(GLuint program, const GLchar * uniformBlockName) { return phaserGL.GetUniformBlockIndex(program, uniformBlockName); }
PHASER_FORCE_INLINE GLint phaserGetUniformBufferSizeEXT(GLuint program, GLint location) { return phaserGL.GetUniformBufferSizeEXT(program, location); }
PHASER_FORCE_INLINE void  phaserGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) { phaserGL.GetUniformIndices(program, uniformCount, uniformNames, uniformIndices); }
PHASER_FORCE_INLINE GLint phaserGetUniformLocation(GLuint program, const GLchar * name) { return phaserGL.GetUniformLocation(program, name); }
PHASER_FORCE_INLINE GLint phaserGetUniformLocationARB(GLhandleARB programObj, const GLcharARB * name) { return phaserGL.GetUniformLocationARB(programObj, name); }
PHASER_FORCE_INLINE GLintptr phaserGetUniformOffsetEXT(GLuint program, GLint location) { return phaserGL.GetUniformOffsetEXT(program, location); }
PHASER_FORCE_INLINE void  phaserGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint * params) { phaserGL.GetUniformSubroutineuiv(shadertype, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformdv(GLuint program, GLint location, GLdouble * params) { phaserGL.GetUniformdv(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformfv(GLuint program, GLint location, GLfloat * params) { phaserGL.GetUniformfv(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat * params) { phaserGL.GetUniformfvARB(programObj, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformi64vARB(GLuint program, GLint location, GLint64 * params) { phaserGL.GetUniformi64vARB(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformi64vNV(GLuint program, GLint location, GLint64EXT * params) { phaserGL.GetUniformi64vNV(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformiv(GLuint program, GLint location, GLint * params) { phaserGL.GetUniformiv(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformivARB(GLhandleARB programObj, GLint location, GLint * params) { phaserGL.GetUniformivARB(programObj, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformui64vARB(GLuint program, GLint location, GLuint64 * params) { phaserGL.GetUniformui64vARB(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformui64vNV(GLuint program, GLint location, GLuint64EXT * params) { phaserGL.GetUniformui64vNV(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformuiv(GLuint program, GLint location, GLuint * params) { phaserGL.GetUniformuiv(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUniformuivEXT(GLuint program, GLint location, GLuint * params) { phaserGL.GetUniformuivEXT(program, location, params); }
PHASER_FORCE_INLINE void  phaserGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte * data) { phaserGL.GetUnsignedBytei_vEXT(target, index, data); }
PHASER_FORCE_INLINE void  phaserGetUnsignedBytevEXT(GLenum pname, GLubyte * data) { phaserGL.GetUnsignedBytevEXT(pname, data); }
PHASER_FORCE_INLINE void  phaserGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat * params) { phaserGL.GetVariantArrayObjectfvATI(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint * params) { phaserGL.GetVariantArrayObjectivATI(id, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean * data) { phaserGL.GetVariantBooleanvEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat * data) { phaserGL.GetVariantFloatvEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetVariantIntegervEXT(GLuint id, GLenum value, GLint * data) { phaserGL.GetVariantIntegervEXT(id, value, data); }
PHASER_FORCE_INLINE void  phaserGetVariantPointervEXT(GLuint id, GLenum value, void ** data) { phaserGL.GetVariantPointervEXT(id, value, data); }
PHASER_FORCE_INLINE GLint phaserGetVaryingLocationNV(GLuint program, const GLchar * name) { return phaserGL.GetVaryingLocationNV(program, name); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param) { phaserGL.GetVertexArrayIndexed64iv(vaobj, index, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { phaserGL.GetVertexArrayIndexediv(vaobj, index, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayIntegeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, GLint * param) { phaserGL.GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayIntegervEXT(GLuint vaobj, GLenum pname, GLint * param) { phaserGL.GetVertexArrayIntegervEXT(vaobj, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayPointeri_vEXT(GLuint vaobj, GLuint index, GLenum pname, void ** param) { phaserGL.GetVertexArrayPointeri_vEXT(vaobj, index, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayPointervEXT(GLuint vaobj, GLenum pname, void ** param) { phaserGL.GetVertexArrayPointervEXT(vaobj, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint * param) { phaserGL.GetVertexArrayiv(vaobj, pname, param); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat * params) { phaserGL.GetVertexAttribArrayObjectfvATI(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint * params) { phaserGL.GetVertexAttribArrayObjectivATI(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribIiv(GLuint index, GLenum pname, GLint * params) { phaserGL.GetVertexAttribIiv(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint * params) { phaserGL.GetVertexAttribIivEXT(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint * params) { phaserGL.GetVertexAttribIuiv(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint * params) { phaserGL.GetVertexAttribIuivEXT(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble * params) { phaserGL.GetVertexAttribLdv(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribLdvEXT(GLuint index, GLenum pname, GLdouble * params) { phaserGL.GetVertexAttribLdvEXT(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribLi64vNV(GLuint index, GLenum pname, GLint64EXT * params) { phaserGL.GetVertexAttribLi64vNV(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT * params) { phaserGL.GetVertexAttribLui64vARB(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribLui64vNV(GLuint index, GLenum pname, GLuint64EXT * params) { phaserGL.GetVertexAttribLui64vNV(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribPointerv(GLuint index, GLenum pname, void ** pointer) { phaserGL.GetVertexAttribPointerv(index, pname, pointer); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribPointervARB(GLuint index, GLenum pname, void ** pointer) { phaserGL.GetVertexAttribPointervARB(index, pname, pointer); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribPointervNV(GLuint index, GLenum pname, void ** pointer) { phaserGL.GetVertexAttribPointervNV(index, pname, pointer); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribdv(GLuint index, GLenum pname, GLdouble * params) { phaserGL.GetVertexAttribdv(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble * params) { phaserGL.GetVertexAttribdvARB(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble * params) { phaserGL.GetVertexAttribdvNV(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribfv(GLuint index, GLenum pname, GLfloat * params) { phaserGL.GetVertexAttribfv(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat * params) { phaserGL.GetVertexAttribfvARB(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat * params) { phaserGL.GetVertexAttribfvNV(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribiv(GLuint index, GLenum pname, GLint * params) { phaserGL.GetVertexAttribiv(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribivARB(GLuint index, GLenum pname, GLint * params) { phaserGL.GetVertexAttribivARB(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVertexAttribivNV(GLuint index, GLenum pname, GLint * params) { phaserGL.GetVertexAttribivNV(index, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoCaptureStreamdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params) { phaserGL.GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoCaptureStreamfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params) { phaserGL.GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoCaptureStreamivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params) { phaserGL.GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoCaptureivNV(GLuint video_capture_slot, GLenum pname, GLint * params) { phaserGL.GetVideoCaptureivNV(video_capture_slot, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoi64vNV(GLuint video_slot, GLenum pname, GLint64EXT * params) { phaserGL.GetVideoi64vNV(video_slot, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoivNV(GLuint video_slot, GLenum pname, GLint * params) { phaserGL.GetVideoivNV(video_slot, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideoui64vNV(GLuint video_slot, GLenum pname, GLuint64EXT * params) { phaserGL.GetVideoui64vNV(video_slot, pname, params); }
PHASER_FORCE_INLINE void  phaserGetVideouivNV(GLuint video_slot, GLenum pname, GLuint * params) { phaserGL.GetVideouivNV(video_slot, pname, params); }
PHASER_FORCE_INLINE GLVULKANPROCNV phaserGetVkProcAddrNV(const GLchar * name) { return phaserGL.GetVkProcAddrNV(name); }
PHASER_FORCE_INLINE void  phaserGetnColorTable(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { phaserGL.GetnColorTable(target, format, type, bufSize, table); }
PHASER_FORCE_INLINE void  phaserGetnColorTableARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table) { phaserGL.GetnColorTableARB(target, format, type, bufSize, table); }
PHASER_FORCE_INLINE void  phaserGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void * pixels) { phaserGL.GetnCompressedTexImage(target, lod, bufSize, pixels); }
PHASER_FORCE_INLINE void  phaserGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void * img) { phaserGL.GetnCompressedTexImageARB(target, lod, bufSize, img); }
PHASER_FORCE_INLINE void  phaserGetnConvolutionFilter(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { phaserGL.GetnConvolutionFilter(target, format, type, bufSize, image); }
PHASER_FORCE_INLINE void  phaserGetnConvolutionFilterARB(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image) { phaserGL.GetnConvolutionFilterARB(target, format, type, bufSize, image); }
PHASER_FORCE_INLINE void  phaserGetnHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { phaserGL.GetnHistogram(target, reset, format, type, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnHistogramARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { phaserGL.GetnHistogramARB(target, reset, format, type, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnMapdv(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { phaserGL.GetnMapdv(target, query, bufSize, v); }
PHASER_FORCE_INLINE void  phaserGetnMapdvARB(GLenum target, GLenum query, GLsizei bufSize, GLdouble * v) { phaserGL.GetnMapdvARB(target, query, bufSize, v); }
PHASER_FORCE_INLINE void  phaserGetnMapfv(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { phaserGL.GetnMapfv(target, query, bufSize, v); }
PHASER_FORCE_INLINE void  phaserGetnMapfvARB(GLenum target, GLenum query, GLsizei bufSize, GLfloat * v) { phaserGL.GetnMapfvARB(target, query, bufSize, v); }
PHASER_FORCE_INLINE void  phaserGetnMapiv(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { phaserGL.GetnMapiv(target, query, bufSize, v); }
PHASER_FORCE_INLINE void  phaserGetnMapivARB(GLenum target, GLenum query, GLsizei bufSize, GLint * v) { phaserGL.GetnMapivARB(target, query, bufSize, v); }
PHASER_FORCE_INLINE void  phaserGetnMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { phaserGL.GetnMinmax(target, reset, format, type, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnMinmaxARB(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values) { phaserGL.GetnMinmaxARB(target, reset, format, type, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPixelMapfv(GLenum map, GLsizei bufSize, GLfloat * values) { phaserGL.GetnPixelMapfv(map, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPixelMapfvARB(GLenum map, GLsizei bufSize, GLfloat * values) { phaserGL.GetnPixelMapfvARB(map, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPixelMapuiv(GLenum map, GLsizei bufSize, GLuint * values) { phaserGL.GetnPixelMapuiv(map, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPixelMapuivARB(GLenum map, GLsizei bufSize, GLuint * values) { phaserGL.GetnPixelMapuivARB(map, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPixelMapusv(GLenum map, GLsizei bufSize, GLushort * values) { phaserGL.GetnPixelMapusv(map, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPixelMapusvARB(GLenum map, GLsizei bufSize, GLushort * values) { phaserGL.GetnPixelMapusvARB(map, bufSize, values); }
PHASER_FORCE_INLINE void  phaserGetnPolygonStipple(GLsizei bufSize, GLubyte * pattern) { phaserGL.GetnPolygonStipple(bufSize, pattern); }
PHASER_FORCE_INLINE void  phaserGetnPolygonStippleARB(GLsizei bufSize, GLubyte * pattern) { phaserGL.GetnPolygonStippleARB(bufSize, pattern); }
PHASER_FORCE_INLINE void  phaserGetnSeparableFilter(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { phaserGL.GetnSeparableFilter(target, format, type, rowBufSize, row, columnBufSize, column, span); }
PHASER_FORCE_INLINE void  phaserGetnSeparableFilterARB(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span) { phaserGL.GetnSeparableFilterARB(target, format, type, rowBufSize, row, columnBufSize, column, span); }
PHASER_FORCE_INLINE void  phaserGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels) { phaserGL.GetnTexImage(target, level, format, type, bufSize, pixels); }
PHASER_FORCE_INLINE void  phaserGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img) { phaserGL.GetnTexImageARB(target, level, format, type, bufSize, img); }
PHASER_FORCE_INLINE void  phaserGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { phaserGL.GetnUniformdv(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble * params) { phaserGL.GetnUniformdvARB(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { phaserGL.GetnUniformfv(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { phaserGL.GetnUniformfvARB(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { phaserGL.GetnUniformfvEXT(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformfvKHR(GLuint program, GLint location, GLsizei bufSize, GLfloat * params) { phaserGL.GetnUniformfvKHR(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformi64vARB(GLuint program, GLint location, GLsizei bufSize, GLint64 * params) { phaserGL.GetnUniformi64vARB(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params) { phaserGL.GetnUniformiv(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint * params) { phaserGL.GetnUniformivARB(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint * params) { phaserGL.GetnUniformivEXT(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformivKHR(GLuint program, GLint location, GLsizei bufSize, GLint * params) { phaserGL.GetnUniformivKHR(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformui64vARB(GLuint program, GLint location, GLsizei bufSize, GLuint64 * params) { phaserGL.GetnUniformui64vARB(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { phaserGL.GetnUniformuiv(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { phaserGL.GetnUniformuivARB(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGetnUniformuivKHR(GLuint program, GLint location, GLsizei bufSize, GLuint * params) { phaserGL.GetnUniformuivKHR(program, location, bufSize, params); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactorbSUN(GLbyte factor) { phaserGL.GlobalAlphaFactorbSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactordSUN(GLdouble factor) { phaserGL.GlobalAlphaFactordSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactorfSUN(GLfloat factor) { phaserGL.GlobalAlphaFactorfSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactoriSUN(GLint factor) { phaserGL.GlobalAlphaFactoriSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactorsSUN(GLshort factor) { phaserGL.GlobalAlphaFactorsSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactorubSUN(GLubyte factor) { phaserGL.GlobalAlphaFactorubSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactoruiSUN(GLuint factor) { phaserGL.GlobalAlphaFactoruiSUN(factor); }
PHASER_FORCE_INLINE void  phaserGlobalAlphaFactorusSUN(GLushort factor) { phaserGL.GlobalAlphaFactorusSUN(factor); }
PHASER_FORCE_INLINE void  phaserHint(GLenum target, GLenum mode) { phaserGL.Hint(target, mode); }
PHASER_FORCE_INLINE void  phaserHintPGI(GLenum target, GLint mode) { phaserGL.HintPGI(target, mode); }
PHASER_FORCE_INLINE void  phaserHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { phaserGL.Histogram(target, width, internalformat, sink); }
PHASER_FORCE_INLINE void  phaserHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink) { phaserGL.HistogramEXT(target, width, internalformat, sink); }
PHASER_FORCE_INLINE void  phaserIglooInterfaceSGIX(GLenum pname, const void * params) { phaserGL.IglooInterfaceSGIX(pname, params); }
PHASER_FORCE_INLINE void  phaserImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param) { phaserGL.ImageTransformParameterfHP(target, pname, param); }
PHASER_FORCE_INLINE void  phaserImageTransformParameterfvHP(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.ImageTransformParameterfvHP(target, pname, params); }
PHASER_FORCE_INLINE void  phaserImageTransformParameteriHP(GLenum target, GLenum pname, GLint param) { phaserGL.ImageTransformParameteriHP(target, pname, param); }
PHASER_FORCE_INLINE void  phaserImageTransformParameterivHP(GLenum target, GLenum pname, const GLint * params) { phaserGL.ImageTransformParameterivHP(target, pname, params); }
PHASER_FORCE_INLINE void  phaserImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd) { phaserGL.ImportMemoryFdEXT(memory, size, handleType, fd); }
PHASER_FORCE_INLINE void  phaserImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void * handle) { phaserGL.ImportMemoryWin32HandleEXT(memory, size, handleType, handle); }
PHASER_FORCE_INLINE void  phaserImportMemoryWin32NameEXT(GLuint memory, GLuint64 size, GLenum handleType, const void * name) { phaserGL.ImportMemoryWin32NameEXT(memory, size, handleType, name); }
PHASER_FORCE_INLINE void  phaserImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd) { phaserGL.ImportSemaphoreFdEXT(semaphore, handleType, fd); }
PHASER_FORCE_INLINE void  phaserImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void * handle) { phaserGL.ImportSemaphoreWin32HandleEXT(semaphore, handleType, handle); }
PHASER_FORCE_INLINE void  phaserImportSemaphoreWin32NameEXT(GLuint semaphore, GLenum handleType, const void * name) { phaserGL.ImportSemaphoreWin32NameEXT(semaphore, handleType, name); }
PHASER_FORCE_INLINE GLsync phaserImportSyncEXT(GLenum external_sync_type, GLintptr external_sync, GLbitfield flags) { return phaserGL.ImportSyncEXT(external_sync_type, external_sync, flags); }
PHASER_FORCE_INLINE void  phaserIndexFormatNV(GLenum type, GLsizei stride) { phaserGL.IndexFormatNV(type, stride); }
PHASER_FORCE_INLINE void  phaserIndexFuncEXT(GLenum func, GLclampf ref) { phaserGL.IndexFuncEXT(func, ref); }
PHASER_FORCE_INLINE void  phaserIndexMask(GLuint mask) { phaserGL.IndexMask(mask); }
PHASER_FORCE_INLINE void  phaserIndexMaterialEXT(GLenum face, GLenum mode) { phaserGL.IndexMaterialEXT(face, mode); }
PHASER_FORCE_INLINE void  phaserIndexPointer(GLenum type, GLsizei stride, const void * pointer) { phaserGL.IndexPointer(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { phaserGL.IndexPointerEXT(type, stride, count, pointer); }
PHASER_FORCE_INLINE void  phaserIndexPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.IndexPointerListIBM(type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserIndexd(GLdouble c) { phaserGL.Indexd(c); }
PHASER_FORCE_INLINE void  phaserIndexdv(const GLdouble * c) { phaserGL.Indexdv(c); }
PHASER_FORCE_INLINE void  phaserIndexf(GLfloat c) { phaserGL.Indexf(c); }
PHASER_FORCE_INLINE void  phaserIndexfv(const GLfloat * c) { phaserGL.Indexfv(c); }
PHASER_FORCE_INLINE void  phaserIndexi(GLint c) { phaserGL.Indexi(c); }
PHASER_FORCE_INLINE void  phaserIndexiv(const GLint * c) { phaserGL.Indexiv(c); }
PHASER_FORCE_INLINE void  phaserIndexs(GLshort c) { phaserGL.Indexs(c); }
PHASER_FORCE_INLINE void  phaserIndexsv(const GLshort * c) { phaserGL.Indexsv(c); }
PHASER_FORCE_INLINE void  phaserIndexub(GLubyte c) { phaserGL.Indexub(c); }
PHASER_FORCE_INLINE void  phaserIndexubv(const GLubyte * c) { phaserGL.Indexubv(c); }
PHASER_FORCE_INLINE void  phaserIndexxOES(GLfixed component) { phaserGL.IndexxOES(component); }
PHASER_FORCE_INLINE void  phaserIndexxvOES(const GLfixed * component) { phaserGL.IndexxvOES(component); }
PHASER_FORCE_INLINE void  phaserInitNames(void) { phaserGL.InitNames(); }
PHASER_FORCE_INLINE void  phaserInsertComponentEXT(GLuint res, GLuint src, GLuint num) { phaserGL.InsertComponentEXT(res, src, num); }
PHASER_FORCE_INLINE void  phaserInsertEventMarkerEXT(GLsizei length, const GLchar * marker) { phaserGL.InsertEventMarkerEXT(length, marker); }
PHASER_FORCE_INLINE void  phaserInstrumentsBufferSGIX(GLsizei size, GLint * buffer) { phaserGL.InstrumentsBufferSGIX(size, buffer); }
PHASER_FORCE_INLINE void  phaserInterleavedArrays(GLenum format, GLsizei stride, const void * pointer) { phaserGL.InterleavedArrays(format, stride, pointer); }
PHASER_FORCE_INLINE void  phaserInterpolatePathsNV(GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight) { phaserGL.InterpolatePathsNV(resultPath, pathA, pathB, weight); }
PHASER_FORCE_INLINE void  phaserInvalidateBufferData(GLuint buffer) { phaserGL.InvalidateBufferData(buffer); }
PHASER_FORCE_INLINE void  phaserInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length) { phaserGL.InvalidateBufferSubData(buffer, offset, length); }
PHASER_FORCE_INLINE void  phaserInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments) { phaserGL.InvalidateFramebuffer(target, numAttachments, attachments); }
PHASER_FORCE_INLINE void  phaserInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments) { phaserGL.InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments); }
PHASER_FORCE_INLINE void  phaserInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserInvalidateTexImage(GLuint texture, GLint level) { phaserGL.InvalidateTexImage(texture, level); }
PHASER_FORCE_INLINE void  phaserInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth); }
PHASER_FORCE_INLINE GLboolean phaserIsAsyncMarkerSGIX(GLuint marker) { return phaserGL.IsAsyncMarkerSGIX(marker); }
PHASER_FORCE_INLINE GLboolean phaserIsBuffer(GLuint buffer) { return phaserGL.IsBuffer(buffer); }
PHASER_FORCE_INLINE GLboolean phaserIsBufferARB(GLuint buffer) { return phaserGL.IsBufferARB(buffer); }
PHASER_FORCE_INLINE GLboolean phaserIsBufferResidentNV(GLenum target) { return phaserGL.IsBufferResidentNV(target); }
PHASER_FORCE_INLINE GLboolean phaserIsCommandListNV(GLuint list) { return phaserGL.IsCommandListNV(list); }
PHASER_FORCE_INLINE GLboolean phaserIsEnabled(GLenum cap) { return phaserGL.IsEnabled(cap); }
PHASER_FORCE_INLINE GLboolean phaserIsEnabledIndexedEXT(GLenum target, GLuint index) { return phaserGL.IsEnabledIndexedEXT(target, index); }
PHASER_FORCE_INLINE GLboolean phaserIsEnabledi(GLenum target, GLuint index) { return phaserGL.IsEnabledi(target, index); }
PHASER_FORCE_INLINE GLboolean phaserIsEnablediEXT(GLenum target, GLuint index) { return phaserGL.IsEnablediEXT(target, index); }
PHASER_FORCE_INLINE GLboolean phaserIsEnablediNV(GLenum target, GLuint index) { return phaserGL.IsEnablediNV(target, index); }
PHASER_FORCE_INLINE GLboolean phaserIsEnablediOES(GLenum target, GLuint index) { return phaserGL.IsEnablediOES(target, index); }
PHASER_FORCE_INLINE GLboolean phaserIsFenceAPPLE(GLuint fence) { return phaserGL.IsFenceAPPLE(fence); }
PHASER_FORCE_INLINE GLboolean phaserIsFenceNV(GLuint fence) { return phaserGL.IsFenceNV(fence); }
PHASER_FORCE_INLINE GLboolean phaserIsFramebuffer(GLuint framebuffer) { return phaserGL.IsFramebuffer(framebuffer); }
PHASER_FORCE_INLINE GLboolean phaserIsFramebufferEXT(GLuint framebuffer) { return phaserGL.IsFramebufferEXT(framebuffer); }
PHASER_FORCE_INLINE GLboolean phaserIsFramebufferOES(GLuint framebuffer) { return phaserGL.IsFramebufferOES(framebuffer); }
PHASER_FORCE_INLINE GLboolean phaserIsImageHandleResidentARB(GLuint64 handle) { return phaserGL.IsImageHandleResidentARB(handle); }
PHASER_FORCE_INLINE GLboolean phaserIsImageHandleResidentNV(GLuint64 handle) { return phaserGL.IsImageHandleResidentNV(handle); }
PHASER_FORCE_INLINE GLboolean phaserIsList(GLuint list) { return phaserGL.IsList(list); }
PHASER_FORCE_INLINE GLboolean phaserIsMemoryObjectEXT(GLuint memoryObject) { return phaserGL.IsMemoryObjectEXT(memoryObject); }
PHASER_FORCE_INLINE GLboolean phaserIsNameAMD(GLenum identifier, GLuint name) { return phaserGL.IsNameAMD(identifier, name); }
PHASER_FORCE_INLINE GLboolean phaserIsNamedBufferResidentNV(GLuint buffer) { return phaserGL.IsNamedBufferResidentNV(buffer); }
PHASER_FORCE_INLINE GLboolean phaserIsNamedStringARB(GLint namelen, const GLchar * name) { return phaserGL.IsNamedStringARB(namelen, name); }
PHASER_FORCE_INLINE GLboolean phaserIsObjectBufferATI(GLuint buffer) { return phaserGL.IsObjectBufferATI(buffer); }
PHASER_FORCE_INLINE GLboolean phaserIsOcclusionQueryNV(GLuint id) { return phaserGL.IsOcclusionQueryNV(id); }
PHASER_FORCE_INLINE GLboolean phaserIsPathNV(GLuint path) { return phaserGL.IsPathNV(path); }
PHASER_FORCE_INLINE GLboolean phaserIsPointInFillPathNV(GLuint path, GLuint mask, GLfloat x, GLfloat y) { return phaserGL.IsPointInFillPathNV(path, mask, x, y); }
PHASER_FORCE_INLINE GLboolean phaserIsPointInStrokePathNV(GLuint path, GLfloat x, GLfloat y) { return phaserGL.IsPointInStrokePathNV(path, x, y); }
PHASER_FORCE_INLINE GLboolean phaserIsProgram(GLuint program) { return phaserGL.IsProgram(program); }
PHASER_FORCE_INLINE GLboolean phaserIsProgramARB(GLuint program) { return phaserGL.IsProgramARB(program); }
PHASER_FORCE_INLINE GLboolean phaserIsProgramNV(GLuint id) { return phaserGL.IsProgramNV(id); }
PHASER_FORCE_INLINE GLboolean phaserIsProgramPipeline(GLuint pipeline) { return phaserGL.IsProgramPipeline(pipeline); }
PHASER_FORCE_INLINE GLboolean phaserIsProgramPipelineEXT(GLuint pipeline) { return phaserGL.IsProgramPipelineEXT(pipeline); }
PHASER_FORCE_INLINE GLboolean phaserIsQuery(GLuint id) { return phaserGL.IsQuery(id); }
PHASER_FORCE_INLINE GLboolean phaserIsQueryARB(GLuint id) { return phaserGL.IsQueryARB(id); }
PHASER_FORCE_INLINE GLboolean phaserIsQueryEXT(GLuint id) { return phaserGL.IsQueryEXT(id); }
PHASER_FORCE_INLINE GLboolean phaserIsRenderbuffer(GLuint renderbuffer) { return phaserGL.IsRenderbuffer(renderbuffer); }
PHASER_FORCE_INLINE GLboolean phaserIsRenderbufferEXT(GLuint renderbuffer) { return phaserGL.IsRenderbufferEXT(renderbuffer); }
PHASER_FORCE_INLINE GLboolean phaserIsRenderbufferOES(GLuint renderbuffer) { return phaserGL.IsRenderbufferOES(renderbuffer); }
PHASER_FORCE_INLINE GLboolean phaserIsSampler(GLuint sampler) { return phaserGL.IsSampler(sampler); }
PHASER_FORCE_INLINE GLboolean phaserIsSemaphoreEXT(GLuint semaphore) { return phaserGL.IsSemaphoreEXT(semaphore); }
PHASER_FORCE_INLINE GLboolean phaserIsShader(GLuint shader) { return phaserGL.IsShader(shader); }
PHASER_FORCE_INLINE GLboolean phaserIsStateNV(GLuint state) { return phaserGL.IsStateNV(state); }
PHASER_FORCE_INLINE GLboolean phaserIsSync(GLsync sync) { return phaserGL.IsSync(sync); }
PHASER_FORCE_INLINE GLboolean phaserIsSyncAPPLE(GLsync sync) { return phaserGL.IsSyncAPPLE(sync); }
PHASER_FORCE_INLINE GLboolean phaserIsTexture(GLuint texture) { return phaserGL.IsTexture(texture); }
PHASER_FORCE_INLINE GLboolean phaserIsTextureEXT(GLuint texture) { return phaserGL.IsTextureEXT(texture); }
PHASER_FORCE_INLINE GLboolean phaserIsTextureHandleResidentARB(GLuint64 handle) { return phaserGL.IsTextureHandleResidentARB(handle); }
PHASER_FORCE_INLINE GLboolean phaserIsTextureHandleResidentNV(GLuint64 handle) { return phaserGL.IsTextureHandleResidentNV(handle); }
PHASER_FORCE_INLINE GLboolean phaserIsTransformFeedback(GLuint id) { return phaserGL.IsTransformFeedback(id); }
PHASER_FORCE_INLINE GLboolean phaserIsTransformFeedbackNV(GLuint id) { return phaserGL.IsTransformFeedbackNV(id); }
PHASER_FORCE_INLINE GLboolean phaserIsVariantEnabledEXT(GLuint id, GLenum cap) { return phaserGL.IsVariantEnabledEXT(id, cap); }
PHASER_FORCE_INLINE GLboolean phaserIsVertexArray(GLuint array) { return phaserGL.IsVertexArray(array); }
PHASER_FORCE_INLINE GLboolean phaserIsVertexArrayAPPLE(GLuint array) { return phaserGL.IsVertexArrayAPPLE(array); }
PHASER_FORCE_INLINE GLboolean phaserIsVertexArrayOES(GLuint array) { return phaserGL.IsVertexArrayOES(array); }
PHASER_FORCE_INLINE GLboolean phaserIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname) { return phaserGL.IsVertexAttribEnabledAPPLE(index, pname); }
PHASER_FORCE_INLINE void  phaserLGPUCopyImageSubDataNVX(GLuint sourceGpu, GLbitfield destinationGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srxY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.LGPUCopyImageSubDataNVX(sourceGpu, destinationGpuMask, srcName, srcTarget, srcLevel, srcX, srxY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth); }
PHASER_FORCE_INLINE void  phaserLGPUInterlockNVX(void) { phaserGL.LGPUInterlockNVX(); }
PHASER_FORCE_INLINE void  phaserLGPUNamedBufferSubDataNVX(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { phaserGL.LGPUNamedBufferSubDataNVX(gpuMask, buffer, offset, size, data); }
PHASER_FORCE_INLINE void  phaserLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar * label) { phaserGL.LabelObjectEXT(type, object, length, label); }
PHASER_FORCE_INLINE void  phaserLightEnviSGIX(GLenum pname, GLint param) { phaserGL.LightEnviSGIX(pname, param); }
PHASER_FORCE_INLINE void  phaserLightModelf(GLenum pname, GLfloat param) { phaserGL.LightModelf(pname, param); }
PHASER_FORCE_INLINE void  phaserLightModelfv(GLenum pname, const GLfloat * params) { phaserGL.LightModelfv(pname, params); }
PHASER_FORCE_INLINE void  phaserLightModeli(GLenum pname, GLint param) { phaserGL.LightModeli(pname, param); }
PHASER_FORCE_INLINE void  phaserLightModeliv(GLenum pname, const GLint * params) { phaserGL.LightModeliv(pname, params); }
PHASER_FORCE_INLINE void  phaserLightModelx(GLenum pname, GLfixed param) { phaserGL.LightModelx(pname, param); }
PHASER_FORCE_INLINE void  phaserLightModelxOES(GLenum pname, GLfixed param) { phaserGL.LightModelxOES(pname, param); }
PHASER_FORCE_INLINE void  phaserLightModelxv(GLenum pname, const GLfixed * param) { phaserGL.LightModelxv(pname, param); }
PHASER_FORCE_INLINE void  phaserLightModelxvOES(GLenum pname, const GLfixed * param) { phaserGL.LightModelxvOES(pname, param); }
PHASER_FORCE_INLINE void  phaserLightf(GLenum light, GLenum pname, GLfloat param) { phaserGL.Lightf(light, pname, param); }
PHASER_FORCE_INLINE void  phaserLightfv(GLenum light, GLenum pname, const GLfloat * params) { phaserGL.Lightfv(light, pname, params); }
PHASER_FORCE_INLINE void  phaserLighti(GLenum light, GLenum pname, GLint param) { phaserGL.Lighti(light, pname, param); }
PHASER_FORCE_INLINE void  phaserLightiv(GLenum light, GLenum pname, const GLint * params) { phaserGL.Lightiv(light, pname, params); }
PHASER_FORCE_INLINE void  phaserLightx(GLenum light, GLenum pname, GLfixed param) { phaserGL.Lightx(light, pname, param); }
PHASER_FORCE_INLINE void  phaserLightxOES(GLenum light, GLenum pname, GLfixed param) { phaserGL.LightxOES(light, pname, param); }
PHASER_FORCE_INLINE void  phaserLightxv(GLenum light, GLenum pname, const GLfixed * params) { phaserGL.Lightxv(light, pname, params); }
PHASER_FORCE_INLINE void  phaserLightxvOES(GLenum light, GLenum pname, const GLfixed * params) { phaserGL.LightxvOES(light, pname, params); }
PHASER_FORCE_INLINE void  phaserLineStipple(GLint factor, GLushort pattern) { phaserGL.LineStipple(factor, pattern); }
PHASER_FORCE_INLINE void  phaserLineWidth(GLfloat width) { phaserGL.LineWidth(width); }
PHASER_FORCE_INLINE void  phaserLineWidthx(GLfixed width) { phaserGL.LineWidthx(width); }
PHASER_FORCE_INLINE void  phaserLineWidthxOES(GLfixed width) { phaserGL.LineWidthxOES(width); }
PHASER_FORCE_INLINE void  phaserLinkProgram(GLuint program) { phaserGL.LinkProgram(program); }
PHASER_FORCE_INLINE void  phaserLinkProgramARB(GLhandleARB programObj) { phaserGL.LinkProgramARB(programObj); }
PHASER_FORCE_INLINE void  phaserListBase(GLuint base) { phaserGL.ListBase(base); }
PHASER_FORCE_INLINE void  phaserListDrawCommandsStatesClientNV(GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count) { phaserGL.ListDrawCommandsStatesClientNV(list, segment, indirects, sizes, states, fbos, count); }
PHASER_FORCE_INLINE void  phaserListParameterfSGIX(GLuint list, GLenum pname, GLfloat param) { phaserGL.ListParameterfSGIX(list, pname, param); }
PHASER_FORCE_INLINE void  phaserListParameterfvSGIX(GLuint list, GLenum pname, const GLfloat * params) { phaserGL.ListParameterfvSGIX(list, pname, params); }
PHASER_FORCE_INLINE void  phaserListParameteriSGIX(GLuint list, GLenum pname, GLint param) { phaserGL.ListParameteriSGIX(list, pname, param); }
PHASER_FORCE_INLINE void  phaserListParameterivSGIX(GLuint list, GLenum pname, const GLint * params) { phaserGL.ListParameterivSGIX(list, pname, params); }
PHASER_FORCE_INLINE void  phaserLoadIdentity(void) { phaserGL.LoadIdentity(); }
PHASER_FORCE_INLINE void  phaserLoadIdentityDeformationMapSGIX(GLbitfield mask) { phaserGL.LoadIdentityDeformationMapSGIX(mask); }
PHASER_FORCE_INLINE void  phaserLoadMatrixd(const GLdouble * m) { phaserGL.LoadMatrixd(m); }
PHASER_FORCE_INLINE void  phaserLoadMatrixf(const GLfloat * m) { phaserGL.LoadMatrixf(m); }
PHASER_FORCE_INLINE void  phaserLoadMatrixx(const GLfixed * m) { phaserGL.LoadMatrixx(m); }
PHASER_FORCE_INLINE void  phaserLoadMatrixxOES(const GLfixed * m) { phaserGL.LoadMatrixxOES(m); }
PHASER_FORCE_INLINE void  phaserLoadName(GLuint name) { phaserGL.LoadName(name); }
PHASER_FORCE_INLINE void  phaserLoadPaletteFromModelViewMatrixOES(void) { phaserGL.LoadPaletteFromModelViewMatrixOES(); }
PHASER_FORCE_INLINE void  phaserLoadProgramNV(GLenum target, GLuint id, GLsizei len, const GLubyte * program) { phaserGL.LoadProgramNV(target, id, len, program); }
PHASER_FORCE_INLINE void  phaserLoadTransposeMatrixd(const GLdouble * m) { phaserGL.LoadTransposeMatrixd(m); }
PHASER_FORCE_INLINE void  phaserLoadTransposeMatrixdARB(const GLdouble * m) { phaserGL.LoadTransposeMatrixdARB(m); }
PHASER_FORCE_INLINE void  phaserLoadTransposeMatrixf(const GLfloat * m) { phaserGL.LoadTransposeMatrixf(m); }
PHASER_FORCE_INLINE void  phaserLoadTransposeMatrixfARB(const GLfloat * m) { phaserGL.LoadTransposeMatrixfARB(m); }
PHASER_FORCE_INLINE void  phaserLoadTransposeMatrixxOES(const GLfixed * m) { phaserGL.LoadTransposeMatrixxOES(m); }
PHASER_FORCE_INLINE void  phaserLockArraysEXT(GLint first, GLsizei count) { phaserGL.LockArraysEXT(first, count); }
PHASER_FORCE_INLINE void  phaserLogicOp(GLenum opcode) { phaserGL.LogicOp(opcode); }
PHASER_FORCE_INLINE void  phaserMakeBufferNonResidentNV(GLenum target) { phaserGL.MakeBufferNonResidentNV(target); }
PHASER_FORCE_INLINE void  phaserMakeBufferResidentNV(GLenum target, GLenum access) { phaserGL.MakeBufferResidentNV(target, access); }
PHASER_FORCE_INLINE void  phaserMakeImageHandleNonResidentARB(GLuint64 handle) { phaserGL.MakeImageHandleNonResidentARB(handle); }
PHASER_FORCE_INLINE void  phaserMakeImageHandleNonResidentNV(GLuint64 handle) { phaserGL.MakeImageHandleNonResidentNV(handle); }
PHASER_FORCE_INLINE void  phaserMakeImageHandleResidentARB(GLuint64 handle, GLenum access) { phaserGL.MakeImageHandleResidentARB(handle, access); }
PHASER_FORCE_INLINE void  phaserMakeImageHandleResidentNV(GLuint64 handle, GLenum access) { phaserGL.MakeImageHandleResidentNV(handle, access); }
PHASER_FORCE_INLINE void  phaserMakeNamedBufferNonResidentNV(GLuint buffer) { phaserGL.MakeNamedBufferNonResidentNV(buffer); }
PHASER_FORCE_INLINE void  phaserMakeNamedBufferResidentNV(GLuint buffer, GLenum access) { phaserGL.MakeNamedBufferResidentNV(buffer, access); }
PHASER_FORCE_INLINE void  phaserMakeTextureHandleNonResidentARB(GLuint64 handle) { phaserGL.MakeTextureHandleNonResidentARB(handle); }
PHASER_FORCE_INLINE void  phaserMakeTextureHandleNonResidentNV(GLuint64 handle) { phaserGL.MakeTextureHandleNonResidentNV(handle); }
PHASER_FORCE_INLINE void  phaserMakeTextureHandleResidentARB(GLuint64 handle) { phaserGL.MakeTextureHandleResidentARB(handle); }
PHASER_FORCE_INLINE void  phaserMakeTextureHandleResidentNV(GLuint64 handle) { phaserGL.MakeTextureHandleResidentNV(handle); }
PHASER_FORCE_INLINE void  phaserMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { phaserGL.Map1d(target, u1, u2, stride, order, points); }
PHASER_FORCE_INLINE void  phaserMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { phaserGL.Map1f(target, u1, u2, stride, order, points); }
PHASER_FORCE_INLINE void  phaserMap1xOES(GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points) { phaserGL.Map1xOES(target, u1, u2, stride, order, points); }
PHASER_FORCE_INLINE void  phaserMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { phaserGL.Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
PHASER_FORCE_INLINE void  phaserMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { phaserGL.Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
PHASER_FORCE_INLINE void  phaserMap2xOES(GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points) { phaserGL.Map2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
PHASER_FORCE_INLINE void * phaserMapBuffer(GLenum target, GLenum access) { return phaserGL.MapBuffer(target, access); }
PHASER_FORCE_INLINE void * phaserMapBufferARB(GLenum target, GLenum access) { return phaserGL.MapBufferARB(target, access); }
PHASER_FORCE_INLINE void * phaserMapBufferOES(GLenum target, GLenum access) { return phaserGL.MapBufferOES(target, access); }
PHASER_FORCE_INLINE void * phaserMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return phaserGL.MapBufferRange(target, offset, length, access); }
PHASER_FORCE_INLINE void * phaserMapBufferRangeEXT(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access) { return phaserGL.MapBufferRangeEXT(target, offset, length, access); }
PHASER_FORCE_INLINE void  phaserMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points) { phaserGL.MapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points); }
PHASER_FORCE_INLINE void  phaserMapGrid1d(GLint un, GLdouble u1, GLdouble u2) { phaserGL.MapGrid1d(un, u1, u2); }
PHASER_FORCE_INLINE void  phaserMapGrid1f(GLint un, GLfloat u1, GLfloat u2) { phaserGL.MapGrid1f(un, u1, u2); }
PHASER_FORCE_INLINE void  phaserMapGrid1xOES(GLint n, GLfixed u1, GLfixed u2) { phaserGL.MapGrid1xOES(n, u1, u2); }
PHASER_FORCE_INLINE void  phaserMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) { phaserGL.MapGrid2d(un, u1, u2, vn, v1, v2); }
PHASER_FORCE_INLINE void  phaserMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) { phaserGL.MapGrid2f(un, u1, u2, vn, v1, v2); }
PHASER_FORCE_INLINE void  phaserMapGrid2xOES(GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2) { phaserGL.MapGrid2xOES(n, u1, u2, v1, v2); }
PHASER_FORCE_INLINE void * phaserMapNamedBuffer(GLuint buffer, GLenum access) { return phaserGL.MapNamedBuffer(buffer, access); }
PHASER_FORCE_INLINE void * phaserMapNamedBufferEXT(GLuint buffer, GLenum access) { return phaserGL.MapNamedBufferEXT(buffer, access); }
PHASER_FORCE_INLINE void * phaserMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return phaserGL.MapNamedBufferRange(buffer, offset, length, access); }
PHASER_FORCE_INLINE void * phaserMapNamedBufferRangeEXT(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access) { return phaserGL.MapNamedBufferRangeEXT(buffer, offset, length, access); }
PHASER_FORCE_INLINE void * phaserMapObjectBufferATI(GLuint buffer) { return phaserGL.MapObjectBufferATI(buffer); }
PHASER_FORCE_INLINE void  phaserMapParameterfvNV(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.MapParameterfvNV(target, pname, params); }
PHASER_FORCE_INLINE void  phaserMapParameterivNV(GLenum target, GLenum pname, const GLint * params) { phaserGL.MapParameterivNV(target, pname, params); }
PHASER_FORCE_INLINE void * phaserMapTexture2DINTEL(GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout) { return phaserGL.MapTexture2DINTEL(texture, level, access, stride, layout); }
PHASER_FORCE_INLINE void  phaserMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) { phaserGL.MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points); }
PHASER_FORCE_INLINE void  phaserMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) { phaserGL.MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points); }
PHASER_FORCE_INLINE void  phaserMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) { phaserGL.MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
PHASER_FORCE_INLINE void  phaserMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) { phaserGL.MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points); }
PHASER_FORCE_INLINE void  phaserMaterialf(GLenum face, GLenum pname, GLfloat param) { phaserGL.Materialf(face, pname, param); }
PHASER_FORCE_INLINE void  phaserMaterialfv(GLenum face, GLenum pname, const GLfloat * params) { phaserGL.Materialfv(face, pname, params); }
PHASER_FORCE_INLINE void  phaserMateriali(GLenum face, GLenum pname, GLint param) { phaserGL.Materiali(face, pname, param); }
PHASER_FORCE_INLINE void  phaserMaterialiv(GLenum face, GLenum pname, const GLint * params) { phaserGL.Materialiv(face, pname, params); }
PHASER_FORCE_INLINE void  phaserMaterialx(GLenum face, GLenum pname, GLfixed param) { phaserGL.Materialx(face, pname, param); }
PHASER_FORCE_INLINE void  phaserMaterialxOES(GLenum face, GLenum pname, GLfixed param) { phaserGL.MaterialxOES(face, pname, param); }
PHASER_FORCE_INLINE void  phaserMaterialxv(GLenum face, GLenum pname, const GLfixed * param) { phaserGL.Materialxv(face, pname, param); }
PHASER_FORCE_INLINE void  phaserMaterialxvOES(GLenum face, GLenum pname, const GLfixed * param) { phaserGL.MaterialxvOES(face, pname, param); }
PHASER_FORCE_INLINE void  phaserMatrixFrustumEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { phaserGL.MatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar); }
PHASER_FORCE_INLINE void  phaserMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.MatrixIndexPointerARB(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.MatrixIndexPointerOES(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserMatrixIndexubvARB(GLint size, const GLubyte * indices) { phaserGL.MatrixIndexubvARB(size, indices); }
PHASER_FORCE_INLINE void  phaserMatrixIndexuivARB(GLint size, const GLuint * indices) { phaserGL.MatrixIndexuivARB(size, indices); }
PHASER_FORCE_INLINE void  phaserMatrixIndexusvARB(GLint size, const GLushort * indices) { phaserGL.MatrixIndexusvARB(size, indices); }
PHASER_FORCE_INLINE void  phaserMatrixLoad3x2fNV(GLenum matrixMode, const GLfloat * m) { phaserGL.MatrixLoad3x2fNV(matrixMode, m); }
PHASER_FORCE_INLINE void  phaserMatrixLoad3x3fNV(GLenum matrixMode, const GLfloat * m) { phaserGL.MatrixLoad3x3fNV(matrixMode, m); }
PHASER_FORCE_INLINE void  phaserMatrixLoadIdentityEXT(GLenum mode) { phaserGL.MatrixLoadIdentityEXT(mode); }
PHASER_FORCE_INLINE void  phaserMatrixLoadTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { phaserGL.MatrixLoadTranspose3x3fNV(matrixMode, m); }
PHASER_FORCE_INLINE void  phaserMatrixLoadTransposedEXT(GLenum mode, const GLdouble * m) { phaserGL.MatrixLoadTransposedEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixLoadTransposefEXT(GLenum mode, const GLfloat * m) { phaserGL.MatrixLoadTransposefEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixLoaddEXT(GLenum mode, const GLdouble * m) { phaserGL.MatrixLoaddEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixLoadfEXT(GLenum mode, const GLfloat * m) { phaserGL.MatrixLoadfEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMode(GLenum mode) { phaserGL.MatrixMode(mode); }
PHASER_FORCE_INLINE void  phaserMatrixMult3x2fNV(GLenum matrixMode, const GLfloat * m) { phaserGL.MatrixMult3x2fNV(matrixMode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMult3x3fNV(GLenum matrixMode, const GLfloat * m) { phaserGL.MatrixMult3x3fNV(matrixMode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMultTranspose3x3fNV(GLenum matrixMode, const GLfloat * m) { phaserGL.MatrixMultTranspose3x3fNV(matrixMode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMultTransposedEXT(GLenum mode, const GLdouble * m) { phaserGL.MatrixMultTransposedEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMultTransposefEXT(GLenum mode, const GLfloat * m) { phaserGL.MatrixMultTransposefEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMultdEXT(GLenum mode, const GLdouble * m) { phaserGL.MatrixMultdEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixMultfEXT(GLenum mode, const GLfloat * m) { phaserGL.MatrixMultfEXT(mode, m); }
PHASER_FORCE_INLINE void  phaserMatrixOrthoEXT(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { phaserGL.MatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar); }
PHASER_FORCE_INLINE void  phaserMatrixPopEXT(GLenum mode) { phaserGL.MatrixPopEXT(mode); }
PHASER_FORCE_INLINE void  phaserMatrixPushEXT(GLenum mode) { phaserGL.MatrixPushEXT(mode); }
PHASER_FORCE_INLINE void  phaserMatrixRotatedEXT(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { phaserGL.MatrixRotatedEXT(mode, angle, x, y, z); }
PHASER_FORCE_INLINE void  phaserMatrixRotatefEXT(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { phaserGL.MatrixRotatefEXT(mode, angle, x, y, z); }
PHASER_FORCE_INLINE void  phaserMatrixScaledEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { phaserGL.MatrixScaledEXT(mode, x, y, z); }
PHASER_FORCE_INLINE void  phaserMatrixScalefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { phaserGL.MatrixScalefEXT(mode, x, y, z); }
PHASER_FORCE_INLINE void  phaserMatrixTranslatedEXT(GLenum mode, GLdouble x, GLdouble y, GLdouble z) { phaserGL.MatrixTranslatedEXT(mode, x, y, z); }
PHASER_FORCE_INLINE void  phaserMatrixTranslatefEXT(GLenum mode, GLfloat x, GLfloat y, GLfloat z) { phaserGL.MatrixTranslatefEXT(mode, x, y, z); }
PHASER_FORCE_INLINE void  phaserMaxShaderCompilerThreadsARB(GLuint count) { phaserGL.MaxShaderCompilerThreadsARB(count); }
PHASER_FORCE_INLINE void  phaserMaxShaderCompilerThreadsKHR(GLuint count) { phaserGL.MaxShaderCompilerThreadsKHR(count); }
PHASER_FORCE_INLINE void  phaserMemoryBarrier(GLbitfield barriers) { phaserGL.MemoryBarrier(barriers); }
PHASER_FORCE_INLINE void  phaserMemoryBarrierByRegion(GLbitfield barriers) { phaserGL.MemoryBarrierByRegion(barriers); }
PHASER_FORCE_INLINE void  phaserMemoryBarrierEXT(GLbitfield barriers) { phaserGL.MemoryBarrierEXT(barriers); }
PHASER_FORCE_INLINE void  phaserMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint * params) { phaserGL.MemoryObjectParameterivEXT(memoryObject, pname, params); }
PHASER_FORCE_INLINE void  phaserMinSampleShading(GLfloat value) { phaserGL.MinSampleShading(value); }
PHASER_FORCE_INLINE void  phaserMinSampleShadingARB(GLfloat value) { phaserGL.MinSampleShadingARB(value); }
PHASER_FORCE_INLINE void  phaserMinSampleShadingOES(GLfloat value) { phaserGL.MinSampleShadingOES(value); }
PHASER_FORCE_INLINE void  phaserMinmax(GLenum target, GLenum internalformat, GLboolean sink) { phaserGL.Minmax(target, internalformat, sink); }
PHASER_FORCE_INLINE void  phaserMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink) { phaserGL.MinmaxEXT(target, internalformat, sink); }
PHASER_FORCE_INLINE void  phaserMultMatrixd(const GLdouble * m) { phaserGL.MultMatrixd(m); }
PHASER_FORCE_INLINE void  phaserMultMatrixf(const GLfloat * m) { phaserGL.MultMatrixf(m); }
PHASER_FORCE_INLINE void  phaserMultMatrixx(const GLfixed * m) { phaserGL.MultMatrixx(m); }
PHASER_FORCE_INLINE void  phaserMultMatrixxOES(const GLfixed * m) { phaserGL.MultMatrixxOES(m); }
PHASER_FORCE_INLINE void  phaserMultTransposeMatrixd(const GLdouble * m) { phaserGL.MultTransposeMatrixd(m); }
PHASER_FORCE_INLINE void  phaserMultTransposeMatrixdARB(const GLdouble * m) { phaserGL.MultTransposeMatrixdARB(m); }
PHASER_FORCE_INLINE void  phaserMultTransposeMatrixf(const GLfloat * m) { phaserGL.MultTransposeMatrixf(m); }
PHASER_FORCE_INLINE void  phaserMultTransposeMatrixfARB(const GLfloat * m) { phaserGL.MultTransposeMatrixfARB(m); }
PHASER_FORCE_INLINE void  phaserMultTransposeMatrixxOES(const GLfixed * m) { phaserGL.MultTransposeMatrixxOES(m); }
PHASER_FORCE_INLINE void  phaserMultiDrawArrays(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount) { phaserGL.MultiDrawArrays(mode, first, count, drawcount); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysEXT(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { phaserGL.MultiDrawArraysEXT(mode, first, count, primcount); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { phaserGL.MultiDrawArraysIndirect(mode, indirect, drawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirectAMD(GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride) { phaserGL.MultiDrawArraysIndirectAMD(mode, indirect, primcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirectBindlessCountNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { phaserGL.MultiDrawArraysIndirectBindlessCountNV(mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirectBindlessNV(GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { phaserGL.MultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirectCount(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { phaserGL.MultiDrawArraysIndirectCount(mode, indirect, drawcount, maxdrawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirectCountARB(GLenum mode, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { phaserGL.MultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawArraysIndirectEXT(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride) { phaserGL.MultiDrawArraysIndirectEXT(mode, indirect, drawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementArrayAPPLE(GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount) { phaserGL.MultiDrawElementArrayAPPLE(mode, first, count, primcount); }
PHASER_FORCE_INLINE void  phaserMultiDrawElements(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount) { phaserGL.MultiDrawElements(mode, count, type, indices, drawcount); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsBaseVertex(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex) { phaserGL.MultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsBaseVertexEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex) { phaserGL.MultiDrawElementsBaseVertexEXT(mode, count, type, indices, primcount, basevertex); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsEXT(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount) { phaserGL.MultiDrawElementsEXT(mode, count, type, indices, primcount); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { phaserGL.MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirectAMD(GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride) { phaserGL.MultiDrawElementsIndirectAMD(mode, type, indirect, primcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirectBindlessCountNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount) { phaserGL.MultiDrawElementsIndirectBindlessCountNV(mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirectBindlessNV(GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount) { phaserGL.MultiDrawElementsIndirectBindlessNV(mode, type, indirect, drawCount, stride, vertexBufferCount); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirectCount(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { phaserGL.MultiDrawElementsIndirectCount(mode, type, indirect, drawcount, maxdrawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, const void * indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride) { phaserGL.MultiDrawElementsIndirectCountARB(mode, type, indirect, drawcount, maxdrawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawElementsIndirectEXT(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride) { phaserGL.MultiDrawElementsIndirectEXT(mode, type, indirect, drawcount, stride); }
PHASER_FORCE_INLINE void  phaserMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount) { phaserGL.MultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount); }
PHASER_FORCE_INLINE void  phaserMultiModeDrawArraysIBM(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride) { phaserGL.MultiModeDrawArraysIBM(mode, first, count, primcount, modestride); }
PHASER_FORCE_INLINE void  phaserMultiModeDrawElementsIBM(const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride) { phaserGL.MultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride); }
PHASER_FORCE_INLINE void  phaserMultiTexBufferEXT(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer) { phaserGL.MultiTexBufferEXT(texunit, target, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1bOES(GLenum texture, GLbyte s) { phaserGL.MultiTexCoord1bOES(texture, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1bvOES(GLenum texture, const GLbyte * coords) { phaserGL.MultiTexCoord1bvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1d(GLenum target, GLdouble s) { phaserGL.MultiTexCoord1d(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1dARB(GLenum target, GLdouble s) { phaserGL.MultiTexCoord1dARB(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1dv(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord1dv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1dvARB(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord1dvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1f(GLenum target, GLfloat s) { phaserGL.MultiTexCoord1f(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1fARB(GLenum target, GLfloat s) { phaserGL.MultiTexCoord1fARB(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1fv(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord1fv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1fvARB(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord1fvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1hNV(GLenum target, GLhalfNV s) { phaserGL.MultiTexCoord1hNV(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1hvNV(GLenum target, const GLhalfNV * v) { phaserGL.MultiTexCoord1hvNV(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1i(GLenum target, GLint s) { phaserGL.MultiTexCoord1i(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1iARB(GLenum target, GLint s) { phaserGL.MultiTexCoord1iARB(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1iv(GLenum target, const GLint * v) { phaserGL.MultiTexCoord1iv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1ivARB(GLenum target, const GLint * v) { phaserGL.MultiTexCoord1ivARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1s(GLenum target, GLshort s) { phaserGL.MultiTexCoord1s(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1sARB(GLenum target, GLshort s) { phaserGL.MultiTexCoord1sARB(target, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1sv(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord1sv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1svARB(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord1svARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1xOES(GLenum texture, GLfixed s) { phaserGL.MultiTexCoord1xOES(texture, s); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord1xvOES(GLenum texture, const GLfixed * coords) { phaserGL.MultiTexCoord1xvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2bOES(GLenum texture, GLbyte s, GLbyte t) { phaserGL.MultiTexCoord2bOES(texture, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2bvOES(GLenum texture, const GLbyte * coords) { phaserGL.MultiTexCoord2bvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t) { phaserGL.MultiTexCoord2d(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t) { phaserGL.MultiTexCoord2dARB(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2dv(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord2dv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2dvARB(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord2dvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t) { phaserGL.MultiTexCoord2f(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t) { phaserGL.MultiTexCoord2fARB(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2fv(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord2fv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2fvARB(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord2fvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t) { phaserGL.MultiTexCoord2hNV(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2hvNV(GLenum target, const GLhalfNV * v) { phaserGL.MultiTexCoord2hvNV(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2i(GLenum target, GLint s, GLint t) { phaserGL.MultiTexCoord2i(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2iARB(GLenum target, GLint s, GLint t) { phaserGL.MultiTexCoord2iARB(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2iv(GLenum target, const GLint * v) { phaserGL.MultiTexCoord2iv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2ivARB(GLenum target, const GLint * v) { phaserGL.MultiTexCoord2ivARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2s(GLenum target, GLshort s, GLshort t) { phaserGL.MultiTexCoord2s(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t) { phaserGL.MultiTexCoord2sARB(target, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2sv(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord2sv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2svARB(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord2svARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2xOES(GLenum texture, GLfixed s, GLfixed t) { phaserGL.MultiTexCoord2xOES(texture, s, t); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord2xvOES(GLenum texture, const GLfixed * coords) { phaserGL.MultiTexCoord2xvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r) { phaserGL.MultiTexCoord3bOES(texture, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3bvOES(GLenum texture, const GLbyte * coords) { phaserGL.MultiTexCoord3bvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r) { phaserGL.MultiTexCoord3d(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r) { phaserGL.MultiTexCoord3dARB(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3dv(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord3dv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3dvARB(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord3dvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r) { phaserGL.MultiTexCoord3f(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r) { phaserGL.MultiTexCoord3fARB(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3fv(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord3fv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3fvARB(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord3fvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r) { phaserGL.MultiTexCoord3hNV(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3hvNV(GLenum target, const GLhalfNV * v) { phaserGL.MultiTexCoord3hvNV(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r) { phaserGL.MultiTexCoord3i(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r) { phaserGL.MultiTexCoord3iARB(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3iv(GLenum target, const GLint * v) { phaserGL.MultiTexCoord3iv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3ivARB(GLenum target, const GLint * v) { phaserGL.MultiTexCoord3ivARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r) { phaserGL.MultiTexCoord3s(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r) { phaserGL.MultiTexCoord3sARB(target, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3sv(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord3sv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3svARB(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord3svARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r) { phaserGL.MultiTexCoord3xOES(texture, s, t, r); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord3xvOES(GLenum texture, const GLfixed * coords) { phaserGL.MultiTexCoord3xvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4bOES(GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q) { phaserGL.MultiTexCoord4bOES(texture, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4bvOES(GLenum texture, const GLbyte * coords) { phaserGL.MultiTexCoord4bvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { phaserGL.MultiTexCoord4d(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q) { phaserGL.MultiTexCoord4dARB(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4dv(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord4dv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4dvARB(GLenum target, const GLdouble * v) { phaserGL.MultiTexCoord4dvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { phaserGL.MultiTexCoord4f(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q) { phaserGL.MultiTexCoord4fARB(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4fv(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord4fv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4fvARB(GLenum target, const GLfloat * v) { phaserGL.MultiTexCoord4fvARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { phaserGL.MultiTexCoord4hNV(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4hvNV(GLenum target, const GLhalfNV * v) { phaserGL.MultiTexCoord4hvNV(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q) { phaserGL.MultiTexCoord4i(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q) { phaserGL.MultiTexCoord4iARB(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4iv(GLenum target, const GLint * v) { phaserGL.MultiTexCoord4iv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4ivARB(GLenum target, const GLint * v) { phaserGL.MultiTexCoord4ivARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { phaserGL.MultiTexCoord4s(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q) { phaserGL.MultiTexCoord4sARB(target, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4sv(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord4sv(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4svARB(GLenum target, const GLshort * v) { phaserGL.MultiTexCoord4svARB(target, v); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4x(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { phaserGL.MultiTexCoord4x(texture, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4xOES(GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q) { phaserGL.MultiTexCoord4xOES(texture, s, t, r, q); }
PHASER_FORCE_INLINE void  phaserMultiTexCoord4xvOES(GLenum texture, const GLfixed * coords) { phaserGL.MultiTexCoord4xvOES(texture, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP1ui(GLenum texture, GLenum type, GLuint coords) { phaserGL.MultiTexCoordP1ui(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP1uiv(GLenum texture, GLenum type, const GLuint * coords) { phaserGL.MultiTexCoordP1uiv(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP2ui(GLenum texture, GLenum type, GLuint coords) { phaserGL.MultiTexCoordP2ui(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP2uiv(GLenum texture, GLenum type, const GLuint * coords) { phaserGL.MultiTexCoordP2uiv(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP3ui(GLenum texture, GLenum type, GLuint coords) { phaserGL.MultiTexCoordP3ui(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP3uiv(GLenum texture, GLenum type, const GLuint * coords) { phaserGL.MultiTexCoordP3uiv(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP4ui(GLenum texture, GLenum type, GLuint coords) { phaserGL.MultiTexCoordP4ui(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordP4uiv(GLenum texture, GLenum type, const GLuint * coords) { phaserGL.MultiTexCoordP4uiv(texture, type, coords); }
PHASER_FORCE_INLINE void  phaserMultiTexCoordPointerEXT(GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.MultiTexCoordPointerEXT(texunit, size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserMultiTexEnvfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { phaserGL.MultiTexEnvfEXT(texunit, target, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexEnvfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { phaserGL.MultiTexEnvfvEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexEnviEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { phaserGL.MultiTexEnviEXT(texunit, target, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexEnvivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { phaserGL.MultiTexEnvivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexGendEXT(GLenum texunit, GLenum coord, GLenum pname, GLdouble param) { phaserGL.MultiTexGendEXT(texunit, coord, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexGendvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params) { phaserGL.MultiTexGendvEXT(texunit, coord, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexGenfEXT(GLenum texunit, GLenum coord, GLenum pname, GLfloat param) { phaserGL.MultiTexGenfEXT(texunit, coord, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexGenfvEXT(GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params) { phaserGL.MultiTexGenfvEXT(texunit, coord, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexGeniEXT(GLenum texunit, GLenum coord, GLenum pname, GLint param) { phaserGL.MultiTexGeniEXT(texunit, coord, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexGenivEXT(GLenum texunit, GLenum coord, GLenum pname, const GLint * params) { phaserGL.MultiTexGenivEXT(texunit, coord, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserMultiTexImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserMultiTexImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserMultiTexParameterIivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { phaserGL.MultiTexParameterIivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexParameterIuivEXT(GLenum texunit, GLenum target, GLenum pname, const GLuint * params) { phaserGL.MultiTexParameterIuivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexParameterfEXT(GLenum texunit, GLenum target, GLenum pname, GLfloat param) { phaserGL.MultiTexParameterfEXT(texunit, target, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexParameterfvEXT(GLenum texunit, GLenum target, GLenum pname, const GLfloat * params) { phaserGL.MultiTexParameterfvEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexParameteriEXT(GLenum texunit, GLenum target, GLenum pname, GLint param) { phaserGL.MultiTexParameteriEXT(texunit, target, pname, param); }
PHASER_FORCE_INLINE void  phaserMultiTexParameterivEXT(GLenum texunit, GLenum target, GLenum pname, const GLint * params) { phaserGL.MultiTexParameterivEXT(texunit, target, pname, params); }
PHASER_FORCE_INLINE void  phaserMultiTexRenderbufferEXT(GLenum texunit, GLenum target, GLuint renderbuffer) { phaserGL.MultiTexRenderbufferEXT(texunit, target, renderbuffer); }
PHASER_FORCE_INLINE void  phaserMultiTexSubImage1DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { phaserGL.MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserMultiTexSubImage2DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { phaserGL.MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserMultiTexSubImage3DEXT(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { phaserGL.MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserMulticastBarrierNV(void) { phaserGL.MulticastBarrierNV(); }
PHASER_FORCE_INLINE void  phaserMulticastBlitFramebufferNV(GLuint srcGpu, GLuint dstGpu, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter) { phaserGL.MulticastBlitFramebufferNV(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter); }
PHASER_FORCE_INLINE void  phaserMulticastBufferSubDataNV(GLbitfield gpuMask, GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { phaserGL.MulticastBufferSubDataNV(gpuMask, buffer, offset, size, data); }
PHASER_FORCE_INLINE void  phaserMulticastCopyBufferSubDataNV(GLuint readGpu, GLbitfield writeGpuMask, GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { phaserGL.MulticastCopyBufferSubDataNV(readGpu, writeGpuMask, readBuffer, writeBuffer, readOffset, writeOffset, size); }
PHASER_FORCE_INLINE void  phaserMulticastCopyImageSubDataNV(GLuint srcGpu, GLbitfield dstGpuMask, GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth) { phaserGL.MulticastCopyImageSubDataNV(srcGpu, dstGpuMask, srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth); }
PHASER_FORCE_INLINE void  phaserMulticastFramebufferSampleLocationsfvNV(GLuint gpu, GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { phaserGL.MulticastFramebufferSampleLocationsfvNV(gpu, framebuffer, start, count, v); }
PHASER_FORCE_INLINE void  phaserMulticastGetQueryObjecti64vNV(GLuint gpu, GLuint id, GLenum pname, GLint64 * params) { phaserGL.MulticastGetQueryObjecti64vNV(gpu, id, pname, params); }
PHASER_FORCE_INLINE void  phaserMulticastGetQueryObjectivNV(GLuint gpu, GLuint id, GLenum pname, GLint * params) { phaserGL.MulticastGetQueryObjectivNV(gpu, id, pname, params); }
PHASER_FORCE_INLINE void  phaserMulticastGetQueryObjectui64vNV(GLuint gpu, GLuint id, GLenum pname, GLuint64 * params) { phaserGL.MulticastGetQueryObjectui64vNV(gpu, id, pname, params); }
PHASER_FORCE_INLINE void  phaserMulticastGetQueryObjectuivNV(GLuint gpu, GLuint id, GLenum pname, GLuint * params) { phaserGL.MulticastGetQueryObjectuivNV(gpu, id, pname, params); }
PHASER_FORCE_INLINE void  phaserMulticastWaitSyncNV(GLuint signalGpu, GLbitfield waitGpuMask) { phaserGL.MulticastWaitSyncNV(signalGpu, waitGpuMask); }
PHASER_FORCE_INLINE void  phaserNamedBufferData(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { phaserGL.NamedBufferData(buffer, size, data, usage); }
PHASER_FORCE_INLINE void  phaserNamedBufferDataEXT(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage) { phaserGL.NamedBufferDataEXT(buffer, size, data, usage); }
PHASER_FORCE_INLINE void  phaserNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { phaserGL.NamedBufferPageCommitmentARB(buffer, offset, size, commit); }
PHASER_FORCE_INLINE void  phaserNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit) { phaserGL.NamedBufferPageCommitmentEXT(buffer, offset, size, commit); }
PHASER_FORCE_INLINE void  phaserNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { phaserGL.NamedBufferStorage(buffer, size, data, flags); }
PHASER_FORCE_INLINE void  phaserNamedBufferStorageEXT(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags) { phaserGL.NamedBufferStorageEXT(buffer, size, data, flags); }
PHASER_FORCE_INLINE void  phaserNamedBufferStorageExternalEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLeglClientBufferEXT clientBuffer, GLbitfield flags) { phaserGL.NamedBufferStorageExternalEXT(buffer, offset, size, clientBuffer, flags); }
PHASER_FORCE_INLINE void  phaserNamedBufferStorageMemEXT(GLuint buffer, GLsizeiptr size, GLuint memory, GLuint64 offset) { phaserGL.NamedBufferStorageMemEXT(buffer, size, memory, offset); }
PHASER_FORCE_INLINE void  phaserNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { phaserGL.NamedBufferSubData(buffer, offset, size, data); }
PHASER_FORCE_INLINE void  phaserNamedBufferSubDataEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data) { phaserGL.NamedBufferSubDataEXT(buffer, offset, size, data); }
PHASER_FORCE_INLINE void  phaserNamedCopyBufferSubDataEXT(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size) { phaserGL.NamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf) { phaserGL.NamedFramebufferDrawBuffer(framebuffer, buf); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum * bufs) { phaserGL.NamedFramebufferDrawBuffers(framebuffer, n, bufs); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param) { phaserGL.NamedFramebufferParameteri(framebuffer, pname, param); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferParameteriEXT(GLuint framebuffer, GLenum pname, GLint param) { phaserGL.NamedFramebufferParameteriEXT(framebuffer, pname, param); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src) { phaserGL.NamedFramebufferReadBuffer(framebuffer, src); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { phaserGL.NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferRenderbufferEXT(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer) { phaserGL.NamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferSampleLocationsfvARB(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { phaserGL.NamedFramebufferSampleLocationsfvARB(framebuffer, start, count, v); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferSampleLocationsfvNV(GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v) { phaserGL.NamedFramebufferSampleLocationsfvNV(framebuffer, start, count, v); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferSamplePositionsfvAMD(GLuint framebuffer, GLuint numsamples, GLuint pixelindex, const GLfloat * values) { phaserGL.NamedFramebufferSamplePositionsfvAMD(framebuffer, numsamples, pixelindex, values); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { phaserGL.NamedFramebufferTexture(framebuffer, attachment, texture, level); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTexture1DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.NamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTexture2DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level) { phaserGL.NamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTexture3DEXT(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) { phaserGL.NamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTextureEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level) { phaserGL.NamedFramebufferTextureEXT(framebuffer, attachment, texture, level); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTextureFaceEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face) { phaserGL.NamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { phaserGL.NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer); }
PHASER_FORCE_INLINE void  phaserNamedFramebufferTextureLayerEXT(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer) { phaserGL.NamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameter4dEXT(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.NamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameter4dvEXT(GLuint program, GLenum target, GLuint index, const GLdouble * params) { phaserGL.NamedProgramLocalParameter4dvEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameter4fEXT(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.NamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameter4fvEXT(GLuint program, GLenum target, GLuint index, const GLfloat * params) { phaserGL.NamedProgramLocalParameter4fvEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameterI4iEXT(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { phaserGL.NamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameterI4ivEXT(GLuint program, GLenum target, GLuint index, const GLint * params) { phaserGL.NamedProgramLocalParameterI4ivEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameterI4uiEXT(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { phaserGL.NamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameterI4uivEXT(GLuint program, GLenum target, GLuint index, const GLuint * params) { phaserGL.NamedProgramLocalParameterI4uivEXT(program, target, index, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParameters4fvEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params) { phaserGL.NamedProgramLocalParameters4fvEXT(program, target, index, count, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParametersI4ivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params) { phaserGL.NamedProgramLocalParametersI4ivEXT(program, target, index, count, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramLocalParametersI4uivEXT(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params) { phaserGL.NamedProgramLocalParametersI4uivEXT(program, target, index, count, params); }
PHASER_FORCE_INLINE void  phaserNamedProgramStringEXT(GLuint program, GLenum target, GLenum format, GLsizei len, const void * string) { phaserGL.NamedProgramStringEXT(program, target, format, len, string); }
PHASER_FORCE_INLINE void  phaserNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.NamedRenderbufferStorage(renderbuffer, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserNamedRenderbufferStorageEXT(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.NamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserNamedRenderbufferStorageMultisampleCoverageEXT(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserNamedRenderbufferStorageMultisampleEXT(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.NamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserNamedStringARB(GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string) { phaserGL.NamedStringARB(type, namelen, name, stringlen, string); }
PHASER_FORCE_INLINE GLuint phaserNewBufferRegion(GLenum region) { return phaserGL.NewBufferRegion(region); }
PHASER_FORCE_INLINE void  phaserNewList(GLuint list, GLenum mode) { phaserGL.NewList(list, mode); }
PHASER_FORCE_INLINE GLuint phaserNewObjectBufferATI(GLsizei size, const void * pointer, GLenum usage) { return phaserGL.NewObjectBufferATI(size, pointer, usage); }
PHASER_FORCE_INLINE void  phaserNormal3b(GLbyte nx, GLbyte ny, GLbyte nz) { phaserGL.Normal3b(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3bv(const GLbyte * v) { phaserGL.Normal3bv(v); }
PHASER_FORCE_INLINE void  phaserNormal3d(GLdouble nx, GLdouble ny, GLdouble nz) { phaserGL.Normal3d(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3dv(const GLdouble * v) { phaserGL.Normal3dv(v); }
PHASER_FORCE_INLINE void  phaserNormal3f(GLfloat nx, GLfloat ny, GLfloat nz) { phaserGL.Normal3f(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.Normal3fVertex3fSUN(nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserNormal3fVertex3fvSUN(const GLfloat * n, const GLfloat * v) { phaserGL.Normal3fVertex3fvSUN(n, v); }
PHASER_FORCE_INLINE void  phaserNormal3fv(const GLfloat * v) { phaserGL.Normal3fv(v); }
PHASER_FORCE_INLINE void  phaserNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) { phaserGL.Normal3hNV(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3hvNV(const GLhalfNV * v) { phaserGL.Normal3hvNV(v); }
PHASER_FORCE_INLINE void  phaserNormal3i(GLint nx, GLint ny, GLint nz) { phaserGL.Normal3i(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3iv(const GLint * v) { phaserGL.Normal3iv(v); }
PHASER_FORCE_INLINE void  phaserNormal3s(GLshort nx, GLshort ny, GLshort nz) { phaserGL.Normal3s(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3sv(const GLshort * v) { phaserGL.Normal3sv(v); }
PHASER_FORCE_INLINE void  phaserNormal3x(GLfixed nx, GLfixed ny, GLfixed nz) { phaserGL.Normal3x(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3xOES(GLfixed nx, GLfixed ny, GLfixed nz) { phaserGL.Normal3xOES(nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormal3xvOES(const GLfixed * coords) { phaserGL.Normal3xvOES(coords); }
PHASER_FORCE_INLINE void  phaserNormalFormatNV(GLenum type, GLsizei stride) { phaserGL.NormalFormatNV(type, stride); }
PHASER_FORCE_INLINE void  phaserNormalP3ui(GLenum type, GLuint coords) { phaserGL.NormalP3ui(type, coords); }
PHASER_FORCE_INLINE void  phaserNormalP3uiv(GLenum type, const GLuint * coords) { phaserGL.NormalP3uiv(type, coords); }
PHASER_FORCE_INLINE void  phaserNormalPointer(GLenum type, GLsizei stride, const void * pointer) { phaserGL.NormalPointer(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, const void * pointer) { phaserGL.NormalPointerEXT(type, stride, count, pointer); }
PHASER_FORCE_INLINE void  phaserNormalPointerListIBM(GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.NormalPointerListIBM(type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserNormalPointervINTEL(GLenum type, const void ** pointer) { phaserGL.NormalPointervINTEL(type, pointer); }
PHASER_FORCE_INLINE void  phaserNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz) { phaserGL.NormalStream3bATI(stream, nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormalStream3bvATI(GLenum stream, const GLbyte * coords) { phaserGL.NormalStream3bvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz) { phaserGL.NormalStream3dATI(stream, nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormalStream3dvATI(GLenum stream, const GLdouble * coords) { phaserGL.NormalStream3dvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz) { phaserGL.NormalStream3fATI(stream, nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormalStream3fvATI(GLenum stream, const GLfloat * coords) { phaserGL.NormalStream3fvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz) { phaserGL.NormalStream3iATI(stream, nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormalStream3ivATI(GLenum stream, const GLint * coords) { phaserGL.NormalStream3ivATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz) { phaserGL.NormalStream3sATI(stream, nx, ny, nz); }
PHASER_FORCE_INLINE void  phaserNormalStream3svATI(GLenum stream, const GLshort * coords) { phaserGL.NormalStream3svATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { phaserGL.ObjectLabel(identifier, name, length, label); }
PHASER_FORCE_INLINE void  phaserObjectLabelKHR(GLenum identifier, GLuint name, GLsizei length, const GLchar * label) { phaserGL.ObjectLabelKHR(identifier, name, length, label); }
PHASER_FORCE_INLINE void  phaserObjectPtrLabel(const void * ptr, GLsizei length, const GLchar * label) { phaserGL.ObjectPtrLabel(ptr, length, label); }
PHASER_FORCE_INLINE void  phaserObjectPtrLabelKHR(const void * ptr, GLsizei length, const GLchar * label) { phaserGL.ObjectPtrLabelKHR(ptr, length, label); }
PHASER_FORCE_INLINE GLenum phaserObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return phaserGL.ObjectPurgeableAPPLE(objectType, name, option); }
PHASER_FORCE_INLINE GLenum phaserObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option) { return phaserGL.ObjectUnpurgeableAPPLE(objectType, name, option); }
PHASER_FORCE_INLINE void  phaserOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) { phaserGL.Ortho(left, right, bottom, top, zNear, zFar); }
PHASER_FORCE_INLINE void  phaserOrthof(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { phaserGL.Orthof(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserOrthofOES(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f) { phaserGL.OrthofOES(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserOrthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { phaserGL.Orthox(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserOrthoxOES(GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f) { phaserGL.OrthoxOES(l, r, b, t, n, f); }
PHASER_FORCE_INLINE void  phaserPNTrianglesfATI(GLenum pname, GLfloat param) { phaserGL.PNTrianglesfATI(pname, param); }
PHASER_FORCE_INLINE void  phaserPNTrianglesiATI(GLenum pname, GLint param) { phaserGL.PNTrianglesiATI(pname, param); }
PHASER_FORCE_INLINE void  phaserPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle) { phaserGL.PassTexCoordATI(dst, coord, swizzle); }
PHASER_FORCE_INLINE void  phaserPassThrough(GLfloat token) { phaserGL.PassThrough(token); }
PHASER_FORCE_INLINE void  phaserPassThroughxOES(GLfixed token) { phaserGL.PassThroughxOES(token); }
PHASER_FORCE_INLINE void  phaserPatchParameterfv(GLenum pname, const GLfloat * values) { phaserGL.PatchParameterfv(pname, values); }
PHASER_FORCE_INLINE void  phaserPatchParameteri(GLenum pname, GLint value) { phaserGL.PatchParameteri(pname, value); }
PHASER_FORCE_INLINE void  phaserPatchParameteriEXT(GLenum pname, GLint value) { phaserGL.PatchParameteriEXT(pname, value); }
PHASER_FORCE_INLINE void  phaserPatchParameteriOES(GLenum pname, GLint value) { phaserGL.PatchParameteriOES(pname, value); }
PHASER_FORCE_INLINE void  phaserPathColorGenNV(GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs) { phaserGL.PathColorGenNV(color, genMode, colorFormat, coeffs); }
PHASER_FORCE_INLINE void  phaserPathCommandsNV(GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { phaserGL.PathCommandsNV(path, numCommands, commands, numCoords, coordType, coords); }
PHASER_FORCE_INLINE void  phaserPathCoordsNV(GLuint path, GLsizei numCoords, GLenum coordType, const void * coords) { phaserGL.PathCoordsNV(path, numCoords, coordType, coords); }
PHASER_FORCE_INLINE void  phaserPathCoverDepthFuncNV(GLenum func) { phaserGL.PathCoverDepthFuncNV(func); }
PHASER_FORCE_INLINE void  phaserPathDashArrayNV(GLuint path, GLsizei dashCount, const GLfloat * dashArray) { phaserGL.PathDashArrayNV(path, dashCount, dashArray); }
PHASER_FORCE_INLINE void  phaserPathFogGenNV(GLenum genMode) { phaserGL.PathFogGenNV(genMode); }
PHASER_FORCE_INLINE GLenum phaserPathGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return phaserGL.PathGlyphIndexArrayNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
PHASER_FORCE_INLINE GLenum phaserPathGlyphIndexRangeNV(GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount[2]) { return phaserGL.PathGlyphIndexRangeNV(fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount); }
PHASER_FORCE_INLINE void  phaserPathGlyphRangeNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { phaserGL.PathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale); }
PHASER_FORCE_INLINE void  phaserPathGlyphsNV(GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { phaserGL.PathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale); }
PHASER_FORCE_INLINE GLenum phaserPathMemoryGlyphIndexArrayNV(GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale) { return phaserGL.PathMemoryGlyphIndexArrayNV(firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale); }
PHASER_FORCE_INLINE void  phaserPathParameterfNV(GLuint path, GLenum pname, GLfloat value) { phaserGL.PathParameterfNV(path, pname, value); }
PHASER_FORCE_INLINE void  phaserPathParameterfvNV(GLuint path, GLenum pname, const GLfloat * value) { phaserGL.PathParameterfvNV(path, pname, value); }
PHASER_FORCE_INLINE void  phaserPathParameteriNV(GLuint path, GLenum pname, GLint value) { phaserGL.PathParameteriNV(path, pname, value); }
PHASER_FORCE_INLINE void  phaserPathParameterivNV(GLuint path, GLenum pname, const GLint * value) { phaserGL.PathParameterivNV(path, pname, value); }
PHASER_FORCE_INLINE void  phaserPathStencilDepthOffsetNV(GLfloat factor, GLfloat units) { phaserGL.PathStencilDepthOffsetNV(factor, units); }
PHASER_FORCE_INLINE void  phaserPathStencilFuncNV(GLenum func, GLint ref, GLuint mask) { phaserGL.PathStencilFuncNV(func, ref, mask); }
PHASER_FORCE_INLINE void  phaserPathStringNV(GLuint path, GLenum format, GLsizei length, const void * pathString) { phaserGL.PathStringNV(path, format, length, pathString); }
PHASER_FORCE_INLINE void  phaserPathSubCommandsNV(GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords) { phaserGL.PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords); }
PHASER_FORCE_INLINE void  phaserPathSubCoordsNV(GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords) { phaserGL.PathSubCoordsNV(path, coordStart, numCoords, coordType, coords); }
PHASER_FORCE_INLINE void  phaserPathTexGenNV(GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs) { phaserGL.PathTexGenNV(texCoordSet, genMode, components, coeffs); }
PHASER_FORCE_INLINE void  phaserPauseTransformFeedback(void) { phaserGL.PauseTransformFeedback(); }
PHASER_FORCE_INLINE void  phaserPauseTransformFeedbackNV(void) { phaserGL.PauseTransformFeedbackNV(); }
PHASER_FORCE_INLINE void  phaserPixelDataRangeNV(GLenum target, GLsizei length, const void * pointer) { phaserGL.PixelDataRangeNV(target, length, pointer); }
PHASER_FORCE_INLINE void  phaserPixelMapfv(GLenum map, GLsizei mapsize, const GLfloat * values) { phaserGL.PixelMapfv(map, mapsize, values); }
PHASER_FORCE_INLINE void  phaserPixelMapuiv(GLenum map, GLsizei mapsize, const GLuint * values) { phaserGL.PixelMapuiv(map, mapsize, values); }
PHASER_FORCE_INLINE void  phaserPixelMapusv(GLenum map, GLsizei mapsize, const GLushort * values) { phaserGL.PixelMapusv(map, mapsize, values); }
PHASER_FORCE_INLINE void  phaserPixelMapx(GLenum map, GLint size, const GLfixed * values) { phaserGL.PixelMapx(map, size, values); }
PHASER_FORCE_INLINE void  phaserPixelStoref(GLenum pname, GLfloat param) { phaserGL.PixelStoref(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelStorei(GLenum pname, GLint param) { phaserGL.PixelStorei(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelStorex(GLenum pname, GLfixed param) { phaserGL.PixelStorex(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTexGenParameterfSGIS(GLenum pname, GLfloat param) { phaserGL.PixelTexGenParameterfSGIS(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTexGenParameterfvSGIS(GLenum pname, const GLfloat * params) { phaserGL.PixelTexGenParameterfvSGIS(pname, params); }
PHASER_FORCE_INLINE void  phaserPixelTexGenParameteriSGIS(GLenum pname, GLint param) { phaserGL.PixelTexGenParameteriSGIS(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTexGenParameterivSGIS(GLenum pname, const GLint * params) { phaserGL.PixelTexGenParameterivSGIS(pname, params); }
PHASER_FORCE_INLINE void  phaserPixelTexGenSGIX(GLenum mode) { phaserGL.PixelTexGenSGIX(mode); }
PHASER_FORCE_INLINE void  phaserPixelTransferf(GLenum pname, GLfloat param) { phaserGL.PixelTransferf(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTransferi(GLenum pname, GLint param) { phaserGL.PixelTransferi(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTransferxOES(GLenum pname, GLfixed param) { phaserGL.PixelTransferxOES(pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param) { phaserGL.PixelTransformParameterfEXT(target, pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTransformParameterfvEXT(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.PixelTransformParameterfvEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param) { phaserGL.PixelTransformParameteriEXT(target, pname, param); }
PHASER_FORCE_INLINE void  phaserPixelTransformParameterivEXT(GLenum target, GLenum pname, const GLint * params) { phaserGL.PixelTransformParameterivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserPixelZoom(GLfloat xfactor, GLfloat yfactor) { phaserGL.PixelZoom(xfactor, yfactor); }
PHASER_FORCE_INLINE void  phaserPixelZoomxOES(GLfixed xfactor, GLfixed yfactor) { phaserGL.PixelZoomxOES(xfactor, yfactor); }
PHASER_FORCE_INLINE GLboolean phaserPointAlongPathNV(GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) { return phaserGL.PointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY); }
PHASER_FORCE_INLINE void  phaserPointParameterf(GLenum pname, GLfloat param) { phaserGL.PointParameterf(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameterfARB(GLenum pname, GLfloat param) { phaserGL.PointParameterfARB(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameterfEXT(GLenum pname, GLfloat param) { phaserGL.PointParameterfEXT(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameterfSGIS(GLenum pname, GLfloat param) { phaserGL.PointParameterfSGIS(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameterfv(GLenum pname, const GLfloat * params) { phaserGL.PointParameterfv(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameterfvARB(GLenum pname, const GLfloat * params) { phaserGL.PointParameterfvARB(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameterfvEXT(GLenum pname, const GLfloat * params) { phaserGL.PointParameterfvEXT(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameterfvSGIS(GLenum pname, const GLfloat * params) { phaserGL.PointParameterfvSGIS(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameteri(GLenum pname, GLint param) { phaserGL.PointParameteri(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameteriNV(GLenum pname, GLint param) { phaserGL.PointParameteriNV(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameteriv(GLenum pname, const GLint * params) { phaserGL.PointParameteriv(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameterivNV(GLenum pname, const GLint * params) { phaserGL.PointParameterivNV(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameterx(GLenum pname, GLfixed param) { phaserGL.PointParameterx(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameterxOES(GLenum pname, GLfixed param) { phaserGL.PointParameterxOES(pname, param); }
PHASER_FORCE_INLINE void  phaserPointParameterxv(GLenum pname, const GLfixed * params) { phaserGL.PointParameterxv(pname, params); }
PHASER_FORCE_INLINE void  phaserPointParameterxvOES(GLenum pname, const GLfixed * params) { phaserGL.PointParameterxvOES(pname, params); }
PHASER_FORCE_INLINE void  phaserPointSize(GLfloat size) { phaserGL.PointSize(size); }
PHASER_FORCE_INLINE void  phaserPointSizePointerOES(GLenum type, GLsizei stride, const void * pointer) { phaserGL.PointSizePointerOES(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserPointSizex(GLfixed size) { phaserGL.PointSizex(size); }
PHASER_FORCE_INLINE void  phaserPointSizexOES(GLfixed size) { phaserGL.PointSizexOES(size); }
PHASER_FORCE_INLINE GLint phaserPollAsyncSGIX(GLuint * markerp) { return phaserGL.PollAsyncSGIX(markerp); }
PHASER_FORCE_INLINE GLint phaserPollInstrumentsSGIX(GLint * marker_p) { return phaserGL.PollInstrumentsSGIX(marker_p); }
PHASER_FORCE_INLINE void  phaserPolygonMode(GLenum face, GLenum mode) { phaserGL.PolygonMode(face, mode); }
PHASER_FORCE_INLINE void  phaserPolygonModeNV(GLenum face, GLenum mode) { phaserGL.PolygonModeNV(face, mode); }
PHASER_FORCE_INLINE void  phaserPolygonOffset(GLfloat factor, GLfloat units) { phaserGL.PolygonOffset(factor, units); }
PHASER_FORCE_INLINE void  phaserPolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) { phaserGL.PolygonOffsetClamp(factor, units, clamp); }
PHASER_FORCE_INLINE void  phaserPolygonOffsetClampEXT(GLfloat factor, GLfloat units, GLfloat clamp) { phaserGL.PolygonOffsetClampEXT(factor, units, clamp); }
PHASER_FORCE_INLINE void  phaserPolygonOffsetEXT(GLfloat factor, GLfloat bias) { phaserGL.PolygonOffsetEXT(factor, bias); }
PHASER_FORCE_INLINE void  phaserPolygonOffsetx(GLfixed factor, GLfixed units) { phaserGL.PolygonOffsetx(factor, units); }
PHASER_FORCE_INLINE void  phaserPolygonOffsetxOES(GLfixed factor, GLfixed units) { phaserGL.PolygonOffsetxOES(factor, units); }
PHASER_FORCE_INLINE void  phaserPolygonStipple(const GLubyte * mask) { phaserGL.PolygonStipple(mask); }
PHASER_FORCE_INLINE void  phaserPopAttrib(void) { phaserGL.PopAttrib(); }
PHASER_FORCE_INLINE void  phaserPopClientAttrib(void) { phaserGL.PopClientAttrib(); }
PHASER_FORCE_INLINE void  phaserPopDebugGroup(void) { phaserGL.PopDebugGroup(); }
PHASER_FORCE_INLINE void  phaserPopDebugGroupKHR(void) { phaserGL.PopDebugGroupKHR(); }
PHASER_FORCE_INLINE void  phaserPopGroupMarkerEXT(void) { phaserGL.PopGroupMarkerEXT(); }
PHASER_FORCE_INLINE void  phaserPopMatrix(void) { phaserGL.PopMatrix(); }
PHASER_FORCE_INLINE void  phaserPopName(void) { phaserGL.PopName(); }
PHASER_FORCE_INLINE void  phaserPresentFrameDualFillNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3) { phaserGL.PresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3); }
PHASER_FORCE_INLINE void  phaserPresentFrameKeyedNV(GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1) { phaserGL.PresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1); }
PHASER_FORCE_INLINE void  phaserPrimitiveBoundingBox(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { phaserGL.PrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
PHASER_FORCE_INLINE void  phaserPrimitiveBoundingBoxARB(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { phaserGL.PrimitiveBoundingBoxARB(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
PHASER_FORCE_INLINE void  phaserPrimitiveBoundingBoxEXT(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { phaserGL.PrimitiveBoundingBoxEXT(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
PHASER_FORCE_INLINE void  phaserPrimitiveBoundingBoxOES(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW) { phaserGL.PrimitiveBoundingBoxOES(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW); }
PHASER_FORCE_INLINE void  phaserPrimitiveRestartIndex(GLuint index) { phaserGL.PrimitiveRestartIndex(index); }
PHASER_FORCE_INLINE void  phaserPrimitiveRestartIndexNV(GLuint index) { phaserGL.PrimitiveRestartIndexNV(index); }
PHASER_FORCE_INLINE void  phaserPrimitiveRestartNV(void) { phaserGL.PrimitiveRestartNV(); }
PHASER_FORCE_INLINE void  phaserPrioritizeTextures(GLsizei n, const GLuint * textures, const GLfloat * priorities) { phaserGL.PrioritizeTextures(n, textures, priorities); }
PHASER_FORCE_INLINE void  phaserPrioritizeTexturesEXT(GLsizei n, const GLuint * textures, const GLclampf * priorities) { phaserGL.PrioritizeTexturesEXT(n, textures, priorities); }
PHASER_FORCE_INLINE void  phaserPrioritizeTexturesxOES(GLsizei n, const GLuint * textures, const GLfixed * priorities) { phaserGL.PrioritizeTexturesxOES(n, textures, priorities); }
PHASER_FORCE_INLINE void  phaserProgramBinary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length) { phaserGL.ProgramBinary(program, binaryFormat, binary, length); }
PHASER_FORCE_INLINE void  phaserProgramBinaryOES(GLuint program, GLenum binaryFormat, const void * binary, GLint length) { phaserGL.ProgramBinaryOES(program, binaryFormat, binary, length); }
PHASER_FORCE_INLINE void  phaserProgramBufferParametersIivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params) { phaserGL.ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params); }
PHASER_FORCE_INLINE void  phaserProgramBufferParametersIuivNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params) { phaserGL.ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params); }
PHASER_FORCE_INLINE void  phaserProgramBufferParametersfvNV(GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params) { phaserGL.ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.ProgramEnvParameter4dARB(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { phaserGL.ProgramEnvParameter4dvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.ProgramEnvParameter4fARB(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { phaserGL.ProgramEnvParameter4fvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { phaserGL.ProgramEnvParameterI4iNV(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { phaserGL.ProgramEnvParameterI4ivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { phaserGL.ProgramEnvParameterI4uiNV(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { phaserGL.ProgramEnvParameterI4uivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { phaserGL.ProgramEnvParameters4fvEXT(target, index, count, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { phaserGL.ProgramEnvParametersI4ivNV(target, index, count, params); }
PHASER_FORCE_INLINE void  phaserProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { phaserGL.ProgramEnvParametersI4uivNV(target, index, count, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.ProgramLocalParameter4dARB(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble * params) { phaserGL.ProgramLocalParameter4dvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.ProgramLocalParameter4fARB(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat * params) { phaserGL.ProgramLocalParameter4fvARB(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w) { phaserGL.ProgramLocalParameterI4iNV(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameterI4ivNV(GLenum target, GLuint index, const GLint * params) { phaserGL.ProgramLocalParameterI4ivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { phaserGL.ProgramLocalParameterI4uiNV(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameterI4uivNV(GLenum target, GLuint index, const GLuint * params) { phaserGL.ProgramLocalParameterI4uivNV(target, index, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat * params) { phaserGL.ProgramLocalParameters4fvEXT(target, index, count, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, const GLint * params) { phaserGL.ProgramLocalParametersI4ivNV(target, index, count, params); }
PHASER_FORCE_INLINE void  phaserProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, const GLuint * params) { phaserGL.ProgramLocalParametersI4uivNV(target, index, count, params); }
PHASER_FORCE_INLINE void  phaserProgramNamedParameter4dNV(GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.ProgramNamedParameter4dNV(id, len, name, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramNamedParameter4dvNV(GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v) { phaserGL.ProgramNamedParameter4dvNV(id, len, name, v); }
PHASER_FORCE_INLINE void  phaserProgramNamedParameter4fNV(GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.ProgramNamedParameter4fNV(id, len, name, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramNamedParameter4fvNV(GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v) { phaserGL.ProgramNamedParameter4fvNV(id, len, name, v); }
PHASER_FORCE_INLINE void  phaserProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.ProgramParameter4dNV(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramParameter4dvNV(GLenum target, GLuint index, const GLdouble * v) { phaserGL.ProgramParameter4dvNV(target, index, v); }
PHASER_FORCE_INLINE void  phaserProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.ProgramParameter4fNV(target, index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramParameter4fvNV(GLenum target, GLuint index, const GLfloat * v) { phaserGL.ProgramParameter4fvNV(target, index, v); }
PHASER_FORCE_INLINE void  phaserProgramParameteri(GLuint program, GLenum pname, GLint value) { phaserGL.ProgramParameteri(program, pname, value); }
PHASER_FORCE_INLINE void  phaserProgramParameteriARB(GLuint program, GLenum pname, GLint value) { phaserGL.ProgramParameteriARB(program, pname, value); }
PHASER_FORCE_INLINE void  phaserProgramParameteriEXT(GLuint program, GLenum pname, GLint value) { phaserGL.ProgramParameteriEXT(program, pname, value); }
PHASER_FORCE_INLINE void  phaserProgramParameters4dvNV(GLenum target, GLuint index, GLsizei count, const GLdouble * v) { phaserGL.ProgramParameters4dvNV(target, index, count, v); }
PHASER_FORCE_INLINE void  phaserProgramParameters4fvNV(GLenum target, GLuint index, GLsizei count, const GLfloat * v) { phaserGL.ProgramParameters4fvNV(target, index, count, v); }
PHASER_FORCE_INLINE void  phaserProgramPathFragmentInputGenNV(GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs) { phaserGL.ProgramPathFragmentInputGenNV(program, location, genMode, components, coeffs); }
PHASER_FORCE_INLINE void  phaserProgramStringARB(GLenum target, GLenum format, GLsizei len, const void * string) { phaserGL.ProgramStringARB(target, format, len, string); }
PHASER_FORCE_INLINE void  phaserProgramSubroutineParametersuivNV(GLenum target, GLsizei count, const GLuint * params) { phaserGL.ProgramSubroutineParametersuivNV(target, count, params); }
PHASER_FORCE_INLINE void  phaserProgramUniform1d(GLuint program, GLint location, GLdouble v0) { phaserGL.ProgramUniform1d(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1dEXT(GLuint program, GLint location, GLdouble x) { phaserGL.ProgramUniform1dEXT(program, location, x); }
PHASER_FORCE_INLINE void  phaserProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform1dv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform1dvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1f(GLuint program, GLint location, GLfloat v0) { phaserGL.ProgramUniform1f(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1fEXT(GLuint program, GLint location, GLfloat v0) { phaserGL.ProgramUniform1fEXT(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform1fv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform1fvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1i(GLuint program, GLint location, GLint v0) { phaserGL.ProgramUniform1i(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1i64ARB(GLuint program, GLint location, GLint64 x) { phaserGL.ProgramUniform1i64ARB(program, location, x); }
PHASER_FORCE_INLINE void  phaserProgramUniform1i64NV(GLuint program, GLint location, GLint64EXT x) { phaserGL.ProgramUniform1i64NV(program, location, x); }
PHASER_FORCE_INLINE void  phaserProgramUniform1i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { phaserGL.ProgramUniform1i64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.ProgramUniform1i64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1iEXT(GLuint program, GLint location, GLint v0) { phaserGL.ProgramUniform1iEXT(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform1iv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform1ivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1ui(GLuint program, GLint location, GLuint v0) { phaserGL.ProgramUniform1ui(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1ui64ARB(GLuint program, GLint location, GLuint64 x) { phaserGL.ProgramUniform1ui64ARB(program, location, x); }
PHASER_FORCE_INLINE void  phaserProgramUniform1ui64NV(GLuint program, GLint location, GLuint64EXT x) { phaserGL.ProgramUniform1ui64NV(program, location, x); }
PHASER_FORCE_INLINE void  phaserProgramUniform1ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { phaserGL.ProgramUniform1ui64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.ProgramUniform1ui64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1uiEXT(GLuint program, GLint location, GLuint v0) { phaserGL.ProgramUniform1uiEXT(program, location, v0); }
PHASER_FORCE_INLINE void  phaserProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform1uiv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform1uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform1uivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1) { phaserGL.ProgramUniform2d(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2dEXT(GLuint program, GLint location, GLdouble x, GLdouble y) { phaserGL.ProgramUniform2dEXT(program, location, x, y); }
PHASER_FORCE_INLINE void  phaserProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform2dv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform2dvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1) { phaserGL.ProgramUniform2f(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1) { phaserGL.ProgramUniform2fEXT(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform2fv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform2fvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1) { phaserGL.ProgramUniform2i(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y) { phaserGL.ProgramUniform2i64ARB(program, location, x, y); }
PHASER_FORCE_INLINE void  phaserProgramUniform2i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y) { phaserGL.ProgramUniform2i64NV(program, location, x, y); }
PHASER_FORCE_INLINE void  phaserProgramUniform2i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { phaserGL.ProgramUniform2i64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.ProgramUniform2i64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2iEXT(GLuint program, GLint location, GLint v0, GLint v1) { phaserGL.ProgramUniform2iEXT(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform2iv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform2ivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1) { phaserGL.ProgramUniform2ui(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y) { phaserGL.ProgramUniform2ui64ARB(program, location, x, y); }
PHASER_FORCE_INLINE void  phaserProgramUniform2ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y) { phaserGL.ProgramUniform2ui64NV(program, location, x, y); }
PHASER_FORCE_INLINE void  phaserProgramUniform2ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { phaserGL.ProgramUniform2ui64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.ProgramUniform2ui64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1) { phaserGL.ProgramUniform2uiEXT(program, location, v0, v1); }
PHASER_FORCE_INLINE void  phaserProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform2uiv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform2uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform2uivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2) { phaserGL.ProgramUniform3d(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z) { phaserGL.ProgramUniform3dEXT(program, location, x, y, z); }
PHASER_FORCE_INLINE void  phaserProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform3dv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform3dvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { phaserGL.ProgramUniform3f(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { phaserGL.ProgramUniform3fEXT(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform3fv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform3fvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { phaserGL.ProgramUniform3i(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z) { phaserGL.ProgramUniform3i64ARB(program, location, x, y, z); }
PHASER_FORCE_INLINE void  phaserProgramUniform3i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { phaserGL.ProgramUniform3i64NV(program, location, x, y, z); }
PHASER_FORCE_INLINE void  phaserProgramUniform3i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { phaserGL.ProgramUniform3i64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.ProgramUniform3i64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) { phaserGL.ProgramUniform3iEXT(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform3iv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform3ivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { phaserGL.ProgramUniform3ui(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { phaserGL.ProgramUniform3ui64ARB(program, location, x, y, z); }
PHASER_FORCE_INLINE void  phaserProgramUniform3ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { phaserGL.ProgramUniform3ui64NV(program, location, x, y, z); }
PHASER_FORCE_INLINE void  phaserProgramUniform3ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { phaserGL.ProgramUniform3ui64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.ProgramUniform3ui64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2) { phaserGL.ProgramUniform3uiEXT(program, location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform3uiv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform3uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform3uivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3) { phaserGL.ProgramUniform4d(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4dEXT(GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.ProgramUniform4dEXT(program, location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform4dv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4dvEXT(GLuint program, GLint location, GLsizei count, const GLdouble * value) { phaserGL.ProgramUniform4dvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { phaserGL.ProgramUniform4f(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4fEXT(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { phaserGL.ProgramUniform4fEXT(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform4fv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4fvEXT(GLuint program, GLint location, GLsizei count, const GLfloat * value) { phaserGL.ProgramUniform4fvEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { phaserGL.ProgramUniform4i(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4i64ARB(GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { phaserGL.ProgramUniform4i64ARB(program, location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramUniform4i64NV(GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { phaserGL.ProgramUniform4i64NV(program, location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramUniform4i64vARB(GLuint program, GLint location, GLsizei count, const GLint64 * value) { phaserGL.ProgramUniform4i64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4i64vNV(GLuint program, GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.ProgramUniform4i64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4iEXT(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { phaserGL.ProgramUniform4iEXT(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform4iv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4ivEXT(GLuint program, GLint location, GLsizei count, const GLint * value) { phaserGL.ProgramUniform4ivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { phaserGL.ProgramUniform4ui(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4ui64ARB(GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { phaserGL.ProgramUniform4ui64ARB(program, location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramUniform4ui64NV(GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { phaserGL.ProgramUniform4ui64NV(program, location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserProgramUniform4ui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * value) { phaserGL.ProgramUniform4ui64vARB(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4ui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.ProgramUniform4ui64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4uiEXT(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { phaserGL.ProgramUniform4uiEXT(program, location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform4uiv(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniform4uivEXT(GLuint program, GLint location, GLsizei count, const GLuint * value) { phaserGL.ProgramUniform4uivEXT(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value) { phaserGL.ProgramUniformHandleui64ARB(program, location, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformHandleui64IMG(GLuint program, GLint location, GLuint64 value) { phaserGL.ProgramUniformHandleui64IMG(program, location, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformHandleui64NV(GLuint program, GLint location, GLuint64 value) { phaserGL.ProgramUniformHandleui64NV(program, location, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { phaserGL.ProgramUniformHandleui64vARB(program, location, count, values); }
PHASER_FORCE_INLINE void  phaserProgramUniformHandleui64vIMG(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { phaserGL.ProgramUniformHandleui64vIMG(program, location, count, values); }
PHASER_FORCE_INLINE void  phaserProgramUniformHandleui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64 * values) { phaserGL.ProgramUniformHandleui64vNV(program, location, count, values); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix2dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix2dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix2fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix2fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix2x3dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix2x3fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix2x4dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix2x4fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix2x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix3dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix3dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix3fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix3fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix3x2dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix3x2fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix3x4dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix3x4fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix3x4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix4dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix4dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix4fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix4fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix4x2dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x2dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix4x2fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x2fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix4x3dv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x3dvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix4x3fv(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformMatrix4x3fvEXT(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformui64NV(GLuint program, GLint location, GLuint64EXT value) { phaserGL.ProgramUniformui64NV(program, location, value); }
PHASER_FORCE_INLINE void  phaserProgramUniformui64vNV(GLuint program, GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.ProgramUniformui64vNV(program, location, count, value); }
PHASER_FORCE_INLINE void  phaserProgramVertexLimitNV(GLenum target, GLint limit) { phaserGL.ProgramVertexLimitNV(target, limit); }
PHASER_FORCE_INLINE void  phaserProvokingVertex(GLenum mode) { phaserGL.ProvokingVertex(mode); }
PHASER_FORCE_INLINE void  phaserProvokingVertexEXT(GLenum mode) { phaserGL.ProvokingVertexEXT(mode); }
PHASER_FORCE_INLINE void  phaserPushAttrib(GLbitfield mask) { phaserGL.PushAttrib(mask); }
PHASER_FORCE_INLINE void  phaserPushClientAttrib(GLbitfield mask) { phaserGL.PushClientAttrib(mask); }
PHASER_FORCE_INLINE void  phaserPushClientAttribDefaultEXT(GLbitfield mask) { phaserGL.PushClientAttribDefaultEXT(mask); }
PHASER_FORCE_INLINE void  phaserPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar * message) { phaserGL.PushDebugGroup(source, id, length, message); }
PHASER_FORCE_INLINE void  phaserPushDebugGroupKHR(GLenum source, GLuint id, GLsizei length, const GLchar * message) { phaserGL.PushDebugGroupKHR(source, id, length, message); }
PHASER_FORCE_INLINE void  phaserPushGroupMarkerEXT(GLsizei length, const GLchar * marker) { phaserGL.PushGroupMarkerEXT(length, marker); }
PHASER_FORCE_INLINE void  phaserPushMatrix(void) { phaserGL.PushMatrix(); }
PHASER_FORCE_INLINE void  phaserPushName(GLuint name) { phaserGL.PushName(name); }
PHASER_FORCE_INLINE void  phaserQueryCounter(GLuint id, GLenum target) { phaserGL.QueryCounter(id, target); }
PHASER_FORCE_INLINE void  phaserQueryCounterEXT(GLuint id, GLenum target) { phaserGL.QueryCounterEXT(id, target); }
PHASER_FORCE_INLINE GLbitfield phaserQueryMatrixxOES(GLfixed * mantissa, GLint * exponent) { return phaserGL.QueryMatrixxOES(mantissa, exponent); }
PHASER_FORCE_INLINE void  phaserQueryObjectParameteruiAMD(GLenum target, GLuint id, GLenum pname, GLuint param) { phaserGL.QueryObjectParameteruiAMD(target, id, pname, param); }
PHASER_FORCE_INLINE GLint phaserQueryResourceNV(GLenum queryType, GLint tagId, GLuint bufSize, GLint * buffer) { return phaserGL.QueryResourceNV(queryType, tagId, bufSize, buffer); }
PHASER_FORCE_INLINE void  phaserQueryResourceTagNV(GLint tagId, const GLchar * tagString) { phaserGL.QueryResourceTagNV(tagId, tagString); }
PHASER_FORCE_INLINE void  phaserRasterPos2d(GLdouble x, GLdouble y) { phaserGL.RasterPos2d(x, y); }
PHASER_FORCE_INLINE void  phaserRasterPos2dv(const GLdouble * v) { phaserGL.RasterPos2dv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos2f(GLfloat x, GLfloat y) { phaserGL.RasterPos2f(x, y); }
PHASER_FORCE_INLINE void  phaserRasterPos2fv(const GLfloat * v) { phaserGL.RasterPos2fv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos2i(GLint x, GLint y) { phaserGL.RasterPos2i(x, y); }
PHASER_FORCE_INLINE void  phaserRasterPos2iv(const GLint * v) { phaserGL.RasterPos2iv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos2s(GLshort x, GLshort y) { phaserGL.RasterPos2s(x, y); }
PHASER_FORCE_INLINE void  phaserRasterPos2sv(const GLshort * v) { phaserGL.RasterPos2sv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos2xOES(GLfixed x, GLfixed y) { phaserGL.RasterPos2xOES(x, y); }
PHASER_FORCE_INLINE void  phaserRasterPos2xvOES(const GLfixed * coords) { phaserGL.RasterPos2xvOES(coords); }
PHASER_FORCE_INLINE void  phaserRasterPos3d(GLdouble x, GLdouble y, GLdouble z) { phaserGL.RasterPos3d(x, y, z); }
PHASER_FORCE_INLINE void  phaserRasterPos3dv(const GLdouble * v) { phaserGL.RasterPos3dv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos3f(GLfloat x, GLfloat y, GLfloat z) { phaserGL.RasterPos3f(x, y, z); }
PHASER_FORCE_INLINE void  phaserRasterPos3fv(const GLfloat * v) { phaserGL.RasterPos3fv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos3i(GLint x, GLint y, GLint z) { phaserGL.RasterPos3i(x, y, z); }
PHASER_FORCE_INLINE void  phaserRasterPos3iv(const GLint * v) { phaserGL.RasterPos3iv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos3s(GLshort x, GLshort y, GLshort z) { phaserGL.RasterPos3s(x, y, z); }
PHASER_FORCE_INLINE void  phaserRasterPos3sv(const GLshort * v) { phaserGL.RasterPos3sv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos3xOES(GLfixed x, GLfixed y, GLfixed z) { phaserGL.RasterPos3xOES(x, y, z); }
PHASER_FORCE_INLINE void  phaserRasterPos3xvOES(const GLfixed * coords) { phaserGL.RasterPos3xvOES(coords); }
PHASER_FORCE_INLINE void  phaserRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.RasterPos4d(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserRasterPos4dv(const GLdouble * v) { phaserGL.RasterPos4dv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.RasterPos4f(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserRasterPos4fv(const GLfloat * v) { phaserGL.RasterPos4fv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos4i(GLint x, GLint y, GLint z, GLint w) { phaserGL.RasterPos4i(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserRasterPos4iv(const GLint * v) { phaserGL.RasterPos4iv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.RasterPos4s(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserRasterPos4sv(const GLshort * v) { phaserGL.RasterPos4sv(v); }
PHASER_FORCE_INLINE void  phaserRasterPos4xOES(GLfixed x, GLfixed y, GLfixed z, GLfixed w) { phaserGL.RasterPos4xOES(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserRasterPos4xvOES(const GLfixed * coords) { phaserGL.RasterPos4xvOES(coords); }
PHASER_FORCE_INLINE void  phaserRasterSamplesEXT(GLuint samples, GLboolean fixedsamplelocations) { phaserGL.RasterSamplesEXT(samples, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserReadBuffer(GLenum src) { phaserGL.ReadBuffer(src); }
PHASER_FORCE_INLINE void  phaserReadBufferIndexedEXT(GLenum src, GLint index) { phaserGL.ReadBufferIndexedEXT(src, index); }
PHASER_FORCE_INLINE void  phaserReadBufferNV(GLenum mode) { phaserGL.ReadBufferNV(mode); }
PHASER_FORCE_INLINE void  phaserReadBufferRegion(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.ReadBufferRegion(region, x, y, width, height); }
PHASER_FORCE_INLINE void  phaserReadInstrumentsSGIX(GLint marker) { phaserGL.ReadInstrumentsSGIX(marker); }
PHASER_FORCE_INLINE void  phaserReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) { phaserGL.ReadPixels(x, y, width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { phaserGL.ReadnPixels(x, y, width, height, format, type, bufSize, data); }
PHASER_FORCE_INLINE void  phaserReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { phaserGL.ReadnPixelsARB(x, y, width, height, format, type, bufSize, data); }
PHASER_FORCE_INLINE void  phaserReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { phaserGL.ReadnPixelsEXT(x, y, width, height, format, type, bufSize, data); }
PHASER_FORCE_INLINE void  phaserReadnPixelsKHR(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data) { phaserGL.ReadnPixelsKHR(x, y, width, height, format, type, bufSize, data); }
PHASER_FORCE_INLINE void  phaserRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) { phaserGL.Rectd(x1, y1, x2, y2); }
PHASER_FORCE_INLINE void  phaserRectdv(const GLdouble * v1, const GLdouble * v2) { phaserGL.Rectdv(v1, v2); }
PHASER_FORCE_INLINE void  phaserRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) { phaserGL.Rectf(x1, y1, x2, y2); }
PHASER_FORCE_INLINE void  phaserRectfv(const GLfloat * v1, const GLfloat * v2) { phaserGL.Rectfv(v1, v2); }
PHASER_FORCE_INLINE void  phaserRecti(GLint x1, GLint y1, GLint x2, GLint y2) { phaserGL.Recti(x1, y1, x2, y2); }
PHASER_FORCE_INLINE void  phaserRectiv(const GLint * v1, const GLint * v2) { phaserGL.Rectiv(v1, v2); }
PHASER_FORCE_INLINE void  phaserRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2) { phaserGL.Rects(x1, y1, x2, y2); }
PHASER_FORCE_INLINE void  phaserRectsv(const GLshort * v1, const GLshort * v2) { phaserGL.Rectsv(v1, v2); }
PHASER_FORCE_INLINE void  phaserRectxOES(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) { phaserGL.RectxOES(x1, y1, x2, y2); }
PHASER_FORCE_INLINE void  phaserRectxvOES(const GLfixed * v1, const GLfixed * v2) { phaserGL.RectxvOES(v1, v2); }
PHASER_FORCE_INLINE void  phaserReferencePlaneSGIX(const GLdouble * equation) { phaserGL.ReferencePlaneSGIX(equation); }
PHASER_FORCE_INLINE GLboolean phaserReleaseKeyedMutexWin32EXT(GLuint memory, GLuint64 key) { return phaserGL.ReleaseKeyedMutexWin32EXT(memory, key); }
PHASER_FORCE_INLINE void  phaserReleaseShaderCompiler(void) { phaserGL.ReleaseShaderCompiler(); }
PHASER_FORCE_INLINE void  phaserRenderGpuMaskNV(GLbitfield mask) { phaserGL.RenderGpuMaskNV(mask); }
PHASER_FORCE_INLINE GLint phaserRenderMode(GLenum mode) { return phaserGL.RenderMode(mode); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorage(target, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageEXT(target, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisample(target, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisampleANGLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisampleAPPLE(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisampleIMG(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageMultisampleNV(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageMultisampleNV(target, samples, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.RenderbufferStorageOES(target, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserReplacementCodePointerSUN(GLenum type, GLsizei stride, const void ** pointer) { phaserGL.ReplacementCodePointerSUN(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserReplacementCodeubSUN(GLubyte code) { phaserGL.ReplacementCodeubSUN(code); }
PHASER_FORCE_INLINE void  phaserReplacementCodeubvSUN(const GLubyte * code) { phaserGL.ReplacementCodeubvSUN(code); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiColor3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * v) { phaserGL.ReplacementCodeuiColor3fVertex3fvSUN(rc, c, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { phaserGL.ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiColor4ubVertex3fvSUN(const GLuint * rc, const GLubyte * c, const GLfloat * v) { phaserGL.ReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * n, const GLfloat * v) { phaserGL.ReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiSUN(GLuint code) { phaserGL.ReplacementCodeuiSUN(code); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { phaserGL.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) { phaserGL.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiTexCoord2fVertex3fvSUN(const GLuint * rc, const GLfloat * tc, const GLfloat * v) { phaserGL.ReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z) { phaserGL.ReplacementCodeuiVertex3fSUN(rc, x, y, z); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuiVertex3fvSUN(const GLuint * rc, const GLfloat * v) { phaserGL.ReplacementCodeuiVertex3fvSUN(rc, v); }
PHASER_FORCE_INLINE void  phaserReplacementCodeuivSUN(const GLuint * code) { phaserGL.ReplacementCodeuivSUN(code); }
PHASER_FORCE_INLINE void  phaserReplacementCodeusSUN(GLushort code) { phaserGL.ReplacementCodeusSUN(code); }
PHASER_FORCE_INLINE void  phaserReplacementCodeusvSUN(const GLushort * code) { phaserGL.ReplacementCodeusvSUN(code); }
PHASER_FORCE_INLINE void  phaserRequestResidentProgramsNV(GLsizei n, const GLuint * programs) { phaserGL.RequestResidentProgramsNV(n, programs); }
PHASER_FORCE_INLINE void  phaserResetHistogram(GLenum target) { phaserGL.ResetHistogram(target); }
PHASER_FORCE_INLINE void  phaserResetHistogramEXT(GLenum target) { phaserGL.ResetHistogramEXT(target); }
PHASER_FORCE_INLINE void  phaserResetMinmax(GLenum target) { phaserGL.ResetMinmax(target); }
PHASER_FORCE_INLINE void  phaserResetMinmaxEXT(GLenum target) { phaserGL.ResetMinmaxEXT(target); }
PHASER_FORCE_INLINE void  phaserResizeBuffersMESA(void) { phaserGL.ResizeBuffersMESA(); }
PHASER_FORCE_INLINE void  phaserResolveDepthValuesNV(void) { phaserGL.ResolveDepthValuesNV(); }
PHASER_FORCE_INLINE void  phaserResolveMultisampleFramebufferAPPLE(void) { phaserGL.ResolveMultisampleFramebufferAPPLE(); }
PHASER_FORCE_INLINE void  phaserResumeTransformFeedback(void) { phaserGL.ResumeTransformFeedback(); }
PHASER_FORCE_INLINE void  phaserResumeTransformFeedbackNV(void) { phaserGL.ResumeTransformFeedbackNV(); }
PHASER_FORCE_INLINE void  phaserRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z) { phaserGL.Rotated(angle, x, y, z); }
PHASER_FORCE_INLINE void  phaserRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z) { phaserGL.Rotatef(angle, x, y, z); }
PHASER_FORCE_INLINE void  phaserRotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { phaserGL.Rotatex(angle, x, y, z); }
PHASER_FORCE_INLINE void  phaserRotatexOES(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) { phaserGL.RotatexOES(angle, x, y, z); }
PHASER_FORCE_INLINE void  phaserSampleCoverage(GLfloat value, GLboolean invert) { phaserGL.SampleCoverage(value, invert); }
PHASER_FORCE_INLINE void  phaserSampleCoverageARB(GLfloat value, GLboolean invert) { phaserGL.SampleCoverageARB(value, invert); }
PHASER_FORCE_INLINE void  phaserSampleCoveragex(GLclampx value, GLboolean invert) { phaserGL.SampleCoveragex(value, invert); }
PHASER_FORCE_INLINE void  phaserSampleCoveragexOES(GLclampx value, GLboolean invert) { phaserGL.SampleCoveragexOES(value, invert); }
PHASER_FORCE_INLINE void  phaserSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle) { phaserGL.SampleMapATI(dst, interp, swizzle); }
PHASER_FORCE_INLINE void  phaserSampleMaskEXT(GLclampf value, GLboolean invert) { phaserGL.SampleMaskEXT(value, invert); }
PHASER_FORCE_INLINE void  phaserSampleMaskIndexedNV(GLuint index, GLbitfield mask) { phaserGL.SampleMaskIndexedNV(index, mask); }
PHASER_FORCE_INLINE void  phaserSampleMaskSGIS(GLclampf value, GLboolean invert) { phaserGL.SampleMaskSGIS(value, invert); }
PHASER_FORCE_INLINE void  phaserSampleMaski(GLuint maskNumber, GLbitfield mask) { phaserGL.SampleMaski(maskNumber, mask); }
PHASER_FORCE_INLINE void  phaserSamplePatternEXT(GLenum pattern) { phaserGL.SamplePatternEXT(pattern); }
PHASER_FORCE_INLINE void  phaserSamplePatternSGIS(GLenum pattern) { phaserGL.SamplePatternSGIS(pattern); }
PHASER_FORCE_INLINE void  phaserSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint * param) { phaserGL.SamplerParameterIiv(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterIivEXT(GLuint sampler, GLenum pname, const GLint * param) { phaserGL.SamplerParameterIivEXT(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterIivOES(GLuint sampler, GLenum pname, const GLint * param) { phaserGL.SamplerParameterIivOES(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint * param) { phaserGL.SamplerParameterIuiv(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterIuivEXT(GLuint sampler, GLenum pname, const GLuint * param) { phaserGL.SamplerParameterIuivEXT(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterIuivOES(GLuint sampler, GLenum pname, const GLuint * param) { phaserGL.SamplerParameterIuivOES(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param) { phaserGL.SamplerParameterf(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat * param) { phaserGL.SamplerParameterfv(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameteri(GLuint sampler, GLenum pname, GLint param) { phaserGL.SamplerParameteri(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserSamplerParameteriv(GLuint sampler, GLenum pname, const GLint * param) { phaserGL.SamplerParameteriv(sampler, pname, param); }
PHASER_FORCE_INLINE void  phaserScaled(GLdouble x, GLdouble y, GLdouble z) { phaserGL.Scaled(x, y, z); }
PHASER_FORCE_INLINE void  phaserScalef(GLfloat x, GLfloat y, GLfloat z) { phaserGL.Scalef(x, y, z); }
PHASER_FORCE_INLINE void  phaserScalex(GLfixed x, GLfixed y, GLfixed z) { phaserGL.Scalex(x, y, z); }
PHASER_FORCE_INLINE void  phaserScalexOES(GLfixed x, GLfixed y, GLfixed z) { phaserGL.ScalexOES(x, y, z); }
PHASER_FORCE_INLINE void  phaserScissor(GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.Scissor(x, y, width, height); }
PHASER_FORCE_INLINE void  phaserScissorArrayv(GLuint first, GLsizei count, const GLint * v) { phaserGL.ScissorArrayv(first, count, v); }
PHASER_FORCE_INLINE void  phaserScissorArrayvNV(GLuint first, GLsizei count, const GLint * v) { phaserGL.ScissorArrayvNV(first, count, v); }
PHASER_FORCE_INLINE void  phaserScissorArrayvOES(GLuint first, GLsizei count, const GLint * v) { phaserGL.ScissorArrayvOES(first, count, v); }
PHASER_FORCE_INLINE void  phaserScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { phaserGL.ScissorIndexed(index, left, bottom, width, height); }
PHASER_FORCE_INLINE void  phaserScissorIndexedNV(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { phaserGL.ScissorIndexedNV(index, left, bottom, width, height); }
PHASER_FORCE_INLINE void  phaserScissorIndexedOES(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height) { phaserGL.ScissorIndexedOES(index, left, bottom, width, height); }
PHASER_FORCE_INLINE void  phaserScissorIndexedv(GLuint index, const GLint * v) { phaserGL.ScissorIndexedv(index, v); }
PHASER_FORCE_INLINE void  phaserScissorIndexedvNV(GLuint index, const GLint * v) { phaserGL.ScissorIndexedvNV(index, v); }
PHASER_FORCE_INLINE void  phaserScissorIndexedvOES(GLuint index, const GLint * v) { phaserGL.ScissorIndexedvOES(index, v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue) { phaserGL.SecondaryColor3b(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue) { phaserGL.SecondaryColor3bEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3bv(const GLbyte * v) { phaserGL.SecondaryColor3bv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3bvEXT(const GLbyte * v) { phaserGL.SecondaryColor3bvEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue) { phaserGL.SecondaryColor3d(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue) { phaserGL.SecondaryColor3dEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3dv(const GLdouble * v) { phaserGL.SecondaryColor3dv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3dvEXT(const GLdouble * v) { phaserGL.SecondaryColor3dvEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue) { phaserGL.SecondaryColor3f(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue) { phaserGL.SecondaryColor3fEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3fv(const GLfloat * v) { phaserGL.SecondaryColor3fv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3fvEXT(const GLfloat * v) { phaserGL.SecondaryColor3fvEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue) { phaserGL.SecondaryColor3hNV(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3hvNV(const GLhalfNV * v) { phaserGL.SecondaryColor3hvNV(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3i(GLint red, GLint green, GLint blue) { phaserGL.SecondaryColor3i(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3iEXT(GLint red, GLint green, GLint blue) { phaserGL.SecondaryColor3iEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3iv(const GLint * v) { phaserGL.SecondaryColor3iv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3ivEXT(const GLint * v) { phaserGL.SecondaryColor3ivEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3s(GLshort red, GLshort green, GLshort blue) { phaserGL.SecondaryColor3s(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue) { phaserGL.SecondaryColor3sEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3sv(const GLshort * v) { phaserGL.SecondaryColor3sv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3svEXT(const GLshort * v) { phaserGL.SecondaryColor3svEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue) { phaserGL.SecondaryColor3ub(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue) { phaserGL.SecondaryColor3ubEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3ubv(const GLubyte * v) { phaserGL.SecondaryColor3ubv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3ubvEXT(const GLubyte * v) { phaserGL.SecondaryColor3ubvEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3ui(GLuint red, GLuint green, GLuint blue) { phaserGL.SecondaryColor3ui(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue) { phaserGL.SecondaryColor3uiEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3uiv(const GLuint * v) { phaserGL.SecondaryColor3uiv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3uivEXT(const GLuint * v) { phaserGL.SecondaryColor3uivEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3us(GLushort red, GLushort green, GLushort blue) { phaserGL.SecondaryColor3us(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue) { phaserGL.SecondaryColor3usEXT(red, green, blue); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3usv(const GLushort * v) { phaserGL.SecondaryColor3usv(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColor3usvEXT(const GLushort * v) { phaserGL.SecondaryColor3usvEXT(v); }
PHASER_FORCE_INLINE void  phaserSecondaryColorFormatNV(GLint size, GLenum type, GLsizei stride) { phaserGL.SecondaryColorFormatNV(size, type, stride); }
PHASER_FORCE_INLINE void  phaserSecondaryColorP3ui(GLenum type, GLuint color) { phaserGL.SecondaryColorP3ui(type, color); }
PHASER_FORCE_INLINE void  phaserSecondaryColorP3uiv(GLenum type, const GLuint * color) { phaserGL.SecondaryColorP3uiv(type, color); }
PHASER_FORCE_INLINE void  phaserSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.SecondaryColorPointer(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.SecondaryColorPointerEXT(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.SecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserSelectBuffer(GLsizei size, GLuint * buffer) { phaserGL.SelectBuffer(size, buffer); }
PHASER_FORCE_INLINE void  phaserSelectPerfMonitorCountersAMD(GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList) { phaserGL.SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList); }
PHASER_FORCE_INLINE void  phaserSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 * params) { phaserGL.SemaphoreParameterui64vEXT(semaphore, pname, params); }
PHASER_FORCE_INLINE void  phaserSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { phaserGL.SeparableFilter2D(target, internalformat, width, height, format, type, row, column); }
PHASER_FORCE_INLINE void  phaserSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column) { phaserGL.SeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column); }
PHASER_FORCE_INLINE void  phaserSetFenceAPPLE(GLuint fence) { phaserGL.SetFenceAPPLE(fence); }
PHASER_FORCE_INLINE void  phaserSetFenceNV(GLuint fence, GLenum condition) { phaserGL.SetFenceNV(fence, condition); }
PHASER_FORCE_INLINE void  phaserSetFragmentShaderConstantATI(GLuint dst, const GLfloat * value) { phaserGL.SetFragmentShaderConstantATI(dst, value); }
PHASER_FORCE_INLINE void  phaserSetInvariantEXT(GLuint id, GLenum type, const void * addr) { phaserGL.SetInvariantEXT(id, type, addr); }
PHASER_FORCE_INLINE void  phaserSetLocalConstantEXT(GLuint id, GLenum type, const void * addr) { phaserGL.SetLocalConstantEXT(id, type, addr); }
PHASER_FORCE_INLINE void  phaserSetMultisamplefvAMD(GLenum pname, GLuint index, const GLfloat * val) { phaserGL.SetMultisamplefvAMD(pname, index, val); }
PHASER_FORCE_INLINE void  phaserShadeModel(GLenum mode) { phaserGL.ShadeModel(mode); }
PHASER_FORCE_INLINE void  phaserShaderBinary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length) { phaserGL.ShaderBinary(count, shaders, binaryformat, binary, length); }
PHASER_FORCE_INLINE void  phaserShaderOp1EXT(GLenum op, GLuint res, GLuint arg1) { phaserGL.ShaderOp1EXT(op, res, arg1); }
PHASER_FORCE_INLINE void  phaserShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2) { phaserGL.ShaderOp2EXT(op, res, arg1, arg2); }
PHASER_FORCE_INLINE void  phaserShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3) { phaserGL.ShaderOp3EXT(op, res, arg1, arg2, arg3); }
PHASER_FORCE_INLINE void  phaserShaderSource(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length) { phaserGL.ShaderSource(shader, count, string, length); }
PHASER_FORCE_INLINE void  phaserShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length) { phaserGL.ShaderSourceARB(shaderObj, count, string, length); }
PHASER_FORCE_INLINE void  phaserShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding) { phaserGL.ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding); }
PHASER_FORCE_INLINE void  phaserSharpenTexFuncSGIS(GLenum target, GLsizei n, const GLfloat * points) { phaserGL.SharpenTexFuncSGIS(target, n, points); }
PHASER_FORCE_INLINE void  phaserSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * dstLayouts) { phaserGL.SignalSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts); }
PHASER_FORCE_INLINE void  phaserSignalVkFenceNV(GLuint64 vkFence) { phaserGL.SignalVkFenceNV(vkFence); }
PHASER_FORCE_INLINE void  phaserSignalVkSemaphoreNV(GLuint64 vkSemaphore) { phaserGL.SignalVkSemaphoreNV(vkSemaphore); }
PHASER_FORCE_INLINE void  phaserSpecializeShader(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { phaserGL.SpecializeShader(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
PHASER_FORCE_INLINE void  phaserSpecializeShaderARB(GLuint shader, const GLchar * pEntryPoint, GLuint numSpecializationConstants, const GLuint * pConstantIndex, const GLuint * pConstantValue) { phaserGL.SpecializeShaderARB(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue); }
PHASER_FORCE_INLINE void  phaserSpriteParameterfSGIX(GLenum pname, GLfloat param) { phaserGL.SpriteParameterfSGIX(pname, param); }
PHASER_FORCE_INLINE void  phaserSpriteParameterfvSGIX(GLenum pname, const GLfloat * params) { phaserGL.SpriteParameterfvSGIX(pname, params); }
PHASER_FORCE_INLINE void  phaserSpriteParameteriSGIX(GLenum pname, GLint param) { phaserGL.SpriteParameteriSGIX(pname, param); }
PHASER_FORCE_INLINE void  phaserSpriteParameterivSGIX(GLenum pname, const GLint * params) { phaserGL.SpriteParameterivSGIX(pname, params); }
PHASER_FORCE_INLINE void  phaserStartInstrumentsSGIX(void) { phaserGL.StartInstrumentsSGIX(); }
PHASER_FORCE_INLINE void  phaserStartTilingQCOM(GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask) { phaserGL.StartTilingQCOM(x, y, width, height, preserveMask); }
PHASER_FORCE_INLINE void  phaserStateCaptureNV(GLuint state, GLenum mode) { phaserGL.StateCaptureNV(state, mode); }
PHASER_FORCE_INLINE void  phaserStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag) { phaserGL.StencilClearTagEXT(stencilTagBits, stencilClearTag); }
PHASER_FORCE_INLINE void  phaserStencilFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues) { phaserGL.StencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserStencilFillPathNV(GLuint path, GLenum fillMode, GLuint mask) { phaserGL.StencilFillPathNV(path, fillMode, mask); }
PHASER_FORCE_INLINE void  phaserStencilFunc(GLenum func, GLint ref, GLuint mask) { phaserGL.StencilFunc(func, ref, mask); }
PHASER_FORCE_INLINE void  phaserStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask) { phaserGL.StencilFuncSeparate(face, func, ref, mask); }
PHASER_FORCE_INLINE void  phaserStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask) { phaserGL.StencilFuncSeparateATI(frontfunc, backfunc, ref, mask); }
PHASER_FORCE_INLINE void  phaserStencilMask(GLuint mask) { phaserGL.StencilMask(mask); }
PHASER_FORCE_INLINE void  phaserStencilMaskSeparate(GLenum face, GLuint mask) { phaserGL.StencilMaskSeparate(face, mask); }
PHASER_FORCE_INLINE void  phaserStencilOp(GLenum fail, GLenum zfail, GLenum zpass) { phaserGL.StencilOp(fail, zfail, zpass); }
PHASER_FORCE_INLINE void  phaserStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { phaserGL.StencilOpSeparate(face, sfail, dpfail, dppass); }
PHASER_FORCE_INLINE void  phaserStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass) { phaserGL.StencilOpSeparateATI(face, sfail, dpfail, dppass); }
PHASER_FORCE_INLINE void  phaserStencilOpValueAMD(GLenum face, GLuint value) { phaserGL.StencilOpValueAMD(face, value); }
PHASER_FORCE_INLINE void  phaserStencilStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues) { phaserGL.StencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserStencilStrokePathNV(GLuint path, GLint reference, GLuint mask) { phaserGL.StencilStrokePathNV(path, reference, mask); }
PHASER_FORCE_INLINE void  phaserStencilThenCoverFillPathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { phaserGL.StencilThenCoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserStencilThenCoverFillPathNV(GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode) { phaserGL.StencilThenCoverFillPathNV(path, fillMode, mask, coverMode); }
PHASER_FORCE_INLINE void  phaserStencilThenCoverStrokePathInstancedNV(GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues) { phaserGL.StencilThenCoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserStencilThenCoverStrokePathNV(GLuint path, GLint reference, GLuint mask, GLenum coverMode) { phaserGL.StencilThenCoverStrokePathNV(path, reference, mask, coverMode); }
PHASER_FORCE_INLINE void  phaserStopInstrumentsSGIX(GLint marker) { phaserGL.StopInstrumentsSGIX(marker); }
PHASER_FORCE_INLINE void  phaserStringMarkerGREMEDY(GLsizei len, const void * string) { phaserGL.StringMarkerGREMEDY(len, string); }
PHASER_FORCE_INLINE void  phaserSubpixelPrecisionBiasNV(GLuint xbits, GLuint ybits) { phaserGL.SubpixelPrecisionBiasNV(xbits, ybits); }
PHASER_FORCE_INLINE void  phaserSwizzleEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { phaserGL.SwizzleEXT(res, in, outX, outY, outZ, outW); }
PHASER_FORCE_INLINE void  phaserSyncTextureINTEL(GLuint texture) { phaserGL.SyncTextureINTEL(texture); }
PHASER_FORCE_INLINE void  phaserTagSampleBufferSGIX(void) { phaserGL.TagSampleBufferSGIX(); }
PHASER_FORCE_INLINE void  phaserTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz) { phaserGL.Tangent3bEXT(tx, ty, tz); }
PHASER_FORCE_INLINE void  phaserTangent3bvEXT(const GLbyte * v) { phaserGL.Tangent3bvEXT(v); }
PHASER_FORCE_INLINE void  phaserTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz) { phaserGL.Tangent3dEXT(tx, ty, tz); }
PHASER_FORCE_INLINE void  phaserTangent3dvEXT(const GLdouble * v) { phaserGL.Tangent3dvEXT(v); }
PHASER_FORCE_INLINE void  phaserTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz) { phaserGL.Tangent3fEXT(tx, ty, tz); }
PHASER_FORCE_INLINE void  phaserTangent3fvEXT(const GLfloat * v) { phaserGL.Tangent3fvEXT(v); }
PHASER_FORCE_INLINE void  phaserTangent3iEXT(GLint tx, GLint ty, GLint tz) { phaserGL.Tangent3iEXT(tx, ty, tz); }
PHASER_FORCE_INLINE void  phaserTangent3ivEXT(const GLint * v) { phaserGL.Tangent3ivEXT(v); }
PHASER_FORCE_INLINE void  phaserTangent3sEXT(GLshort tx, GLshort ty, GLshort tz) { phaserGL.Tangent3sEXT(tx, ty, tz); }
PHASER_FORCE_INLINE void  phaserTangent3svEXT(const GLshort * v) { phaserGL.Tangent3svEXT(v); }
PHASER_FORCE_INLINE void  phaserTangentPointerEXT(GLenum type, GLsizei stride, const void * pointer) { phaserGL.TangentPointerEXT(type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserTbufferMask3DFX(GLuint mask) { phaserGL.TbufferMask3DFX(mask); }
PHASER_FORCE_INLINE void  phaserTessellationFactorAMD(GLfloat factor) { phaserGL.TessellationFactorAMD(factor); }
PHASER_FORCE_INLINE void  phaserTessellationModeAMD(GLenum mode) { phaserGL.TessellationModeAMD(mode); }
PHASER_FORCE_INLINE GLboolean phaserTestFenceAPPLE(GLuint fence) { return phaserGL.TestFenceAPPLE(fence); }
PHASER_FORCE_INLINE GLboolean phaserTestFenceNV(GLuint fence) { return phaserGL.TestFenceNV(fence); }
PHASER_FORCE_INLINE GLboolean phaserTestObjectAPPLE(GLenum object, GLuint name) { return phaserGL.TestObjectAPPLE(object, name); }
PHASER_FORCE_INLINE void  phaserTexBuffer(GLenum target, GLenum internalformat, GLuint buffer) { phaserGL.TexBuffer(target, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserTexBufferARB(GLenum target, GLenum internalformat, GLuint buffer) { phaserGL.TexBufferARB(target, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer) { phaserGL.TexBufferEXT(target, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserTexBufferOES(GLenum target, GLenum internalformat, GLuint buffer) { phaserGL.TexBufferOES(target, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.TexBufferRange(target, internalformat, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserTexBufferRangeEXT(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.TexBufferRangeEXT(target, internalformat, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserTexBufferRangeOES(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.TexBufferRangeOES(target, internalformat, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserTexBumpParameterfvATI(GLenum pname, const GLfloat * param) { phaserGL.TexBumpParameterfvATI(pname, param); }
PHASER_FORCE_INLINE void  phaserTexBumpParameterivATI(GLenum pname, const GLint * param) { phaserGL.TexBumpParameterivATI(pname, param); }
PHASER_FORCE_INLINE void  phaserTexCoord1bOES(GLbyte s) { phaserGL.TexCoord1bOES(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1bvOES(const GLbyte * coords) { phaserGL.TexCoord1bvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord1d(GLdouble s) { phaserGL.TexCoord1d(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1dv(const GLdouble * v) { phaserGL.TexCoord1dv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord1f(GLfloat s) { phaserGL.TexCoord1f(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1fv(const GLfloat * v) { phaserGL.TexCoord1fv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord1hNV(GLhalfNV s) { phaserGL.TexCoord1hNV(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1hvNV(const GLhalfNV * v) { phaserGL.TexCoord1hvNV(v); }
PHASER_FORCE_INLINE void  phaserTexCoord1i(GLint s) { phaserGL.TexCoord1i(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1iv(const GLint * v) { phaserGL.TexCoord1iv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord1s(GLshort s) { phaserGL.TexCoord1s(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1sv(const GLshort * v) { phaserGL.TexCoord1sv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord1xOES(GLfixed s) { phaserGL.TexCoord1xOES(s); }
PHASER_FORCE_INLINE void  phaserTexCoord1xvOES(const GLfixed * coords) { phaserGL.TexCoord1xvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord2bOES(GLbyte s, GLbyte t) { phaserGL.TexCoord2bOES(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2bvOES(const GLbyte * coords) { phaserGL.TexCoord2bvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord2d(GLdouble s, GLdouble t) { phaserGL.TexCoord2d(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2dv(const GLdouble * v) { phaserGL.TexCoord2dv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord2f(GLfloat s, GLfloat t) { phaserGL.TexCoord2f(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z) { phaserGL.TexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z); }
PHASER_FORCE_INLINE void  phaserTexCoord2fColor3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * v) { phaserGL.TexCoord2fColor3fVertex3fvSUN(tc, c, v); }
PHASER_FORCE_INLINE void  phaserTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.TexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserTexCoord2fColor4fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { phaserGL.TexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v); }
PHASER_FORCE_INLINE void  phaserTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z) { phaserGL.TexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z); }
PHASER_FORCE_INLINE void  phaserTexCoord2fColor4ubVertex3fvSUN(const GLfloat * tc, const GLubyte * c, const GLfloat * v) { phaserGL.TexCoord2fColor4ubVertex3fvSUN(tc, c, v); }
PHASER_FORCE_INLINE void  phaserTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z) { phaserGL.TexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z); }
PHASER_FORCE_INLINE void  phaserTexCoord2fNormal3fVertex3fvSUN(const GLfloat * tc, const GLfloat * n, const GLfloat * v) { phaserGL.TexCoord2fNormal3fVertex3fvSUN(tc, n, v); }
PHASER_FORCE_INLINE void  phaserTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z) { phaserGL.TexCoord2fVertex3fSUN(s, t, x, y, z); }
PHASER_FORCE_INLINE void  phaserTexCoord2fVertex3fvSUN(const GLfloat * tc, const GLfloat * v) { phaserGL.TexCoord2fVertex3fvSUN(tc, v); }
PHASER_FORCE_INLINE void  phaserTexCoord2fv(const GLfloat * v) { phaserGL.TexCoord2fv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord2hNV(GLhalfNV s, GLhalfNV t) { phaserGL.TexCoord2hNV(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2hvNV(const GLhalfNV * v) { phaserGL.TexCoord2hvNV(v); }
PHASER_FORCE_INLINE void  phaserTexCoord2i(GLint s, GLint t) { phaserGL.TexCoord2i(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2iv(const GLint * v) { phaserGL.TexCoord2iv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord2s(GLshort s, GLshort t) { phaserGL.TexCoord2s(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2sv(const GLshort * v) { phaserGL.TexCoord2sv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord2xOES(GLfixed s, GLfixed t) { phaserGL.TexCoord2xOES(s, t); }
PHASER_FORCE_INLINE void  phaserTexCoord2xvOES(const GLfixed * coords) { phaserGL.TexCoord2xvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord3bOES(GLbyte s, GLbyte t, GLbyte r) { phaserGL.TexCoord3bOES(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3bvOES(const GLbyte * coords) { phaserGL.TexCoord3bvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord3d(GLdouble s, GLdouble t, GLdouble r) { phaserGL.TexCoord3d(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3dv(const GLdouble * v) { phaserGL.TexCoord3dv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord3f(GLfloat s, GLfloat t, GLfloat r) { phaserGL.TexCoord3f(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3fv(const GLfloat * v) { phaserGL.TexCoord3fv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r) { phaserGL.TexCoord3hNV(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3hvNV(const GLhalfNV * v) { phaserGL.TexCoord3hvNV(v); }
PHASER_FORCE_INLINE void  phaserTexCoord3i(GLint s, GLint t, GLint r) { phaserGL.TexCoord3i(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3iv(const GLint * v) { phaserGL.TexCoord3iv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord3s(GLshort s, GLshort t, GLshort r) { phaserGL.TexCoord3s(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3sv(const GLshort * v) { phaserGL.TexCoord3sv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord3xOES(GLfixed s, GLfixed t, GLfixed r) { phaserGL.TexCoord3xOES(s, t, r); }
PHASER_FORCE_INLINE void  phaserTexCoord3xvOES(const GLfixed * coords) { phaserGL.TexCoord3xvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord4bOES(GLbyte s, GLbyte t, GLbyte r, GLbyte q) { phaserGL.TexCoord4bOES(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4bvOES(const GLbyte * coords) { phaserGL.TexCoord4bvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q) { phaserGL.TexCoord4d(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4dv(const GLdouble * v) { phaserGL.TexCoord4dv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q) { phaserGL.TexCoord4f(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.TexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserTexCoord4fColor4fNormal3fVertex4fvSUN(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) { phaserGL.TexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v); }
PHASER_FORCE_INLINE void  phaserTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.TexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserTexCoord4fVertex4fvSUN(const GLfloat * tc, const GLfloat * v) { phaserGL.TexCoord4fVertex4fvSUN(tc, v); }
PHASER_FORCE_INLINE void  phaserTexCoord4fv(const GLfloat * v) { phaserGL.TexCoord4fv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) { phaserGL.TexCoord4hNV(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4hvNV(const GLhalfNV * v) { phaserGL.TexCoord4hvNV(v); }
PHASER_FORCE_INLINE void  phaserTexCoord4i(GLint s, GLint t, GLint r, GLint q) { phaserGL.TexCoord4i(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4iv(const GLint * v) { phaserGL.TexCoord4iv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q) { phaserGL.TexCoord4s(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4sv(const GLshort * v) { phaserGL.TexCoord4sv(v); }
PHASER_FORCE_INLINE void  phaserTexCoord4xOES(GLfixed s, GLfixed t, GLfixed r, GLfixed q) { phaserGL.TexCoord4xOES(s, t, r, q); }
PHASER_FORCE_INLINE void  phaserTexCoord4xvOES(const GLfixed * coords) { phaserGL.TexCoord4xvOES(coords); }
PHASER_FORCE_INLINE void  phaserTexCoordFormatNV(GLint size, GLenum type, GLsizei stride) { phaserGL.TexCoordFormatNV(size, type, stride); }
PHASER_FORCE_INLINE void  phaserTexCoordP1ui(GLenum type, GLuint coords) { phaserGL.TexCoordP1ui(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP1uiv(GLenum type, const GLuint * coords) { phaserGL.TexCoordP1uiv(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP2ui(GLenum type, GLuint coords) { phaserGL.TexCoordP2ui(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP2uiv(GLenum type, const GLuint * coords) { phaserGL.TexCoordP2uiv(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP3ui(GLenum type, GLuint coords) { phaserGL.TexCoordP3ui(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP3uiv(GLenum type, const GLuint * coords) { phaserGL.TexCoordP3uiv(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP4ui(GLenum type, GLuint coords) { phaserGL.TexCoordP4ui(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordP4uiv(GLenum type, const GLuint * coords) { phaserGL.TexCoordP4uiv(type, coords); }
PHASER_FORCE_INLINE void  phaserTexCoordPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.TexCoordPointer(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { phaserGL.TexCoordPointerEXT(size, type, stride, count, pointer); }
PHASER_FORCE_INLINE void  phaserTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.TexCoordPointerListIBM(size, type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserTexCoordPointervINTEL(GLint size, GLenum type, const void ** pointer) { phaserGL.TexCoordPointervINTEL(size, type, pointer); }
PHASER_FORCE_INLINE void  phaserTexEnvf(GLenum target, GLenum pname, GLfloat param) { phaserGL.TexEnvf(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexEnvfv(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.TexEnvfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexEnvi(GLenum target, GLenum pname, GLint param) { phaserGL.TexEnvi(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexEnviv(GLenum target, GLenum pname, const GLint * params) { phaserGL.TexEnviv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexEnvx(GLenum target, GLenum pname, GLfixed param) { phaserGL.TexEnvx(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexEnvxOES(GLenum target, GLenum pname, GLfixed param) { phaserGL.TexEnvxOES(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexEnvxv(GLenum target, GLenum pname, const GLfixed * params) { phaserGL.TexEnvxv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexEnvxvOES(GLenum target, GLenum pname, const GLfixed * params) { phaserGL.TexEnvxvOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, const GLfloat * weights) { phaserGL.TexFilterFuncSGIS(target, filter, n, weights); }
PHASER_FORCE_INLINE void  phaserTexGend(GLenum coord, GLenum pname, GLdouble param) { phaserGL.TexGend(coord, pname, param); }
PHASER_FORCE_INLINE void  phaserTexGendv(GLenum coord, GLenum pname, const GLdouble * params) { phaserGL.TexGendv(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserTexGenf(GLenum coord, GLenum pname, GLfloat param) { phaserGL.TexGenf(coord, pname, param); }
PHASER_FORCE_INLINE void  phaserTexGenfOES(GLenum coord, GLenum pname, GLfloat param) { phaserGL.TexGenfOES(coord, pname, param); }
PHASER_FORCE_INLINE void  phaserTexGenfv(GLenum coord, GLenum pname, const GLfloat * params) { phaserGL.TexGenfv(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserTexGenfvOES(GLenum coord, GLenum pname, const GLfloat * params) { phaserGL.TexGenfvOES(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserTexGeni(GLenum coord, GLenum pname, GLint param) { phaserGL.TexGeni(coord, pname, param); }
PHASER_FORCE_INLINE void  phaserTexGeniOES(GLenum coord, GLenum pname, GLint param) { phaserGL.TexGeniOES(coord, pname, param); }
PHASER_FORCE_INLINE void  phaserTexGeniv(GLenum coord, GLenum pname, const GLint * params) { phaserGL.TexGeniv(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserTexGenivOES(GLenum coord, GLenum pname, const GLint * params) { phaserGL.TexGenivOES(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserTexGenxOES(GLenum coord, GLenum pname, GLfixed param) { phaserGL.TexGenxOES(coord, pname, param); }
PHASER_FORCE_INLINE void  phaserTexGenxvOES(GLenum coord, GLenum pname, const GLfixed * params) { phaserGL.TexGenxvOES(coord, pname, params); }
PHASER_FORCE_INLINE void  phaserTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TexImage1D(target, level, internalformat, width, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TexImage2D(target, level, internalformat, width, height, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { phaserGL.TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTexImage2DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { phaserGL.TexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
PHASER_FORCE_INLINE void  phaserTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { phaserGL.TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTexImage3DMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { phaserGL.TexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
PHASER_FORCE_INLINE void  phaserTexImage3DOES(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { phaserGL.TexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
PHASER_FORCE_INLINE void  phaserTexPageCommitmentEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { phaserGL.TexPageCommitmentEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
PHASER_FORCE_INLINE void  phaserTexParameterIiv(GLenum target, GLenum pname, const GLint * params) { phaserGL.TexParameterIiv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterIivEXT(GLenum target, GLenum pname, const GLint * params) { phaserGL.TexParameterIivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterIivOES(GLenum target, GLenum pname, const GLint * params) { phaserGL.TexParameterIivOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterIuiv(GLenum target, GLenum pname, const GLuint * params) { phaserGL.TexParameterIuiv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterIuivEXT(GLenum target, GLenum pname, const GLuint * params) { phaserGL.TexParameterIuivEXT(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterIuivOES(GLenum target, GLenum pname, const GLuint * params) { phaserGL.TexParameterIuivOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterf(GLenum target, GLenum pname, GLfloat param) { phaserGL.TexParameterf(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexParameterfv(GLenum target, GLenum pname, const GLfloat * params) { phaserGL.TexParameterfv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameteri(GLenum target, GLenum pname, GLint param) { phaserGL.TexParameteri(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexParameteriv(GLenum target, GLenum pname, const GLint * params) { phaserGL.TexParameteriv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterx(GLenum target, GLenum pname, GLfixed param) { phaserGL.TexParameterx(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexParameterxOES(GLenum target, GLenum pname, GLfixed param) { phaserGL.TexParameterxOES(target, pname, param); }
PHASER_FORCE_INLINE void  phaserTexParameterxv(GLenum target, GLenum pname, const GLfixed * params) { phaserGL.TexParameterxv(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexParameterxvOES(GLenum target, GLenum pname, const GLfixed * params) { phaserGL.TexParameterxvOES(target, pname, params); }
PHASER_FORCE_INLINE void  phaserTexRenderbufferNV(GLenum target, GLuint renderbuffer) { phaserGL.TexRenderbufferNV(target, renderbuffer); }
PHASER_FORCE_INLINE void  phaserTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { phaserGL.TexStorage1D(target, levels, internalformat, width); }
PHASER_FORCE_INLINE void  phaserTexStorage1DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { phaserGL.TexStorage1DEXT(target, levels, internalformat, width); }
PHASER_FORCE_INLINE void  phaserTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.TexStorage2D(target, levels, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserTexStorage2DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.TexStorage2DEXT(target, levels, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { phaserGL.TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.TexStorage3D(target, levels, internalformat, width, height, depth); }
PHASER_FORCE_INLINE void  phaserTexStorage3DEXT(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.TexStorage3DEXT(target, levels, internalformat, width, height, depth); }
PHASER_FORCE_INLINE void  phaserTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { phaserGL.TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTexStorage3DMultisampleOES(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { phaserGL.TexStorage3DMultisampleOES(target, samples, internalformat, width, height, depth, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTexStorageMem1DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { phaserGL.TexStorageMem1DEXT(target, levels, internalFormat, width, memory, offset); }
PHASER_FORCE_INLINE void  phaserTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { phaserGL.TexStorageMem2DEXT(target, levels, internalFormat, width, height, memory, offset); }
PHASER_FORCE_INLINE void  phaserTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { phaserGL.TexStorageMem2DMultisampleEXT(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
PHASER_FORCE_INLINE void  phaserTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { phaserGL.TexStorageMem3DEXT(target, levels, internalFormat, width, height, depth, memory, offset); }
PHASER_FORCE_INLINE void  phaserTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { phaserGL.TexStorageMem3DMultisampleEXT(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
PHASER_FORCE_INLINE void  phaserTexStorageSparseAMD(GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { phaserGL.TexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags); }
PHASER_FORCE_INLINE void  phaserTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage1D(target, level, xoffset, width, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage1DEXT(target, level, xoffset, width, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage3DOES(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels) { phaserGL.TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureBarrier(void) { phaserGL.TextureBarrier(); }
PHASER_FORCE_INLINE void  phaserTextureBarrierNV(void) { phaserGL.TextureBarrierNV(); }
PHASER_FORCE_INLINE void  phaserTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer) { phaserGL.TextureBuffer(texture, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserTextureBufferEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer) { phaserGL.TextureBufferEXT(texture, target, internalformat, buffer); }
PHASER_FORCE_INLINE void  phaserTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.TextureBufferRange(texture, internalformat, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserTextureBufferRangeEXT(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.TextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) { phaserGL.TextureColorMaskSGIS(red, green, blue, alpha); }
PHASER_FORCE_INLINE void  phaserTextureFoveationParametersQCOM(GLuint texture, GLuint layer, GLuint focalPoint, GLfloat focalX, GLfloat focalY, GLfloat gainX, GLfloat gainY, GLfloat foveaArea) { phaserGL.TextureFoveationParametersQCOM(texture, layer, focalPoint, focalX, focalY, gainX, gainY, foveaArea); }
PHASER_FORCE_INLINE void  phaserTextureImage1DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureImage2DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureImage2DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { phaserGL.TextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations); }
PHASER_FORCE_INLINE void  phaserTextureImage2DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations) { phaserGL.TextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations); }
PHASER_FORCE_INLINE void  phaserTextureImage3DEXT(GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureImage3DMultisampleCoverageNV(GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { phaserGL.TextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations); }
PHASER_FORCE_INLINE void  phaserTextureImage3DMultisampleNV(GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations) { phaserGL.TextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations); }
PHASER_FORCE_INLINE void  phaserTextureLightEXT(GLenum pname) { phaserGL.TextureLightEXT(pname); }
PHASER_FORCE_INLINE void  phaserTextureMaterialEXT(GLenum face, GLenum mode) { phaserGL.TextureMaterialEXT(face, mode); }
PHASER_FORCE_INLINE void  phaserTextureNormalEXT(GLenum mode) { phaserGL.TextureNormalEXT(mode); }
PHASER_FORCE_INLINE void  phaserTexturePageCommitmentEXT(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit) { phaserGL.TexturePageCommitmentEXT(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit); }
PHASER_FORCE_INLINE void  phaserTextureParameterIiv(GLuint texture, GLenum pname, const GLint * params) { phaserGL.TextureParameterIiv(texture, pname, params); }
PHASER_FORCE_INLINE void  phaserTextureParameterIivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { phaserGL.TextureParameterIivEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint * params) { phaserGL.TextureParameterIuiv(texture, pname, params); }
PHASER_FORCE_INLINE void  phaserTextureParameterIuivEXT(GLuint texture, GLenum target, GLenum pname, const GLuint * params) { phaserGL.TextureParameterIuivEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserTextureParameterf(GLuint texture, GLenum pname, GLfloat param) { phaserGL.TextureParameterf(texture, pname, param); }
PHASER_FORCE_INLINE void  phaserTextureParameterfEXT(GLuint texture, GLenum target, GLenum pname, GLfloat param) { phaserGL.TextureParameterfEXT(texture, target, pname, param); }
PHASER_FORCE_INLINE void  phaserTextureParameterfv(GLuint texture, GLenum pname, const GLfloat * param) { phaserGL.TextureParameterfv(texture, pname, param); }
PHASER_FORCE_INLINE void  phaserTextureParameterfvEXT(GLuint texture, GLenum target, GLenum pname, const GLfloat * params) { phaserGL.TextureParameterfvEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserTextureParameteri(GLuint texture, GLenum pname, GLint param) { phaserGL.TextureParameteri(texture, pname, param); }
PHASER_FORCE_INLINE void  phaserTextureParameteriEXT(GLuint texture, GLenum target, GLenum pname, GLint param) { phaserGL.TextureParameteriEXT(texture, target, pname, param); }
PHASER_FORCE_INLINE void  phaserTextureParameteriv(GLuint texture, GLenum pname, const GLint * param) { phaserGL.TextureParameteriv(texture, pname, param); }
PHASER_FORCE_INLINE void  phaserTextureParameterivEXT(GLuint texture, GLenum target, GLenum pname, const GLint * params) { phaserGL.TextureParameterivEXT(texture, target, pname, params); }
PHASER_FORCE_INLINE void  phaserTextureRangeAPPLE(GLenum target, GLsizei length, const void * pointer) { phaserGL.TextureRangeAPPLE(target, length, pointer); }
PHASER_FORCE_INLINE void  phaserTextureRenderbufferEXT(GLuint texture, GLenum target, GLuint renderbuffer) { phaserGL.TextureRenderbufferEXT(texture, target, renderbuffer); }
PHASER_FORCE_INLINE void  phaserTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width) { phaserGL.TextureStorage1D(texture, levels, internalformat, width); }
PHASER_FORCE_INLINE void  phaserTextureStorage1DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width) { phaserGL.TextureStorage1DEXT(texture, target, levels, internalformat, width); }
PHASER_FORCE_INLINE void  phaserTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.TextureStorage2D(texture, levels, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserTextureStorage2DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height) { phaserGL.TextureStorage2DEXT(texture, target, levels, internalformat, width, height); }
PHASER_FORCE_INLINE void  phaserTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { phaserGL.TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTextureStorage2DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) { phaserGL.TextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.TextureStorage3D(texture, levels, internalformat, width, height, depth); }
PHASER_FORCE_INLINE void  phaserTextureStorage3DEXT(GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth) { phaserGL.TextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth); }
PHASER_FORCE_INLINE void  phaserTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { phaserGL.TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTextureStorage3DMultisampleEXT(GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations) { phaserGL.TextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations); }
PHASER_FORCE_INLINE void  phaserTextureStorageMem1DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLuint memory, GLuint64 offset) { phaserGL.TextureStorageMem1DEXT(texture, levels, internalFormat, width, memory, offset); }
PHASER_FORCE_INLINE void  phaserTextureStorageMem2DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset) { phaserGL.TextureStorageMem2DEXT(texture, levels, internalFormat, width, height, memory, offset); }
PHASER_FORCE_INLINE void  phaserTextureStorageMem2DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { phaserGL.TextureStorageMem2DMultisampleEXT(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset); }
PHASER_FORCE_INLINE void  phaserTextureStorageMem3DEXT(GLuint texture, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset) { phaserGL.TextureStorageMem3DEXT(texture, levels, internalFormat, width, height, depth, memory, offset); }
PHASER_FORCE_INLINE void  phaserTextureStorageMem3DMultisampleEXT(GLuint texture, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset) { phaserGL.TextureStorageMem3DMultisampleEXT(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset); }
PHASER_FORCE_INLINE void  phaserTextureStorageSparseAMD(GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags) { phaserGL.TextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags); }
PHASER_FORCE_INLINE void  phaserTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureSubImage1D(texture, level, xoffset, width, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureSubImage1DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureSubImage2DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureSubImage3DEXT(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels) { phaserGL.TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels); }
PHASER_FORCE_INLINE void  phaserTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { phaserGL.TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
PHASER_FORCE_INLINE void  phaserTextureViewEXT(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { phaserGL.TextureViewEXT(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
PHASER_FORCE_INLINE void  phaserTextureViewOES(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers) { phaserGL.TextureViewOES(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers); }
PHASER_FORCE_INLINE void  phaserTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform) { phaserGL.TrackMatrixNV(target, address, matrix, transform); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackAttribsNV(GLsizei count, const GLint * attribs, GLenum bufferMode) { phaserGL.TransformFeedbackAttribsNV(count, attribs, bufferMode); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer) { phaserGL.TransformFeedbackBufferBase(xfb, index, buffer); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size) { phaserGL.TransformFeedbackBufferRange(xfb, index, buffer, offset, size); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackStreamAttribsNV(GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode) { phaserGL.TransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { phaserGL.TransformFeedbackVaryings(program, count, varyings, bufferMode); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode) { phaserGL.TransformFeedbackVaryingsEXT(program, count, varyings, bufferMode); }
PHASER_FORCE_INLINE void  phaserTransformFeedbackVaryingsNV(GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode) { phaserGL.TransformFeedbackVaryingsNV(program, count, locations, bufferMode); }
PHASER_FORCE_INLINE void  phaserTransformPathNV(GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues) { phaserGL.TransformPathNV(resultPath, srcPath, transformType, transformValues); }
PHASER_FORCE_INLINE void  phaserTranslated(GLdouble x, GLdouble y, GLdouble z) { phaserGL.Translated(x, y, z); }
PHASER_FORCE_INLINE void  phaserTranslatef(GLfloat x, GLfloat y, GLfloat z) { phaserGL.Translatef(x, y, z); }
PHASER_FORCE_INLINE void  phaserTranslatex(GLfixed x, GLfixed y, GLfixed z) { phaserGL.Translatex(x, y, z); }
PHASER_FORCE_INLINE void  phaserTranslatexOES(GLfixed x, GLfixed y, GLfixed z) { phaserGL.TranslatexOES(x, y, z); }
PHASER_FORCE_INLINE void  phaserUniform1d(GLint location, GLdouble x) { phaserGL.Uniform1d(location, x); }
PHASER_FORCE_INLINE void  phaserUniform1dv(GLint location, GLsizei count, const GLdouble * value) { phaserGL.Uniform1dv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1f(GLint location, GLfloat v0) { phaserGL.Uniform1f(location, v0); }
PHASER_FORCE_INLINE void  phaserUniform1fARB(GLint location, GLfloat v0) { phaserGL.Uniform1fARB(location, v0); }
PHASER_FORCE_INLINE void  phaserUniform1fv(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform1fv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1fvARB(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform1fvARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1i(GLint location, GLint v0) { phaserGL.Uniform1i(location, v0); }
PHASER_FORCE_INLINE void  phaserUniform1i64ARB(GLint location, GLint64 x) { phaserGL.Uniform1i64ARB(location, x); }
PHASER_FORCE_INLINE void  phaserUniform1i64NV(GLint location, GLint64EXT x) { phaserGL.Uniform1i64NV(location, x); }
PHASER_FORCE_INLINE void  phaserUniform1i64vARB(GLint location, GLsizei count, const GLint64 * value) { phaserGL.Uniform1i64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.Uniform1i64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1iARB(GLint location, GLint v0) { phaserGL.Uniform1iARB(location, v0); }
PHASER_FORCE_INLINE void  phaserUniform1iv(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform1iv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1ivARB(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform1ivARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1ui(GLint location, GLuint v0) { phaserGL.Uniform1ui(location, v0); }
PHASER_FORCE_INLINE void  phaserUniform1ui64ARB(GLint location, GLuint64 x) { phaserGL.Uniform1ui64ARB(location, x); }
PHASER_FORCE_INLINE void  phaserUniform1ui64NV(GLint location, GLuint64EXT x) { phaserGL.Uniform1ui64NV(location, x); }
PHASER_FORCE_INLINE void  phaserUniform1ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.Uniform1ui64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.Uniform1ui64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1uiEXT(GLint location, GLuint v0) { phaserGL.Uniform1uiEXT(location, v0); }
PHASER_FORCE_INLINE void  phaserUniform1uiv(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform1uiv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform1uivEXT(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform1uivEXT(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2d(GLint location, GLdouble x, GLdouble y) { phaserGL.Uniform2d(location, x, y); }
PHASER_FORCE_INLINE void  phaserUniform2dv(GLint location, GLsizei count, const GLdouble * value) { phaserGL.Uniform2dv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2f(GLint location, GLfloat v0, GLfloat v1) { phaserGL.Uniform2f(location, v0, v1); }
PHASER_FORCE_INLINE void  phaserUniform2fARB(GLint location, GLfloat v0, GLfloat v1) { phaserGL.Uniform2fARB(location, v0, v1); }
PHASER_FORCE_INLINE void  phaserUniform2fv(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform2fv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2fvARB(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform2fvARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2i(GLint location, GLint v0, GLint v1) { phaserGL.Uniform2i(location, v0, v1); }
PHASER_FORCE_INLINE void  phaserUniform2i64ARB(GLint location, GLint64 x, GLint64 y) { phaserGL.Uniform2i64ARB(location, x, y); }
PHASER_FORCE_INLINE void  phaserUniform2i64NV(GLint location, GLint64EXT x, GLint64EXT y) { phaserGL.Uniform2i64NV(location, x, y); }
PHASER_FORCE_INLINE void  phaserUniform2i64vARB(GLint location, GLsizei count, const GLint64 * value) { phaserGL.Uniform2i64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.Uniform2i64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2iARB(GLint location, GLint v0, GLint v1) { phaserGL.Uniform2iARB(location, v0, v1); }
PHASER_FORCE_INLINE void  phaserUniform2iv(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform2iv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2ivARB(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform2ivARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2ui(GLint location, GLuint v0, GLuint v1) { phaserGL.Uniform2ui(location, v0, v1); }
PHASER_FORCE_INLINE void  phaserUniform2ui64ARB(GLint location, GLuint64 x, GLuint64 y) { phaserGL.Uniform2ui64ARB(location, x, y); }
PHASER_FORCE_INLINE void  phaserUniform2ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y) { phaserGL.Uniform2ui64NV(location, x, y); }
PHASER_FORCE_INLINE void  phaserUniform2ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.Uniform2ui64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.Uniform2ui64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2uiEXT(GLint location, GLuint v0, GLuint v1) { phaserGL.Uniform2uiEXT(location, v0, v1); }
PHASER_FORCE_INLINE void  phaserUniform2uiv(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform2uiv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform2uivEXT(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform2uivEXT(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z) { phaserGL.Uniform3d(location, x, y, z); }
PHASER_FORCE_INLINE void  phaserUniform3dv(GLint location, GLsizei count, const GLdouble * value) { phaserGL.Uniform3dv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { phaserGL.Uniform3f(location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) { phaserGL.Uniform3fARB(location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserUniform3fv(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform3fv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3fvARB(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform3fvARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3i(GLint location, GLint v0, GLint v1, GLint v2) { phaserGL.Uniform3i(location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserUniform3i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z) { phaserGL.Uniform3i64ARB(location, x, y, z); }
PHASER_FORCE_INLINE void  phaserUniform3i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z) { phaserGL.Uniform3i64NV(location, x, y, z); }
PHASER_FORCE_INLINE void  phaserUniform3i64vARB(GLint location, GLsizei count, const GLint64 * value) { phaserGL.Uniform3i64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.Uniform3i64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2) { phaserGL.Uniform3iARB(location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserUniform3iv(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform3iv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3ivARB(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform3ivARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2) { phaserGL.Uniform3ui(location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserUniform3ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z) { phaserGL.Uniform3ui64ARB(location, x, y, z); }
PHASER_FORCE_INLINE void  phaserUniform3ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { phaserGL.Uniform3ui64NV(location, x, y, z); }
PHASER_FORCE_INLINE void  phaserUniform3ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.Uniform3ui64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.Uniform3ui64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2) { phaserGL.Uniform3uiEXT(location, v0, v1, v2); }
PHASER_FORCE_INLINE void  phaserUniform3uiv(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform3uiv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform3uivEXT(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform3uivEXT(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.Uniform4d(location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserUniform4dv(GLint location, GLsizei count, const GLdouble * value) { phaserGL.Uniform4dv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { phaserGL.Uniform4f(location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) { phaserGL.Uniform4fARB(location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserUniform4fv(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform4fv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4fvARB(GLint location, GLsizei count, const GLfloat * value) { phaserGL.Uniform4fvARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { phaserGL.Uniform4i(location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserUniform4i64ARB(GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w) { phaserGL.Uniform4i64ARB(location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserUniform4i64NV(GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { phaserGL.Uniform4i64NV(location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserUniform4i64vARB(GLint location, GLsizei count, const GLint64 * value) { phaserGL.Uniform4i64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4i64vNV(GLint location, GLsizei count, const GLint64EXT * value) { phaserGL.Uniform4i64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) { phaserGL.Uniform4iARB(location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserUniform4iv(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform4iv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4ivARB(GLint location, GLsizei count, const GLint * value) { phaserGL.Uniform4ivARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { phaserGL.Uniform4ui(location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserUniform4ui64ARB(GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w) { phaserGL.Uniform4ui64ARB(location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserUniform4ui64NV(GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { phaserGL.Uniform4ui64NV(location, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserUniform4ui64vARB(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.Uniform4ui64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4ui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.Uniform4ui64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3) { phaserGL.Uniform4uiEXT(location, v0, v1, v2, v3); }
PHASER_FORCE_INLINE void  phaserUniform4uiv(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform4uiv(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniform4uivEXT(GLint location, GLsizei count, const GLuint * value) { phaserGL.Uniform4uivEXT(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding) { phaserGL.UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding); }
PHASER_FORCE_INLINE void  phaserUniformBufferEXT(GLuint program, GLint location, GLuint buffer) { phaserGL.UniformBufferEXT(program, location, buffer); }
PHASER_FORCE_INLINE void  phaserUniformHandleui64ARB(GLint location, GLuint64 value) { phaserGL.UniformHandleui64ARB(location, value); }
PHASER_FORCE_INLINE void  phaserUniformHandleui64IMG(GLint location, GLuint64 value) { phaserGL.UniformHandleui64IMG(location, value); }
PHASER_FORCE_INLINE void  phaserUniformHandleui64NV(GLint location, GLuint64 value) { phaserGL.UniformHandleui64NV(location, value); }
PHASER_FORCE_INLINE void  phaserUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.UniformHandleui64vARB(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniformHandleui64vIMG(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.UniformHandleui64vIMG(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniformHandleui64vNV(GLint location, GLsizei count, const GLuint64 * value) { phaserGL.UniformHandleui64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix2dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix2fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix2fvARB(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix2x3dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix2x3fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix2x3fvNV(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix2x4dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix2x4fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix2x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix2x4fvNV(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix3dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix3fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix3fvARB(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix3x2dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix3x2fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix3x2fvNV(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix3x4dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix3x4fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix3x4fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix3x4fvNV(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix4dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix4fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix4fvARB(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix4x2dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix4x2fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4x2fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix4x2fvNV(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value) { phaserGL.UniformMatrix4x3dv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix4x3fv(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformMatrix4x3fvNV(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) { phaserGL.UniformMatrix4x3fvNV(location, count, transpose, value); }
PHASER_FORCE_INLINE void  phaserUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices) { phaserGL.UniformSubroutinesuiv(shadertype, count, indices); }
PHASER_FORCE_INLINE void  phaserUniformui64NV(GLint location, GLuint64EXT value) { phaserGL.Uniformui64NV(location, value); }
PHASER_FORCE_INLINE void  phaserUniformui64vNV(GLint location, GLsizei count, const GLuint64EXT * value) { phaserGL.Uniformui64vNV(location, count, value); }
PHASER_FORCE_INLINE void  phaserUnlockArraysEXT(void) { phaserGL.UnlockArraysEXT(); }
PHASER_FORCE_INLINE GLboolean phaserUnmapBuffer(GLenum target) { return phaserGL.UnmapBuffer(target); }
PHASER_FORCE_INLINE GLboolean phaserUnmapBufferARB(GLenum target) { return phaserGL.UnmapBufferARB(target); }
PHASER_FORCE_INLINE GLboolean phaserUnmapBufferOES(GLenum target) { return phaserGL.UnmapBufferOES(target); }
PHASER_FORCE_INLINE GLboolean phaserUnmapNamedBuffer(GLuint buffer) { return phaserGL.UnmapNamedBuffer(buffer); }
PHASER_FORCE_INLINE GLboolean phaserUnmapNamedBufferEXT(GLuint buffer) { return phaserGL.UnmapNamedBufferEXT(buffer); }
PHASER_FORCE_INLINE void  phaserUnmapObjectBufferATI(GLuint buffer) { phaserGL.UnmapObjectBufferATI(buffer); }
PHASER_FORCE_INLINE void  phaserUnmapTexture2DINTEL(GLuint texture, GLint level) { phaserGL.UnmapTexture2DINTEL(texture, level); }
PHASER_FORCE_INLINE void  phaserUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve) { phaserGL.UpdateObjectBufferATI(buffer, offset, size, pointer, preserve); }
PHASER_FORCE_INLINE void  phaserUseProgram(GLuint program) { phaserGL.UseProgram(program); }
PHASER_FORCE_INLINE void  phaserUseProgramObjectARB(GLhandleARB programObj) { phaserGL.UseProgramObjectARB(programObj); }
PHASER_FORCE_INLINE void  phaserUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program) { phaserGL.UseProgramStages(pipeline, stages, program); }
PHASER_FORCE_INLINE void  phaserUseProgramStagesEXT(GLuint pipeline, GLbitfield stages, GLuint program) { phaserGL.UseProgramStagesEXT(pipeline, stages, program); }
PHASER_FORCE_INLINE void  phaserUseShaderProgramEXT(GLenum type, GLuint program) { phaserGL.UseShaderProgramEXT(type, program); }
PHASER_FORCE_INLINE void  phaserVDPAUFiniNV(void) { phaserGL.VDPAUFiniNV(); }
PHASER_FORCE_INLINE void  phaserVDPAUGetSurfaceivNV(GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values) { phaserGL.VDPAUGetSurfaceivNV(surface, pname, bufSize, length, values); }
PHASER_FORCE_INLINE void  phaserVDPAUInitNV(const void * vdpDevice, const void * getProcAddress) { phaserGL.VDPAUInitNV(vdpDevice, getProcAddress); }
PHASER_FORCE_INLINE GLboolean phaserVDPAUIsSurfaceNV(GLvdpauSurfaceNV surface) { return phaserGL.VDPAUIsSurfaceNV(surface); }
PHASER_FORCE_INLINE void  phaserVDPAUMapSurfacesNV(GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces) { phaserGL.VDPAUMapSurfacesNV(numSurfaces, surfaces); }
PHASER_FORCE_INLINE GLvdpauSurfaceNV phaserVDPAURegisterOutputSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return phaserGL.VDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
PHASER_FORCE_INLINE GLvdpauSurfaceNV phaserVDPAURegisterVideoSurfaceNV(const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames) { return phaserGL.VDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames); }
PHASER_FORCE_INLINE void  phaserVDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLenum access) { phaserGL.VDPAUSurfaceAccessNV(surface, access); }
PHASER_FORCE_INLINE void  phaserVDPAUUnmapSurfacesNV(GLsizei numSurface, const GLvdpauSurfaceNV * surfaces) { phaserGL.VDPAUUnmapSurfacesNV(numSurface, surfaces); }
PHASER_FORCE_INLINE void  phaserVDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface) { phaserGL.VDPAUUnregisterSurfaceNV(surface); }
PHASER_FORCE_INLINE void  phaserValidateProgram(GLuint program) { phaserGL.ValidateProgram(program); }
PHASER_FORCE_INLINE void  phaserValidateProgramARB(GLhandleARB programObj) { phaserGL.ValidateProgramARB(programObj); }
PHASER_FORCE_INLINE void  phaserValidateProgramPipeline(GLuint pipeline) { phaserGL.ValidateProgramPipeline(pipeline); }
PHASER_FORCE_INLINE void  phaserValidateProgramPipelineEXT(GLuint pipeline) { phaserGL.ValidateProgramPipelineEXT(pipeline); }
PHASER_FORCE_INLINE void  phaserVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset) { phaserGL.VariantArrayObjectATI(id, type, stride, buffer, offset); }
PHASER_FORCE_INLINE void  phaserVariantPointerEXT(GLuint id, GLenum type, GLuint stride, const void * addr) { phaserGL.VariantPointerEXT(id, type, stride, addr); }
PHASER_FORCE_INLINE void  phaserVariantbvEXT(GLuint id, const GLbyte * addr) { phaserGL.VariantbvEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantdvEXT(GLuint id, const GLdouble * addr) { phaserGL.VariantdvEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantfvEXT(GLuint id, const GLfloat * addr) { phaserGL.VariantfvEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantivEXT(GLuint id, const GLint * addr) { phaserGL.VariantivEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantsvEXT(GLuint id, const GLshort * addr) { phaserGL.VariantsvEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantubvEXT(GLuint id, const GLubyte * addr) { phaserGL.VariantubvEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantuivEXT(GLuint id, const GLuint * addr) { phaserGL.VariantuivEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVariantusvEXT(GLuint id, const GLushort * addr) { phaserGL.VariantusvEXT(id, addr); }
PHASER_FORCE_INLINE void  phaserVertex2bOES(GLbyte x, GLbyte y) { phaserGL.Vertex2bOES(x, y); }
PHASER_FORCE_INLINE void  phaserVertex2bvOES(const GLbyte * coords) { phaserGL.Vertex2bvOES(coords); }
PHASER_FORCE_INLINE void  phaserVertex2d(GLdouble x, GLdouble y) { phaserGL.Vertex2d(x, y); }
PHASER_FORCE_INLINE void  phaserVertex2dv(const GLdouble * v) { phaserGL.Vertex2dv(v); }
PHASER_FORCE_INLINE void  phaserVertex2f(GLfloat x, GLfloat y) { phaserGL.Vertex2f(x, y); }
PHASER_FORCE_INLINE void  phaserVertex2fv(const GLfloat * v) { phaserGL.Vertex2fv(v); }
PHASER_FORCE_INLINE void  phaserVertex2hNV(GLhalfNV x, GLhalfNV y) { phaserGL.Vertex2hNV(x, y); }
PHASER_FORCE_INLINE void  phaserVertex2hvNV(const GLhalfNV * v) { phaserGL.Vertex2hvNV(v); }
PHASER_FORCE_INLINE void  phaserVertex2i(GLint x, GLint y) { phaserGL.Vertex2i(x, y); }
PHASER_FORCE_INLINE void  phaserVertex2iv(const GLint * v) { phaserGL.Vertex2iv(v); }
PHASER_FORCE_INLINE void  phaserVertex2s(GLshort x, GLshort y) { phaserGL.Vertex2s(x, y); }
PHASER_FORCE_INLINE void  phaserVertex2sv(const GLshort * v) { phaserGL.Vertex2sv(v); }
PHASER_FORCE_INLINE void  phaserVertex2xOES(GLfixed x) { phaserGL.Vertex2xOES(x); }
PHASER_FORCE_INLINE void  phaserVertex2xvOES(const GLfixed * coords) { phaserGL.Vertex2xvOES(coords); }
PHASER_FORCE_INLINE void  phaserVertex3bOES(GLbyte x, GLbyte y, GLbyte z) { phaserGL.Vertex3bOES(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex3bvOES(const GLbyte * coords) { phaserGL.Vertex3bvOES(coords); }
PHASER_FORCE_INLINE void  phaserVertex3d(GLdouble x, GLdouble y, GLdouble z) { phaserGL.Vertex3d(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex3dv(const GLdouble * v) { phaserGL.Vertex3dv(v); }
PHASER_FORCE_INLINE void  phaserVertex3f(GLfloat x, GLfloat y, GLfloat z) { phaserGL.Vertex3f(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex3fv(const GLfloat * v) { phaserGL.Vertex3fv(v); }
PHASER_FORCE_INLINE void  phaserVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z) { phaserGL.Vertex3hNV(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex3hvNV(const GLhalfNV * v) { phaserGL.Vertex3hvNV(v); }
PHASER_FORCE_INLINE void  phaserVertex3i(GLint x, GLint y, GLint z) { phaserGL.Vertex3i(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex3iv(const GLint * v) { phaserGL.Vertex3iv(v); }
PHASER_FORCE_INLINE void  phaserVertex3s(GLshort x, GLshort y, GLshort z) { phaserGL.Vertex3s(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex3sv(const GLshort * v) { phaserGL.Vertex3sv(v); }
PHASER_FORCE_INLINE void  phaserVertex3xOES(GLfixed x, GLfixed y) { phaserGL.Vertex3xOES(x, y); }
PHASER_FORCE_INLINE void  phaserVertex3xvOES(const GLfixed * coords) { phaserGL.Vertex3xvOES(coords); }
PHASER_FORCE_INLINE void  phaserVertex4bOES(GLbyte x, GLbyte y, GLbyte z, GLbyte w) { phaserGL.Vertex4bOES(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertex4bvOES(const GLbyte * coords) { phaserGL.Vertex4bvOES(coords); }
PHASER_FORCE_INLINE void  phaserVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.Vertex4d(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertex4dv(const GLdouble * v) { phaserGL.Vertex4dv(v); }
PHASER_FORCE_INLINE void  phaserVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.Vertex4f(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertex4fv(const GLfloat * v) { phaserGL.Vertex4fv(v); }
PHASER_FORCE_INLINE void  phaserVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { phaserGL.Vertex4hNV(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertex4hvNV(const GLhalfNV * v) { phaserGL.Vertex4hvNV(v); }
PHASER_FORCE_INLINE void  phaserVertex4i(GLint x, GLint y, GLint z, GLint w) { phaserGL.Vertex4i(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertex4iv(const GLint * v) { phaserGL.Vertex4iv(v); }
PHASER_FORCE_INLINE void  phaserVertex4s(GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.Vertex4s(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertex4sv(const GLshort * v) { phaserGL.Vertex4sv(v); }
PHASER_FORCE_INLINE void  phaserVertex4xOES(GLfixed x, GLfixed y, GLfixed z) { phaserGL.Vertex4xOES(x, y, z); }
PHASER_FORCE_INLINE void  phaserVertex4xvOES(const GLfixed * coords) { phaserGL.Vertex4xvOES(coords); }
PHASER_FORCE_INLINE void  phaserVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { phaserGL.VertexArrayAttribBinding(vaobj, attribindex, bindingindex); }
PHASER_FORCE_INLINE void  phaserVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { phaserGL.VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { phaserGL.VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { phaserGL.VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexArrayBindVertexBufferEXT(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { phaserGL.VertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride); }
PHASER_FORCE_INLINE void  phaserVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor) { phaserGL.VertexArrayBindingDivisor(vaobj, bindingindex, divisor); }
PHASER_FORCE_INLINE void  phaserVertexArrayColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayEdgeFlagOffsetEXT(GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayElementBuffer(GLuint vaobj, GLuint buffer) { phaserGL.VertexArrayElementBuffer(vaobj, buffer); }
PHASER_FORCE_INLINE void  phaserVertexArrayFogCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayFogCoordOffsetEXT(vaobj, buffer, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayIndexOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayIndexOffsetEXT(vaobj, buffer, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayMultiTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayNormalOffsetEXT(GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayNormalOffsetEXT(vaobj, buffer, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayParameteriAPPLE(GLenum pname, GLint param) { phaserGL.VertexArrayParameteriAPPLE(pname, param); }
PHASER_FORCE_INLINE void  phaserVertexArrayRangeAPPLE(GLsizei length, void * pointer) { phaserGL.VertexArrayRangeAPPLE(length, pointer); }
PHASER_FORCE_INLINE void  phaserVertexArrayRangeNV(GLsizei length, const void * pointer) { phaserGL.VertexArrayRangeNV(length, pointer); }
PHASER_FORCE_INLINE void  phaserVertexArraySecondaryColorOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayTexCoordOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribBindingEXT(GLuint vaobj, GLuint attribindex, GLuint bindingindex) { phaserGL.VertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribDivisorEXT(GLuint vaobj, GLuint index, GLuint divisor) { phaserGL.VertexArrayVertexAttribDivisorEXT(vaobj, index, divisor); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { phaserGL.VertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type, normalized, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribIFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { phaserGL.VertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribIOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribLFormatEXT(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { phaserGL.VertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribLOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexAttribOffsetEXT(GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type, normalized, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexBindingDivisorEXT(GLuint vaobj, GLuint bindingindex, GLuint divisor) { phaserGL.VertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride) { phaserGL.VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) { phaserGL.VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides); }
PHASER_FORCE_INLINE void  phaserVertexArrayVertexOffsetEXT(GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset) { phaserGL.VertexArrayVertexOffsetEXT(vaobj, buffer, size, type, stride, offset); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1d(GLuint index, GLdouble x) { phaserGL.VertexAttrib1d(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1dARB(GLuint index, GLdouble x) { phaserGL.VertexAttrib1dARB(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1dNV(GLuint index, GLdouble x) { phaserGL.VertexAttrib1dNV(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib1dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1dvARB(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib1dvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1dvNV(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib1dvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1f(GLuint index, GLfloat x) { phaserGL.VertexAttrib1f(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1fARB(GLuint index, GLfloat x) { phaserGL.VertexAttrib1fARB(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1fNV(GLuint index, GLfloat x) { phaserGL.VertexAttrib1fNV(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1fv(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib1fv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1fvARB(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib1fvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1fvNV(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib1fvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1hNV(GLuint index, GLhalfNV x) { phaserGL.VertexAttrib1hNV(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1hvNV(GLuint index, const GLhalfNV * v) { phaserGL.VertexAttrib1hvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1s(GLuint index, GLshort x) { phaserGL.VertexAttrib1s(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1sARB(GLuint index, GLshort x) { phaserGL.VertexAttrib1sARB(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1sNV(GLuint index, GLshort x) { phaserGL.VertexAttrib1sNV(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1sv(GLuint index, const GLshort * v) { phaserGL.VertexAttrib1sv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1svARB(GLuint index, const GLshort * v) { phaserGL.VertexAttrib1svARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib1svNV(GLuint index, const GLshort * v) { phaserGL.VertexAttrib1svNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2d(GLuint index, GLdouble x, GLdouble y) { phaserGL.VertexAttrib2d(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y) { phaserGL.VertexAttrib2dARB(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y) { phaserGL.VertexAttrib2dNV(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib2dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2dvARB(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib2dvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2dvNV(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib2dvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2f(GLuint index, GLfloat x, GLfloat y) { phaserGL.VertexAttrib2f(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y) { phaserGL.VertexAttrib2fARB(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y) { phaserGL.VertexAttrib2fNV(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2fv(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib2fv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2fvARB(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib2fvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2fvNV(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib2fvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y) { phaserGL.VertexAttrib2hNV(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2hvNV(GLuint index, const GLhalfNV * v) { phaserGL.VertexAttrib2hvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2s(GLuint index, GLshort x, GLshort y) { phaserGL.VertexAttrib2s(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2sARB(GLuint index, GLshort x, GLshort y) { phaserGL.VertexAttrib2sARB(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2sNV(GLuint index, GLshort x, GLshort y) { phaserGL.VertexAttrib2sNV(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2sv(GLuint index, const GLshort * v) { phaserGL.VertexAttrib2sv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2svARB(GLuint index, const GLshort * v) { phaserGL.VertexAttrib2svARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib2svNV(GLuint index, const GLshort * v) { phaserGL.VertexAttrib2svNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { phaserGL.VertexAttrib3d(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z) { phaserGL.VertexAttrib3dARB(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z) { phaserGL.VertexAttrib3dNV(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib3dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3dvARB(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib3dvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3dvNV(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib3dvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z) { phaserGL.VertexAttrib3f(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z) { phaserGL.VertexAttrib3fARB(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z) { phaserGL.VertexAttrib3fNV(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3fv(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib3fv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3fvARB(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib3fvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3fvNV(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib3fvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z) { phaserGL.VertexAttrib3hNV(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3hvNV(GLuint index, const GLhalfNV * v) { phaserGL.VertexAttrib3hvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z) { phaserGL.VertexAttrib3s(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z) { phaserGL.VertexAttrib3sARB(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z) { phaserGL.VertexAttrib3sNV(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3sv(GLuint index, const GLshort * v) { phaserGL.VertexAttrib3sv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3svARB(GLuint index, const GLshort * v) { phaserGL.VertexAttrib3svARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib3svNV(GLuint index, const GLshort * v) { phaserGL.VertexAttrib3svNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Nbv(GLuint index, const GLbyte * v) { phaserGL.VertexAttrib4Nbv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NbvARB(GLuint index, const GLbyte * v) { phaserGL.VertexAttrib4NbvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Niv(GLuint index, const GLint * v) { phaserGL.VertexAttrib4Niv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NivARB(GLuint index, const GLint * v) { phaserGL.VertexAttrib4NivARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Nsv(GLuint index, const GLshort * v) { phaserGL.VertexAttrib4Nsv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NsvARB(GLuint index, const GLshort * v) { phaserGL.VertexAttrib4NsvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { phaserGL.VertexAttrib4Nub(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { phaserGL.VertexAttrib4NubARB(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Nubv(GLuint index, const GLubyte * v) { phaserGL.VertexAttrib4Nubv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NubvARB(GLuint index, const GLubyte * v) { phaserGL.VertexAttrib4NubvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Nuiv(GLuint index, const GLuint * v) { phaserGL.VertexAttrib4Nuiv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NuivARB(GLuint index, const GLuint * v) { phaserGL.VertexAttrib4NuivARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4Nusv(GLuint index, const GLushort * v) { phaserGL.VertexAttrib4Nusv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4NusvARB(GLuint index, const GLushort * v) { phaserGL.VertexAttrib4NusvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4bv(GLuint index, const GLbyte * v) { phaserGL.VertexAttrib4bv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4bvARB(GLuint index, const GLbyte * v) { phaserGL.VertexAttrib4bvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.VertexAttrib4d(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.VertexAttrib4dARB(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.VertexAttrib4dNV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib4dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4dvARB(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib4dvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4dvNV(GLuint index, const GLdouble * v) { phaserGL.VertexAttrib4dvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.VertexAttrib4f(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.VertexAttrib4fARB(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.VertexAttrib4fNV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4fv(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib4fv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4fvARB(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib4fvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4fvNV(GLuint index, const GLfloat * v) { phaserGL.VertexAttrib4fvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) { phaserGL.VertexAttrib4hNV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4hvNV(GLuint index, const GLhalfNV * v) { phaserGL.VertexAttrib4hvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4iv(GLuint index, const GLint * v) { phaserGL.VertexAttrib4iv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4ivARB(GLuint index, const GLint * v) { phaserGL.VertexAttrib4ivARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.VertexAttrib4s(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.VertexAttrib4sARB(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.VertexAttrib4sNV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4sv(GLuint index, const GLshort * v) { phaserGL.VertexAttrib4sv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4svARB(GLuint index, const GLshort * v) { phaserGL.VertexAttrib4svARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4svNV(GLuint index, const GLshort * v) { phaserGL.VertexAttrib4svNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w) { phaserGL.VertexAttrib4ubNV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4ubv(GLuint index, const GLubyte * v) { phaserGL.VertexAttrib4ubv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4ubvARB(GLuint index, const GLubyte * v) { phaserGL.VertexAttrib4ubvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4ubvNV(GLuint index, const GLubyte * v) { phaserGL.VertexAttrib4ubvNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4uiv(GLuint index, const GLuint * v) { phaserGL.VertexAttrib4uiv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4uivARB(GLuint index, const GLuint * v) { phaserGL.VertexAttrib4uivARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4usv(GLuint index, const GLushort * v) { phaserGL.VertexAttrib4usv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttrib4usvARB(GLuint index, const GLushort * v) { phaserGL.VertexAttrib4usvARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset) { phaserGL.VertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset); }
PHASER_FORCE_INLINE void  phaserVertexAttribBinding(GLuint attribindex, GLuint bindingindex) { phaserGL.VertexAttribBinding(attribindex, bindingindex); }
PHASER_FORCE_INLINE void  phaserVertexAttribDivisor(GLuint index, GLuint divisor) { phaserGL.VertexAttribDivisor(index, divisor); }
PHASER_FORCE_INLINE void  phaserVertexAttribDivisorANGLE(GLuint index, GLuint divisor) { phaserGL.VertexAttribDivisorANGLE(index, divisor); }
PHASER_FORCE_INLINE void  phaserVertexAttribDivisorARB(GLuint index, GLuint divisor) { phaserGL.VertexAttribDivisorARB(index, divisor); }
PHASER_FORCE_INLINE void  phaserVertexAttribDivisorEXT(GLuint index, GLuint divisor) { phaserGL.VertexAttribDivisorEXT(index, divisor); }
PHASER_FORCE_INLINE void  phaserVertexAttribDivisorNV(GLuint index, GLuint divisor) { phaserGL.VertexAttribDivisorNV(index, divisor); }
PHASER_FORCE_INLINE void  phaserVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) { phaserGL.VertexAttribFormat(attribindex, size, type, normalized, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexAttribFormatNV(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride) { phaserGL.VertexAttribFormatNV(index, size, type, normalized, stride); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1i(GLuint index, GLint x) { phaserGL.VertexAttribI1i(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1iEXT(GLuint index, GLint x) { phaserGL.VertexAttribI1iEXT(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1iv(GLuint index, const GLint * v) { phaserGL.VertexAttribI1iv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1ivEXT(GLuint index, const GLint * v) { phaserGL.VertexAttribI1ivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1ui(GLuint index, GLuint x) { phaserGL.VertexAttribI1ui(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1uiEXT(GLuint index, GLuint x) { phaserGL.VertexAttribI1uiEXT(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1uiv(GLuint index, const GLuint * v) { phaserGL.VertexAttribI1uiv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI1uivEXT(GLuint index, const GLuint * v) { phaserGL.VertexAttribI1uivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2i(GLuint index, GLint x, GLint y) { phaserGL.VertexAttribI2i(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2iEXT(GLuint index, GLint x, GLint y) { phaserGL.VertexAttribI2iEXT(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2iv(GLuint index, const GLint * v) { phaserGL.VertexAttribI2iv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2ivEXT(GLuint index, const GLint * v) { phaserGL.VertexAttribI2ivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2ui(GLuint index, GLuint x, GLuint y) { phaserGL.VertexAttribI2ui(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y) { phaserGL.VertexAttribI2uiEXT(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2uiv(GLuint index, const GLuint * v) { phaserGL.VertexAttribI2uiv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI2uivEXT(GLuint index, const GLuint * v) { phaserGL.VertexAttribI2uivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z) { phaserGL.VertexAttribI3i(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z) { phaserGL.VertexAttribI3iEXT(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3iv(GLuint index, const GLint * v) { phaserGL.VertexAttribI3iv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3ivEXT(GLuint index, const GLint * v) { phaserGL.VertexAttribI3ivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z) { phaserGL.VertexAttribI3ui(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z) { phaserGL.VertexAttribI3uiEXT(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3uiv(GLuint index, const GLuint * v) { phaserGL.VertexAttribI3uiv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI3uivEXT(GLuint index, const GLuint * v) { phaserGL.VertexAttribI3uivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4bv(GLuint index, const GLbyte * v) { phaserGL.VertexAttribI4bv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4bvEXT(GLuint index, const GLbyte * v) { phaserGL.VertexAttribI4bvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w) { phaserGL.VertexAttribI4i(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w) { phaserGL.VertexAttribI4iEXT(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4iv(GLuint index, const GLint * v) { phaserGL.VertexAttribI4iv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4ivEXT(GLuint index, const GLint * v) { phaserGL.VertexAttribI4ivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4sv(GLuint index, const GLshort * v) { phaserGL.VertexAttribI4sv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4svEXT(GLuint index, const GLshort * v) { phaserGL.VertexAttribI4svEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4ubv(GLuint index, const GLubyte * v) { phaserGL.VertexAttribI4ubv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4ubvEXT(GLuint index, const GLubyte * v) { phaserGL.VertexAttribI4ubvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { phaserGL.VertexAttribI4ui(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w) { phaserGL.VertexAttribI4uiEXT(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4uiv(GLuint index, const GLuint * v) { phaserGL.VertexAttribI4uiv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4uivEXT(GLuint index, const GLuint * v) { phaserGL.VertexAttribI4uivEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4usv(GLuint index, const GLushort * v) { phaserGL.VertexAttribI4usv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribI4usvEXT(GLuint index, const GLushort * v) { phaserGL.VertexAttribI4usvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { phaserGL.VertexAttribIFormat(attribindex, size, type, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexAttribIFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { phaserGL.VertexAttribIFormatNV(index, size, type, stride); }
PHASER_FORCE_INLINE void  phaserVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexAttribIPointer(index, size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexAttribIPointerEXT(index, size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1d(GLuint index, GLdouble x) { phaserGL.VertexAttribL1d(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1dEXT(GLuint index, GLdouble x) { phaserGL.VertexAttribL1dEXT(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL1dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1dvEXT(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL1dvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1i64NV(GLuint index, GLint64EXT x) { phaserGL.VertexAttribL1i64NV(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1i64vNV(GLuint index, const GLint64EXT * v) { phaserGL.VertexAttribL1i64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x) { phaserGL.VertexAttribL1ui64ARB(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1ui64NV(GLuint index, GLuint64EXT x) { phaserGL.VertexAttribL1ui64NV(index, x); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT * v) { phaserGL.VertexAttribL1ui64vARB(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL1ui64vNV(GLuint index, const GLuint64EXT * v) { phaserGL.VertexAttribL1ui64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2d(GLuint index, GLdouble x, GLdouble y) { phaserGL.VertexAttribL2d(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2dEXT(GLuint index, GLdouble x, GLdouble y) { phaserGL.VertexAttribL2dEXT(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL2dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2dvEXT(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL2dvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2i64NV(GLuint index, GLint64EXT x, GLint64EXT y) { phaserGL.VertexAttribL2i64NV(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2i64vNV(GLuint index, const GLint64EXT * v) { phaserGL.VertexAttribL2i64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y) { phaserGL.VertexAttribL2ui64NV(index, x, y); }
PHASER_FORCE_INLINE void  phaserVertexAttribL2ui64vNV(GLuint index, const GLuint64EXT * v) { phaserGL.VertexAttribL2ui64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z) { phaserGL.VertexAttribL3d(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z) { phaserGL.VertexAttribL3dEXT(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL3dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3dvEXT(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL3dvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z) { phaserGL.VertexAttribL3i64NV(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3i64vNV(GLuint index, const GLint64EXT * v) { phaserGL.VertexAttribL3i64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z) { phaserGL.VertexAttribL3ui64NV(index, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexAttribL3ui64vNV(GLuint index, const GLuint64EXT * v) { phaserGL.VertexAttribL3ui64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.VertexAttribL4d(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4dEXT(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.VertexAttribL4dEXT(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4dv(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL4dv(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4dvEXT(GLuint index, const GLdouble * v) { phaserGL.VertexAttribL4dvEXT(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4i64NV(GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w) { phaserGL.VertexAttribL4i64NV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4i64vNV(GLuint index, const GLint64EXT * v) { phaserGL.VertexAttribL4i64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4ui64NV(GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w) { phaserGL.VertexAttribL4ui64NV(index, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexAttribL4ui64vNV(GLuint index, const GLuint64EXT * v) { phaserGL.VertexAttribL4ui64vNV(index, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) { phaserGL.VertexAttribLFormat(attribindex, size, type, relativeoffset); }
PHASER_FORCE_INLINE void  phaserVertexAttribLFormatNV(GLuint index, GLint size, GLenum type, GLsizei stride) { phaserGL.VertexAttribLFormatNV(index, size, type, stride); }
PHASER_FORCE_INLINE void  phaserVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexAttribLPointer(index, size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribLPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexAttribLPointerEXT(index, size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { phaserGL.VertexAttribP1ui(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { phaserGL.VertexAttribP1uiv(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { phaserGL.VertexAttribP2ui(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { phaserGL.VertexAttribP2uiv(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { phaserGL.VertexAttribP3ui(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { phaserGL.VertexAttribP3uiv(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value) { phaserGL.VertexAttribP4ui(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint * value) { phaserGL.VertexAttribP4uiv(index, type, normalized, value); }
PHASER_FORCE_INLINE void  phaserVertexAttribParameteriAMD(GLuint index, GLenum pname, GLint param) { phaserGL.VertexAttribParameteriAMD(index, pname, param); }
PHASER_FORCE_INLINE void  phaserVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { phaserGL.VertexAttribPointer(index, size, type, normalized, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer) { phaserGL.VertexAttribPointerARB(index, size, type, normalized, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexAttribPointerNV(index, fsize, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexAttribs1dvNV(GLuint index, GLsizei count, const GLdouble * v) { phaserGL.VertexAttribs1dvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs1fvNV(GLuint index, GLsizei count, const GLfloat * v) { phaserGL.VertexAttribs1fvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs1hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { phaserGL.VertexAttribs1hvNV(index, n, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs1svNV(GLuint index, GLsizei count, const GLshort * v) { phaserGL.VertexAttribs1svNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs2dvNV(GLuint index, GLsizei count, const GLdouble * v) { phaserGL.VertexAttribs2dvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs2fvNV(GLuint index, GLsizei count, const GLfloat * v) { phaserGL.VertexAttribs2fvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs2hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { phaserGL.VertexAttribs2hvNV(index, n, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs2svNV(GLuint index, GLsizei count, const GLshort * v) { phaserGL.VertexAttribs2svNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs3dvNV(GLuint index, GLsizei count, const GLdouble * v) { phaserGL.VertexAttribs3dvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs3fvNV(GLuint index, GLsizei count, const GLfloat * v) { phaserGL.VertexAttribs3fvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs3hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { phaserGL.VertexAttribs3hvNV(index, n, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs3svNV(GLuint index, GLsizei count, const GLshort * v) { phaserGL.VertexAttribs3svNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs4dvNV(GLuint index, GLsizei count, const GLdouble * v) { phaserGL.VertexAttribs4dvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs4fvNV(GLuint index, GLsizei count, const GLfloat * v) { phaserGL.VertexAttribs4fvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs4hvNV(GLuint index, GLsizei n, const GLhalfNV * v) { phaserGL.VertexAttribs4hvNV(index, n, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs4svNV(GLuint index, GLsizei count, const GLshort * v) { phaserGL.VertexAttribs4svNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexAttribs4ubvNV(GLuint index, GLsizei count, const GLubyte * v) { phaserGL.VertexAttribs4ubvNV(index, count, v); }
PHASER_FORCE_INLINE void  phaserVertexBindingDivisor(GLuint bindingindex, GLuint divisor) { phaserGL.VertexBindingDivisor(bindingindex, divisor); }
PHASER_FORCE_INLINE void  phaserVertexBlendARB(GLint count) { phaserGL.VertexBlendARB(count); }
PHASER_FORCE_INLINE void  phaserVertexBlendEnvfATI(GLenum pname, GLfloat param) { phaserGL.VertexBlendEnvfATI(pname, param); }
PHASER_FORCE_INLINE void  phaserVertexBlendEnviATI(GLenum pname, GLint param) { phaserGL.VertexBlendEnviATI(pname, param); }
PHASER_FORCE_INLINE void  phaserVertexFormatNV(GLint size, GLenum type, GLsizei stride) { phaserGL.VertexFormatNV(size, type, stride); }
PHASER_FORCE_INLINE void  phaserVertexP2ui(GLenum type, GLuint value) { phaserGL.VertexP2ui(type, value); }
PHASER_FORCE_INLINE void  phaserVertexP2uiv(GLenum type, const GLuint * value) { phaserGL.VertexP2uiv(type, value); }
PHASER_FORCE_INLINE void  phaserVertexP3ui(GLenum type, GLuint value) { phaserGL.VertexP3ui(type, value); }
PHASER_FORCE_INLINE void  phaserVertexP3uiv(GLenum type, const GLuint * value) { phaserGL.VertexP3uiv(type, value); }
PHASER_FORCE_INLINE void  phaserVertexP4ui(GLenum type, GLuint value) { phaserGL.VertexP4ui(type, value); }
PHASER_FORCE_INLINE void  phaserVertexP4uiv(GLenum type, const GLuint * value) { phaserGL.VertexP4uiv(type, value); }
PHASER_FORCE_INLINE void  phaserVertexPointer(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexPointer(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer) { phaserGL.VertexPointerEXT(size, type, stride, count, pointer); }
PHASER_FORCE_INLINE void  phaserVertexPointerListIBM(GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride) { phaserGL.VertexPointerListIBM(size, type, stride, pointer, ptrstride); }
PHASER_FORCE_INLINE void  phaserVertexPointervINTEL(GLint size, GLenum type, const void ** pointer) { phaserGL.VertexPointervINTEL(size, type, pointer); }
PHASER_FORCE_INLINE void  phaserVertexStream1dATI(GLenum stream, GLdouble x) { phaserGL.VertexStream1dATI(stream, x); }
PHASER_FORCE_INLINE void  phaserVertexStream1dvATI(GLenum stream, const GLdouble * coords) { phaserGL.VertexStream1dvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream1fATI(GLenum stream, GLfloat x) { phaserGL.VertexStream1fATI(stream, x); }
PHASER_FORCE_INLINE void  phaserVertexStream1fvATI(GLenum stream, const GLfloat * coords) { phaserGL.VertexStream1fvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream1iATI(GLenum stream, GLint x) { phaserGL.VertexStream1iATI(stream, x); }
PHASER_FORCE_INLINE void  phaserVertexStream1ivATI(GLenum stream, const GLint * coords) { phaserGL.VertexStream1ivATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream1sATI(GLenum stream, GLshort x) { phaserGL.VertexStream1sATI(stream, x); }
PHASER_FORCE_INLINE void  phaserVertexStream1svATI(GLenum stream, const GLshort * coords) { phaserGL.VertexStream1svATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y) { phaserGL.VertexStream2dATI(stream, x, y); }
PHASER_FORCE_INLINE void  phaserVertexStream2dvATI(GLenum stream, const GLdouble * coords) { phaserGL.VertexStream2dvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y) { phaserGL.VertexStream2fATI(stream, x, y); }
PHASER_FORCE_INLINE void  phaserVertexStream2fvATI(GLenum stream, const GLfloat * coords) { phaserGL.VertexStream2fvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream2iATI(GLenum stream, GLint x, GLint y) { phaserGL.VertexStream2iATI(stream, x, y); }
PHASER_FORCE_INLINE void  phaserVertexStream2ivATI(GLenum stream, const GLint * coords) { phaserGL.VertexStream2ivATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream2sATI(GLenum stream, GLshort x, GLshort y) { phaserGL.VertexStream2sATI(stream, x, y); }
PHASER_FORCE_INLINE void  phaserVertexStream2svATI(GLenum stream, const GLshort * coords) { phaserGL.VertexStream2svATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z) { phaserGL.VertexStream3dATI(stream, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexStream3dvATI(GLenum stream, const GLdouble * coords) { phaserGL.VertexStream3dvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z) { phaserGL.VertexStream3fATI(stream, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexStream3fvATI(GLenum stream, const GLfloat * coords) { phaserGL.VertexStream3fvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z) { phaserGL.VertexStream3iATI(stream, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexStream3ivATI(GLenum stream, const GLint * coords) { phaserGL.VertexStream3ivATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z) { phaserGL.VertexStream3sATI(stream, x, y, z); }
PHASER_FORCE_INLINE void  phaserVertexStream3svATI(GLenum stream, const GLshort * coords) { phaserGL.VertexStream3svATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.VertexStream4dATI(stream, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexStream4dvATI(GLenum stream, const GLdouble * coords) { phaserGL.VertexStream4dvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.VertexStream4fATI(stream, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexStream4fvATI(GLenum stream, const GLfloat * coords) { phaserGL.VertexStream4fvATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w) { phaserGL.VertexStream4iATI(stream, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexStream4ivATI(GLenum stream, const GLint * coords) { phaserGL.VertexStream4ivATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.VertexStream4sATI(stream, x, y, z, w); }
PHASER_FORCE_INLINE void  phaserVertexStream4svATI(GLenum stream, const GLshort * coords) { phaserGL.VertexStream4svATI(stream, coords); }
PHASER_FORCE_INLINE void  phaserVertexWeightPointerEXT(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.VertexWeightPointerEXT(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserVertexWeightfEXT(GLfloat weight) { phaserGL.VertexWeightfEXT(weight); }
PHASER_FORCE_INLINE void  phaserVertexWeightfvEXT(const GLfloat * weight) { phaserGL.VertexWeightfvEXT(weight); }
PHASER_FORCE_INLINE void  phaserVertexWeighthNV(GLhalfNV weight) { phaserGL.VertexWeighthNV(weight); }
PHASER_FORCE_INLINE void  phaserVertexWeighthvNV(const GLhalfNV * weight) { phaserGL.VertexWeighthvNV(weight); }
PHASER_FORCE_INLINE GLenum phaserVideoCaptureNV(GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) { return phaserGL.VideoCaptureNV(video_capture_slot, sequence_num, capture_time); }
PHASER_FORCE_INLINE void  phaserVideoCaptureStreamParameterdvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params) { phaserGL.VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params); }
PHASER_FORCE_INLINE void  phaserVideoCaptureStreamParameterfvNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params) { phaserGL.VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params); }
PHASER_FORCE_INLINE void  phaserVideoCaptureStreamParameterivNV(GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params) { phaserGL.VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params); }
PHASER_FORCE_INLINE void  phaserViewport(GLint x, GLint y, GLsizei width, GLsizei height) { phaserGL.Viewport(x, y, width, height); }
PHASER_FORCE_INLINE void  phaserViewportArrayv(GLuint first, GLsizei count, const GLfloat * v) { phaserGL.ViewportArrayv(first, count, v); }
PHASER_FORCE_INLINE void  phaserViewportArrayvNV(GLuint first, GLsizei count, const GLfloat * v) { phaserGL.ViewportArrayvNV(first, count, v); }
PHASER_FORCE_INLINE void  phaserViewportArrayvOES(GLuint first, GLsizei count, const GLfloat * v) { phaserGL.ViewportArrayvOES(first, count, v); }
PHASER_FORCE_INLINE void  phaserViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { phaserGL.ViewportIndexedf(index, x, y, w, h); }
PHASER_FORCE_INLINE void  phaserViewportIndexedfNV(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { phaserGL.ViewportIndexedfNV(index, x, y, w, h); }
PHASER_FORCE_INLINE void  phaserViewportIndexedfOES(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h) { phaserGL.ViewportIndexedfOES(index, x, y, w, h); }
PHASER_FORCE_INLINE void  phaserViewportIndexedfv(GLuint index, const GLfloat * v) { phaserGL.ViewportIndexedfv(index, v); }
PHASER_FORCE_INLINE void  phaserViewportIndexedfvNV(GLuint index, const GLfloat * v) { phaserGL.ViewportIndexedfvNV(index, v); }
PHASER_FORCE_INLINE void  phaserViewportIndexedfvOES(GLuint index, const GLfloat * v) { phaserGL.ViewportIndexedfvOES(index, v); }
PHASER_FORCE_INLINE void  phaserViewportPositionWScaleNV(GLuint index, GLfloat xcoeff, GLfloat ycoeff) { phaserGL.ViewportPositionWScaleNV(index, xcoeff, ycoeff); }
PHASER_FORCE_INLINE void  phaserViewportSwizzleNV(GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew) { phaserGL.ViewportSwizzleNV(index, swizzlex, swizzley, swizzlez, swizzlew); }
PHASER_FORCE_INLINE void  phaserWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint * buffers, GLuint numTextureBarriers, const GLuint * textures, const GLenum * srcLayouts) { phaserGL.WaitSemaphoreEXT(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, srcLayouts); }
PHASER_FORCE_INLINE void  phaserWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout) { phaserGL.WaitSync(sync, flags, timeout); }
PHASER_FORCE_INLINE void  phaserWaitSyncAPPLE(GLsync sync, GLbitfield flags, GLuint64 timeout) { phaserGL.WaitSyncAPPLE(sync, flags, timeout); }
PHASER_FORCE_INLINE void  phaserWaitVkSemaphoreNV(GLuint64 vkSemaphore) { phaserGL.WaitVkSemaphoreNV(vkSemaphore); }
PHASER_FORCE_INLINE void  phaserWeightPathsNV(GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights) { phaserGL.WeightPathsNV(resultPath, numPaths, paths, weights); }
PHASER_FORCE_INLINE void  phaserWeightPointerARB(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.WeightPointerARB(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserWeightPointerOES(GLint size, GLenum type, GLsizei stride, const void * pointer) { phaserGL.WeightPointerOES(size, type, stride, pointer); }
PHASER_FORCE_INLINE void  phaserWeightbvARB(GLint size, const GLbyte * weights) { phaserGL.WeightbvARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightdvARB(GLint size, const GLdouble * weights) { phaserGL.WeightdvARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightfvARB(GLint size, const GLfloat * weights) { phaserGL.WeightfvARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightivARB(GLint size, const GLint * weights) { phaserGL.WeightivARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightsvARB(GLint size, const GLshort * weights) { phaserGL.WeightsvARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightubvARB(GLint size, const GLubyte * weights) { phaserGL.WeightubvARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightuivARB(GLint size, const GLuint * weights) { phaserGL.WeightuivARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWeightusvARB(GLint size, const GLushort * weights) { phaserGL.WeightusvARB(size, weights); }
PHASER_FORCE_INLINE void  phaserWindowPos2d(GLdouble x, GLdouble y) { phaserGL.WindowPos2d(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2dARB(GLdouble x, GLdouble y) { phaserGL.WindowPos2dARB(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2dMESA(GLdouble x, GLdouble y) { phaserGL.WindowPos2dMESA(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2dv(const GLdouble * v) { phaserGL.WindowPos2dv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2dvARB(const GLdouble * v) { phaserGL.WindowPos2dvARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2dvMESA(const GLdouble * v) { phaserGL.WindowPos2dvMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2f(GLfloat x, GLfloat y) { phaserGL.WindowPos2f(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2fARB(GLfloat x, GLfloat y) { phaserGL.WindowPos2fARB(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2fMESA(GLfloat x, GLfloat y) { phaserGL.WindowPos2fMESA(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2fv(const GLfloat * v) { phaserGL.WindowPos2fv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2fvARB(const GLfloat * v) { phaserGL.WindowPos2fvARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2fvMESA(const GLfloat * v) { phaserGL.WindowPos2fvMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2i(GLint x, GLint y) { phaserGL.WindowPos2i(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2iARB(GLint x, GLint y) { phaserGL.WindowPos2iARB(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2iMESA(GLint x, GLint y) { phaserGL.WindowPos2iMESA(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2iv(const GLint * v) { phaserGL.WindowPos2iv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2ivARB(const GLint * v) { phaserGL.WindowPos2ivARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2ivMESA(const GLint * v) { phaserGL.WindowPos2ivMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2s(GLshort x, GLshort y) { phaserGL.WindowPos2s(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2sARB(GLshort x, GLshort y) { phaserGL.WindowPos2sARB(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2sMESA(GLshort x, GLshort y) { phaserGL.WindowPos2sMESA(x, y); }
PHASER_FORCE_INLINE void  phaserWindowPos2sv(const GLshort * v) { phaserGL.WindowPos2sv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2svARB(const GLshort * v) { phaserGL.WindowPos2svARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos2svMESA(const GLshort * v) { phaserGL.WindowPos2svMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3d(GLdouble x, GLdouble y, GLdouble z) { phaserGL.WindowPos3d(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z) { phaserGL.WindowPos3dARB(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z) { phaserGL.WindowPos3dMESA(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3dv(const GLdouble * v) { phaserGL.WindowPos3dv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3dvARB(const GLdouble * v) { phaserGL.WindowPos3dvARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3dvMESA(const GLdouble * v) { phaserGL.WindowPos3dvMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3f(GLfloat x, GLfloat y, GLfloat z) { phaserGL.WindowPos3f(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z) { phaserGL.WindowPos3fARB(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z) { phaserGL.WindowPos3fMESA(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3fv(const GLfloat * v) { phaserGL.WindowPos3fv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3fvARB(const GLfloat * v) { phaserGL.WindowPos3fvARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3fvMESA(const GLfloat * v) { phaserGL.WindowPos3fvMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3i(GLint x, GLint y, GLint z) { phaserGL.WindowPos3i(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3iARB(GLint x, GLint y, GLint z) { phaserGL.WindowPos3iARB(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3iMESA(GLint x, GLint y, GLint z) { phaserGL.WindowPos3iMESA(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3iv(const GLint * v) { phaserGL.WindowPos3iv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3ivARB(const GLint * v) { phaserGL.WindowPos3ivARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3ivMESA(const GLint * v) { phaserGL.WindowPos3ivMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3s(GLshort x, GLshort y, GLshort z) { phaserGL.WindowPos3s(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3sARB(GLshort x, GLshort y, GLshort z) { phaserGL.WindowPos3sARB(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3sMESA(GLshort x, GLshort y, GLshort z) { phaserGL.WindowPos3sMESA(x, y, z); }
PHASER_FORCE_INLINE void  phaserWindowPos3sv(const GLshort * v) { phaserGL.WindowPos3sv(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3svARB(const GLshort * v) { phaserGL.WindowPos3svARB(v); }
PHASER_FORCE_INLINE void  phaserWindowPos3svMESA(const GLshort * v) { phaserGL.WindowPos3svMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w) { phaserGL.WindowPos4dMESA(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserWindowPos4dvMESA(const GLdouble * v) { phaserGL.WindowPos4dvMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w) { phaserGL.WindowPos4fMESA(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserWindowPos4fvMESA(const GLfloat * v) { phaserGL.WindowPos4fvMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w) { phaserGL.WindowPos4iMESA(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserWindowPos4ivMESA(const GLint * v) { phaserGL.WindowPos4ivMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w) { phaserGL.WindowPos4sMESA(x, y, z, w); }
PHASER_FORCE_INLINE void  phaserWindowPos4svMESA(const GLshort * v) { phaserGL.WindowPos4svMESA(v); }
PHASER_FORCE_INLINE void  phaserWindowRectanglesEXT(GLenum mode, GLsizei count, const GLint * box) { phaserGL.WindowRectanglesEXT(mode, count, box); }
PHASER_FORCE_INLINE void  phaserWriteMaskEXT(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW) { phaserGL.WriteMaskEXT(res, in, outX, outY, outZ, outW); }


#define glAccum phaserAccum
#define glAccumxOES phaserAccumxOES
#define glAcquireKeyedMutexWin32EXT phaserAcquireKeyedMutexWin32EXT
#define glActiveProgramEXT phaserActiveProgramEXT
#define glActiveShaderProgram phaserActiveShaderProgram
#define glActiveShaderProgramEXT phaserActiveShaderProgramEXT
#define glActiveStencilFaceEXT phaserActiveStencilFaceEXT
#define glActiveTexture phaserActiveTexture
#define glActiveTextureARB phaserActiveTextureARB
#define glActiveVaryingNV phaserActiveVaryingNV
#define glAlphaFragmentOp1ATI phaserAlphaFragmentOp1ATI
#define glAlphaFragmentOp2ATI phaserAlphaFragmentOp2ATI
#define glAlphaFragmentOp3ATI phaserAlphaFragmentOp3ATI
#define glAlphaFunc phaserAlphaFunc
#define glAlphaFuncQCOM phaserAlphaFuncQCOM
#define glAlphaFuncx phaserAlphaFuncx
#define glAlphaFuncxOES phaserAlphaFuncxOES
#define glAlphaToCoverageDitherControlNV phaserAlphaToCoverageDitherControlNV
#define glApplyFramebufferAttachmentCMAAINTEL phaserApplyFramebufferAttachmentCMAAINTEL
#define glApplyTextureEXT phaserApplyTextureEXT
#define glAreProgramsResidentNV phaserAreProgramsResidentNV
#define glAreTexturesResident phaserAreTexturesResident
#define glAreTexturesResidentEXT phaserAreTexturesResidentEXT
#define glArrayElement phaserArrayElement
#define glArrayElementEXT phaserArrayElementEXT
#define glArrayObjectATI phaserArrayObjectATI
#define glAsyncMarkerSGIX phaserAsyncMarkerSGIX
#define glAttachObjectARB phaserAttachObjectARB
#define glAttachShader phaserAttachShader
#define glBegin phaserBegin
#define glBeginConditionalRender phaserBeginConditionalRender
#define glBeginConditionalRenderNV phaserBeginConditionalRenderNV
#define glBeginConditionalRenderNVX phaserBeginConditionalRenderNVX
#define glBeginFragmentShaderATI phaserBeginFragmentShaderATI
#define glBeginOcclusionQueryNV phaserBeginOcclusionQueryNV
#define glBeginPerfMonitorAMD phaserBeginPerfMonitorAMD
#define glBeginPerfQueryINTEL phaserBeginPerfQueryINTEL
#define glBeginQuery phaserBeginQuery
#define glBeginQueryARB phaserBeginQueryARB
#define glBeginQueryEXT phaserBeginQueryEXT
#define glBeginQueryIndexed phaserBeginQueryIndexed
#define glBeginTransformFeedback phaserBeginTransformFeedback
#define glBeginTransformFeedbackEXT phaserBeginTransformFeedbackEXT
#define glBeginTransformFeedbackNV phaserBeginTransformFeedbackNV
#define glBeginVertexShaderEXT phaserBeginVertexShaderEXT
#define glBeginVideoCaptureNV phaserBeginVideoCaptureNV
#define glBindAttribLocation phaserBindAttribLocation
#define glBindAttribLocationARB phaserBindAttribLocationARB
#define glBindBuffer phaserBindBuffer
#define glBindBufferARB phaserBindBufferARB
#define glBindBufferBase phaserBindBufferBase
#define glBindBufferBaseEXT phaserBindBufferBaseEXT
#define glBindBufferBaseNV phaserBindBufferBaseNV
#define glBindBufferOffsetEXT phaserBindBufferOffsetEXT
#define glBindBufferOffsetNV phaserBindBufferOffsetNV
#define glBindBufferRange phaserBindBufferRange
#define glBindBufferRangeEXT phaserBindBufferRangeEXT
#define glBindBufferRangeNV phaserBindBufferRangeNV
#define glBindBuffersBase phaserBindBuffersBase
#define glBindBuffersRange phaserBindBuffersRange
#define glBindFragDataLocation phaserBindFragDataLocation
#define glBindFragDataLocationEXT phaserBindFragDataLocationEXT
#define glBindFragDataLocationIndexed phaserBindFragDataLocationIndexed
#define glBindFragDataLocationIndexedEXT phaserBindFragDataLocationIndexedEXT
#define glBindFragmentShaderATI phaserBindFragmentShaderATI
#define glBindFramebuffer phaserBindFramebuffer
#define glBindFramebufferEXT phaserBindFramebufferEXT
#define glBindFramebufferOES phaserBindFramebufferOES
#define glBindImageTexture phaserBindImageTexture
#define glBindImageTextureEXT phaserBindImageTextureEXT
#define glBindImageTextures phaserBindImageTextures
#define glBindLightParameterEXT phaserBindLightParameterEXT
#define glBindMaterialParameterEXT phaserBindMaterialParameterEXT
#define glBindMultiTextureEXT phaserBindMultiTextureEXT
#define glBindParameterEXT phaserBindParameterEXT
#define glBindProgramARB phaserBindProgramARB
#define glBindProgramNV phaserBindProgramNV
#define glBindProgramPipeline phaserBindProgramPipeline
#define glBindProgramPipelineEXT phaserBindProgramPipelineEXT
#define glBindRenderbuffer phaserBindRenderbuffer
#define glBindRenderbufferEXT phaserBindRenderbufferEXT
#define glBindRenderbufferOES phaserBindRenderbufferOES
#define glBindSampler phaserBindSampler
#define glBindSamplers phaserBindSamplers
#define glBindTexGenParameterEXT phaserBindTexGenParameterEXT
#define glBindTexture phaserBindTexture
#define glBindTextureEXT phaserBindTextureEXT
#define glBindTextureUnit phaserBindTextureUnit
#define glBindTextureUnitParameterEXT phaserBindTextureUnitParameterEXT
#define glBindTextures phaserBindTextures
#define glBindTransformFeedback phaserBindTransformFeedback
#define glBindTransformFeedbackNV phaserBindTransformFeedbackNV
#define glBindVertexArray phaserBindVertexArray
#define glBindVertexArrayAPPLE phaserBindVertexArrayAPPLE
#define glBindVertexArrayOES phaserBindVertexArrayOES
#define glBindVertexBuffer phaserBindVertexBuffer
#define glBindVertexBuffers phaserBindVertexBuffers
#define glBindVertexShaderEXT phaserBindVertexShaderEXT
#define glBindVideoCaptureStreamBufferNV phaserBindVideoCaptureStreamBufferNV
#define glBindVideoCaptureStreamTextureNV phaserBindVideoCaptureStreamTextureNV
#define glBinormal3bEXT phaserBinormal3bEXT
#define glBinormal3bvEXT phaserBinormal3bvEXT
#define glBinormal3dEXT phaserBinormal3dEXT
#define glBinormal3dvEXT phaserBinormal3dvEXT
#define glBinormal3fEXT phaserBinormal3fEXT
#define glBinormal3fvEXT phaserBinormal3fvEXT
#define glBinormal3iEXT phaserBinormal3iEXT
#define glBinormal3ivEXT phaserBinormal3ivEXT
#define glBinormal3sEXT phaserBinormal3sEXT
#define glBinormal3svEXT phaserBinormal3svEXT
#define glBinormalPointerEXT phaserBinormalPointerEXT
#define glBitmap phaserBitmap
#define glBitmapxOES phaserBitmapxOES
#define glBlendBarrier phaserBlendBarrier
#define glBlendBarrierKHR phaserBlendBarrierKHR
#define glBlendBarrierNV phaserBlendBarrierNV
#define glBlendColor phaserBlendColor
#define glBlendColorEXT phaserBlendColorEXT
#define glBlendColorxOES phaserBlendColorxOES
#define glBlendEquation phaserBlendEquation
#define glBlendEquationEXT phaserBlendEquationEXT
#define glBlendEquationIndexedAMD phaserBlendEquationIndexedAMD
#define glBlendEquationOES phaserBlendEquationOES
#define glBlendEquationSeparate phaserBlendEquationSeparate
#define glBlendEquationSeparateEXT phaserBlendEquationSeparateEXT
#define glBlendEquationSeparateIndexedAMD phaserBlendEquationSeparateIndexedAMD
#define glBlendEquationSeparateOES phaserBlendEquationSeparateOES
#define glBlendEquationSeparatei phaserBlendEquationSeparatei
#define glBlendEquationSeparateiARB phaserBlendEquationSeparateiARB
#define glBlendEquationSeparateiEXT phaserBlendEquationSeparateiEXT
#define glBlendEquationSeparateiOES phaserBlendEquationSeparateiOES
#define glBlendEquationi phaserBlendEquationi
#define glBlendEquationiARB phaserBlendEquationiARB
#define glBlendEquationiEXT phaserBlendEquationiEXT
#define glBlendEquationiOES phaserBlendEquationiOES
#define glBlendFunc phaserBlendFunc
#define glBlendFuncIndexedAMD phaserBlendFuncIndexedAMD
#define glBlendFuncSeparate phaserBlendFuncSeparate
#define glBlendFuncSeparateEXT phaserBlendFuncSeparateEXT
#define glBlendFuncSeparateINGR phaserBlendFuncSeparateINGR
#define glBlendFuncSeparateIndexedAMD phaserBlendFuncSeparateIndexedAMD
#define glBlendFuncSeparateOES phaserBlendFuncSeparateOES
#define glBlendFuncSeparatei phaserBlendFuncSeparatei
#define glBlendFuncSeparateiARB phaserBlendFuncSeparateiARB
#define glBlendFuncSeparateiEXT phaserBlendFuncSeparateiEXT
#define glBlendFuncSeparateiOES phaserBlendFuncSeparateiOES
#define glBlendFunci phaserBlendFunci
#define glBlendFunciARB phaserBlendFunciARB
#define glBlendFunciEXT phaserBlendFunciEXT
#define glBlendFunciOES phaserBlendFunciOES
#define glBlendParameteriNV phaserBlendParameteriNV
#define glBlitFramebuffer phaserBlitFramebuffer
#define glBlitFramebufferANGLE phaserBlitFramebufferANGLE
#define glBlitFramebufferEXT phaserBlitFramebufferEXT
#define glBlitFramebufferNV phaserBlitFramebufferNV
#define glBlitNamedFramebuffer phaserBlitNamedFramebuffer
#define glBufferAddressRangeNV phaserBufferAddressRangeNV
#define glBufferData phaserBufferData
#define glBufferDataARB phaserBufferDataARB
#define glBufferPageCommitmentARB phaserBufferPageCommitmentARB
#define glBufferParameteriAPPLE phaserBufferParameteriAPPLE
#define glBufferRegionEnabled phaserBufferRegionEnabled
#define glBufferStorage phaserBufferStorage
#define glBufferStorageEXT phaserBufferStorageEXT
#define glBufferStorageExternalEXT phaserBufferStorageExternalEXT
#define glBufferStorageMemEXT phaserBufferStorageMemEXT
#define glBufferSubData phaserBufferSubData
#define glBufferSubDataARB phaserBufferSubDataARB
#define glCallCommandListNV phaserCallCommandListNV
#define glCallList phaserCallList
#define glCallLists phaserCallLists
#define glCheckFramebufferStatus phaserCheckFramebufferStatus
#define glCheckFramebufferStatusEXT phaserCheckFramebufferStatusEXT
#define glCheckFramebufferStatusOES phaserCheckFramebufferStatusOES
#define glCheckNamedFramebufferStatus phaserCheckNamedFramebufferStatus
#define glCheckNamedFramebufferStatusEXT phaserCheckNamedFramebufferStatusEXT
#define glClampColor phaserClampColor
#define glClampColorARB phaserClampColorARB
#define glClear phaserClear
#define glClearAccum phaserClearAccum
#define glClearAccumxOES phaserClearAccumxOES
#define glClearBufferData phaserClearBufferData
#define glClearBufferSubData phaserClearBufferSubData
#define glClearBufferfi phaserClearBufferfi
#define glClearBufferfv phaserClearBufferfv
#define glClearBufferiv phaserClearBufferiv
#define glClearBufferuiv phaserClearBufferuiv
#define glClearColor phaserClearColor
#define glClearColorIiEXT phaserClearColorIiEXT
#define glClearColorIuiEXT phaserClearColorIuiEXT
#define glClearColorx phaserClearColorx
#define glClearColorxOES phaserClearColorxOES
#define glClearDepth phaserClearDepth
#define glClearDepthdNV phaserClearDepthdNV
#define glClearDepthf phaserClearDepthf
#define glClearDepthfOES phaserClearDepthfOES
#define glClearDepthx phaserClearDepthx
#define glClearDepthxOES phaserClearDepthxOES
#define glClearIndex phaserClearIndex
#define glClearNamedBufferData phaserClearNamedBufferData
#define glClearNamedBufferDataEXT phaserClearNamedBufferDataEXT
#define glClearNamedBufferSubData phaserClearNamedBufferSubData
#define glClearNamedBufferSubDataEXT phaserClearNamedBufferSubDataEXT
#define glClearNamedFramebufferfi phaserClearNamedFramebufferfi
#define glClearNamedFramebufferfv phaserClearNamedFramebufferfv
#define glClearNamedFramebufferiv phaserClearNamedFramebufferiv
#define glClearNamedFramebufferuiv phaserClearNamedFramebufferuiv
#define glClearPixelLocalStorageuiEXT phaserClearPixelLocalStorageuiEXT
#define glClearStencil phaserClearStencil
#define glClearTexImage phaserClearTexImage
#define glClearTexImageEXT phaserClearTexImageEXT
#define glClearTexSubImage phaserClearTexSubImage
#define glClearTexSubImageEXT phaserClearTexSubImageEXT
#define glClientActiveTexture phaserClientActiveTexture
#define glClientActiveTextureARB phaserClientActiveTextureARB
#define glClientActiveVertexStreamATI phaserClientActiveVertexStreamATI
#define glClientAttribDefaultEXT phaserClientAttribDefaultEXT
#define glClientWaitSync phaserClientWaitSync
#define glClientWaitSyncAPPLE phaserClientWaitSyncAPPLE
#define glClipControl phaserClipControl
#define glClipControlEXT phaserClipControlEXT
#define glClipPlane phaserClipPlane
#define glClipPlanef phaserClipPlanef
#define glClipPlanefIMG phaserClipPlanefIMG
#define glClipPlanefOES phaserClipPlanefOES
#define glClipPlanex phaserClipPlanex
#define glClipPlanexIMG phaserClipPlanexIMG
#define glClipPlanexOES phaserClipPlanexOES
#define glColor3b phaserColor3b
#define glColor3bv phaserColor3bv
#define glColor3d phaserColor3d
#define glColor3dv phaserColor3dv
#define glColor3f phaserColor3f
#define glColor3fVertex3fSUN phaserColor3fVertex3fSUN
#define glColor3fVertex3fvSUN phaserColor3fVertex3fvSUN
#define glColor3fv phaserColor3fv
#define glColor3hNV phaserColor3hNV
#define glColor3hvNV phaserColor3hvNV
#define glColor3i phaserColor3i
#define glColor3iv phaserColor3iv
#define glColor3s phaserColor3s
#define glColor3sv phaserColor3sv
#define glColor3ub phaserColor3ub
#define glColor3ubv phaserColor3ubv
#define glColor3ui phaserColor3ui
#define glColor3uiv phaserColor3uiv
#define glColor3us phaserColor3us
#define glColor3usv phaserColor3usv
#define glColor3xOES phaserColor3xOES
#define glColor3xvOES phaserColor3xvOES
#define glColor4b phaserColor4b
#define glColor4bv phaserColor4bv
#define glColor4d phaserColor4d
#define glColor4dv phaserColor4dv
#define glColor4f phaserColor4f
#define glColor4fNormal3fVertex3fSUN phaserColor4fNormal3fVertex3fSUN
#define glColor4fNormal3fVertex3fvSUN phaserColor4fNormal3fVertex3fvSUN
#define glColor4fv phaserColor4fv
#define glColor4hNV phaserColor4hNV
#define glColor4hvNV phaserColor4hvNV
#define glColor4i phaserColor4i
#define glColor4iv phaserColor4iv
#define glColor4s phaserColor4s
#define glColor4sv phaserColor4sv
#define glColor4ub phaserColor4ub
#define glColor4ubVertex2fSUN phaserColor4ubVertex2fSUN
#define glColor4ubVertex2fvSUN phaserColor4ubVertex2fvSUN
#define glColor4ubVertex3fSUN phaserColor4ubVertex3fSUN
#define glColor4ubVertex3fvSUN phaserColor4ubVertex3fvSUN
#define glColor4ubv phaserColor4ubv
#define glColor4ui phaserColor4ui
#define glColor4uiv phaserColor4uiv
#define glColor4us phaserColor4us
#define glColor4usv phaserColor4usv
#define glColor4x phaserColor4x
#define glColor4xOES phaserColor4xOES
#define glColor4xvOES phaserColor4xvOES
#define glColorFormatNV phaserColorFormatNV
#define glColorFragmentOp1ATI phaserColorFragmentOp1ATI
#define glColorFragmentOp2ATI phaserColorFragmentOp2ATI
#define glColorFragmentOp3ATI phaserColorFragmentOp3ATI
#define glColorMask phaserColorMask
#define glColorMaskIndexedEXT phaserColorMaskIndexedEXT
#define glColorMaski phaserColorMaski
#define glColorMaskiEXT phaserColorMaskiEXT
#define glColorMaskiOES phaserColorMaskiOES
#define glColorMaterial phaserColorMaterial
#define glColorP3ui phaserColorP3ui
#define glColorP3uiv phaserColorP3uiv
#define glColorP4ui phaserColorP4ui
#define glColorP4uiv phaserColorP4uiv
#define glColorPointer phaserColorPointer
#define glColorPointerEXT phaserColorPointerEXT
#define glColorPointerListIBM phaserColorPointerListIBM
#define glColorPointervINTEL phaserColorPointervINTEL
#define glColorSubTable phaserColorSubTable
#define glColorSubTableEXT phaserColorSubTableEXT
#define glColorTable phaserColorTable
#define glColorTableEXT phaserColorTableEXT
#define glColorTableParameterfv phaserColorTableParameterfv
#define glColorTableParameterfvSGI phaserColorTableParameterfvSGI
#define glColorTableParameteriv phaserColorTableParameteriv
#define glColorTableParameterivSGI phaserColorTableParameterivSGI
#define glColorTableSGI phaserColorTableSGI
#define glCombinerInputNV phaserCombinerInputNV
#define glCombinerOutputNV phaserCombinerOutputNV
#define glCombinerParameterfNV phaserCombinerParameterfNV
#define glCombinerParameterfvNV phaserCombinerParameterfvNV
#define glCombinerParameteriNV phaserCombinerParameteriNV
#define glCombinerParameterivNV phaserCombinerParameterivNV
#define glCombinerStageParameterfvNV phaserCombinerStageParameterfvNV
#define glCommandListSegmentsNV phaserCommandListSegmentsNV
#define glCompileCommandListNV phaserCompileCommandListNV
#define glCompileShader phaserCompileShader
#define glCompileShaderARB phaserCompileShaderARB
#define glCompileShaderIncludeARB phaserCompileShaderIncludeARB
#define glCompressedMultiTexImage1DEXT phaserCompressedMultiTexImage1DEXT
#define glCompressedMultiTexImage2DEXT phaserCompressedMultiTexImage2DEXT
#define glCompressedMultiTexImage3DEXT phaserCompressedMultiTexImage3DEXT
#define glCompressedMultiTexSubImage1DEXT phaserCompressedMultiTexSubImage1DEXT
#define glCompressedMultiTexSubImage2DEXT phaserCompressedMultiTexSubImage2DEXT
#define glCompressedMultiTexSubImage3DEXT phaserCompressedMultiTexSubImage3DEXT
#define glCompressedTexImage1D phaserCompressedTexImage1D
#define glCompressedTexImage1DARB phaserCompressedTexImage1DARB
#define glCompressedTexImage2D phaserCompressedTexImage2D
#define glCompressedTexImage2DARB phaserCompressedTexImage2DARB
#define glCompressedTexImage3D phaserCompressedTexImage3D
#define glCompressedTexImage3DARB phaserCompressedTexImage3DARB
#define glCompressedTexImage3DOES phaserCompressedTexImage3DOES
#define glCompressedTexSubImage1D phaserCompressedTexSubImage1D
#define glCompressedTexSubImage1DARB phaserCompressedTexSubImage1DARB
#define glCompressedTexSubImage2D phaserCompressedTexSubImage2D
#define glCompressedTexSubImage2DARB phaserCompressedTexSubImage2DARB
#define glCompressedTexSubImage3D phaserCompressedTexSubImage3D
#define glCompressedTexSubImage3DARB phaserCompressedTexSubImage3DARB
#define glCompressedTexSubImage3DOES phaserCompressedTexSubImage3DOES
#define glCompressedTextureImage1DEXT phaserCompressedTextureImage1DEXT
#define glCompressedTextureImage2DEXT phaserCompressedTextureImage2DEXT
#define glCompressedTextureImage3DEXT phaserCompressedTextureImage3DEXT
#define glCompressedTextureSubImage1D phaserCompressedTextureSubImage1D
#define glCompressedTextureSubImage1DEXT phaserCompressedTextureSubImage1DEXT
#define glCompressedTextureSubImage2D phaserCompressedTextureSubImage2D
#define glCompressedTextureSubImage2DEXT phaserCompressedTextureSubImage2DEXT
#define glCompressedTextureSubImage3D phaserCompressedTextureSubImage3D
#define glCompressedTextureSubImage3DEXT phaserCompressedTextureSubImage3DEXT
#define glConservativeRasterParameterfNV phaserConservativeRasterParameterfNV
#define glConservativeRasterParameteriNV phaserConservativeRasterParameteriNV
#define glConvolutionFilter1D phaserConvolutionFilter1D
#define glConvolutionFilter1DEXT phaserConvolutionFilter1DEXT
#define glConvolutionFilter2D phaserConvolutionFilter2D
#define glConvolutionFilter2DEXT phaserConvolutionFilter2DEXT
#define glConvolutionParameterf phaserConvolutionParameterf
#define glConvolutionParameterfEXT phaserConvolutionParameterfEXT
#define glConvolutionParameterfv phaserConvolutionParameterfv
#define glConvolutionParameterfvEXT phaserConvolutionParameterfvEXT
#define glConvolutionParameteri phaserConvolutionParameteri
#define glConvolutionParameteriEXT phaserConvolutionParameteriEXT
#define glConvolutionParameteriv phaserConvolutionParameteriv
#define glConvolutionParameterivEXT phaserConvolutionParameterivEXT
#define glConvolutionParameterxOES phaserConvolutionParameterxOES
#define glConvolutionParameterxvOES phaserConvolutionParameterxvOES
#define glCopyBufferSubData phaserCopyBufferSubData
#define glCopyBufferSubDataNV phaserCopyBufferSubDataNV
#define glCopyColorSubTable phaserCopyColorSubTable
#define glCopyColorSubTableEXT phaserCopyColorSubTableEXT
#define glCopyColorTable phaserCopyColorTable
#define glCopyColorTableSGI phaserCopyColorTableSGI
#define glCopyConvolutionFilter1D phaserCopyConvolutionFilter1D
#define glCopyConvolutionFilter1DEXT phaserCopyConvolutionFilter1DEXT
#define glCopyConvolutionFilter2D phaserCopyConvolutionFilter2D
#define glCopyConvolutionFilter2DEXT phaserCopyConvolutionFilter2DEXT
#define glCopyImageSubData phaserCopyImageSubData
#define glCopyImageSubDataEXT phaserCopyImageSubDataEXT
#define glCopyImageSubDataNV phaserCopyImageSubDataNV
#define glCopyImageSubDataOES phaserCopyImageSubDataOES
#define glCopyMultiTexImage1DEXT phaserCopyMultiTexImage1DEXT
#define glCopyMultiTexImage2DEXT phaserCopyMultiTexImage2DEXT
#define glCopyMultiTexSubImage1DEXT phaserCopyMultiTexSubImage1DEXT
#define glCopyMultiTexSubImage2DEXT phaserCopyMultiTexSubImage2DEXT
#define glCopyMultiTexSubImage3DEXT phaserCopyMultiTexSubImage3DEXT
#define glCopyNamedBufferSubData phaserCopyNamedBufferSubData
#define glCopyPathNV phaserCopyPathNV
#define glCopyPixels phaserCopyPixels
#define glCopyTexImage1D phaserCopyTexImage1D
#define glCopyTexImage1DEXT phaserCopyTexImage1DEXT
#define glCopyTexImage2D phaserCopyTexImage2D
#define glCopyTexImage2DEXT phaserCopyTexImage2DEXT
#define glCopyTexSubImage1D phaserCopyTexSubImage1D
#define glCopyTexSubImage1DEXT phaserCopyTexSubImage1DEXT
#define glCopyTexSubImage2D phaserCopyTexSubImage2D
#define glCopyTexSubImage2DEXT phaserCopyTexSubImage2DEXT
#define glCopyTexSubImage3D phaserCopyTexSubImage3D
#define glCopyTexSubImage3DEXT phaserCopyTexSubImage3DEXT
#define glCopyTexSubImage3DOES phaserCopyTexSubImage3DOES
#define glCopyTextureImage1DEXT phaserCopyTextureImage1DEXT
#define glCopyTextureImage2DEXT phaserCopyTextureImage2DEXT
#define glCopyTextureLevelsAPPLE phaserCopyTextureLevelsAPPLE
#define glCopyTextureSubImage1D phaserCopyTextureSubImage1D
#define glCopyTextureSubImage1DEXT phaserCopyTextureSubImage1DEXT
#define glCopyTextureSubImage2D phaserCopyTextureSubImage2D
#define glCopyTextureSubImage2DEXT phaserCopyTextureSubImage2DEXT
#define glCopyTextureSubImage3D phaserCopyTextureSubImage3D
#define glCopyTextureSubImage3DEXT phaserCopyTextureSubImage3DEXT
#define glCoverFillPathInstancedNV phaserCoverFillPathInstancedNV
#define glCoverFillPathNV phaserCoverFillPathNV
#define glCoverStrokePathInstancedNV phaserCoverStrokePathInstancedNV
#define glCoverStrokePathNV phaserCoverStrokePathNV
#define glCoverageMaskNV phaserCoverageMaskNV
#define glCoverageModulationNV phaserCoverageModulationNV
#define glCoverageModulationTableNV phaserCoverageModulationTableNV
#define glCoverageOperationNV phaserCoverageOperationNV
#define glCreateBuffers phaserCreateBuffers
#define glCreateCommandListsNV phaserCreateCommandListsNV
#define glCreateFramebuffers phaserCreateFramebuffers
#define glCreateMemoryObjectsEXT phaserCreateMemoryObjectsEXT
#define glCreatePerfQueryINTEL phaserCreatePerfQueryINTEL
#define glCreateProgram phaserCreateProgram
#define glCreateProgramObjectARB phaserCreateProgramObjectARB
#define glCreateProgramPipelines phaserCreateProgramPipelines
#define glCreateQueries phaserCreateQueries
#define glCreateRenderbuffers phaserCreateRenderbuffers
#define glCreateSamplers phaserCreateSamplers
#define glCreateShader phaserCreateShader
#define glCreateShaderObjectARB phaserCreateShaderObjectARB
#define glCreateShaderProgramEXT phaserCreateShaderProgramEXT
#define glCreateShaderProgramv phaserCreateShaderProgramv
#define glCreateShaderProgramvEXT phaserCreateShaderProgramvEXT
#define glCreateStatesNV phaserCreateStatesNV
#define glCreateSyncFromCLeventARB phaserCreateSyncFromCLeventARB
#define glCreateTextures phaserCreateTextures
#define glCreateTransformFeedbacks phaserCreateTransformFeedbacks
#define glCreateVertexArrays phaserCreateVertexArrays
#define glCullFace phaserCullFace
#define glCullParameterdvEXT phaserCullParameterdvEXT
#define glCullParameterfvEXT phaserCullParameterfvEXT
#define glCurrentPaletteMatrixARB phaserCurrentPaletteMatrixARB
#define glCurrentPaletteMatrixOES phaserCurrentPaletteMatrixOES
#define glDebugMessageCallback phaserDebugMessageCallback
#define glDebugMessageCallbackAMD phaserDebugMessageCallbackAMD
#define glDebugMessageCallbackARB phaserDebugMessageCallbackARB
#define glDebugMessageCallbackKHR phaserDebugMessageCallbackKHR
#define glDebugMessageControl phaserDebugMessageControl
#define glDebugMessageControlARB phaserDebugMessageControlARB
#define glDebugMessageControlKHR phaserDebugMessageControlKHR
#define glDebugMessageEnableAMD phaserDebugMessageEnableAMD
#define glDebugMessageInsert phaserDebugMessageInsert
#define glDebugMessageInsertAMD phaserDebugMessageInsertAMD
#define glDebugMessageInsertARB phaserDebugMessageInsertARB
#define glDebugMessageInsertKHR phaserDebugMessageInsertKHR
#define glDeformSGIX phaserDeformSGIX
#define glDeformationMap3dSGIX phaserDeformationMap3dSGIX
#define glDeformationMap3fSGIX phaserDeformationMap3fSGIX
#define glDeleteAsyncMarkersSGIX phaserDeleteAsyncMarkersSGIX
#define glDeleteBufferRegion phaserDeleteBufferRegion
#define glDeleteBuffers phaserDeleteBuffers
#define glDeleteBuffersARB phaserDeleteBuffersARB
#define glDeleteCommandListsNV phaserDeleteCommandListsNV
#define glDeleteFencesAPPLE phaserDeleteFencesAPPLE
#define glDeleteFencesNV phaserDeleteFencesNV
#define glDeleteFragmentShaderATI phaserDeleteFragmentShaderATI
#define glDeleteFramebuffers phaserDeleteFramebuffers
#define glDeleteFramebuffersEXT phaserDeleteFramebuffersEXT
#define glDeleteFramebuffersOES phaserDeleteFramebuffersOES
#define glDeleteLists phaserDeleteLists
#define glDeleteMemoryObjectsEXT phaserDeleteMemoryObjectsEXT
#define glDeleteNamedStringARB phaserDeleteNamedStringARB
#define glDeleteNamesAMD phaserDeleteNamesAMD
#define glDeleteObjectARB phaserDeleteObjectARB
#define glDeleteOcclusionQueriesNV phaserDeleteOcclusionQueriesNV
#define glDeletePathsNV phaserDeletePathsNV
#define glDeletePerfMonitorsAMD phaserDeletePerfMonitorsAMD
#define glDeletePerfQueryINTEL phaserDeletePerfQueryINTEL
#define glDeleteProgram phaserDeleteProgram
#define glDeleteProgramPipelines phaserDeleteProgramPipelines
#define glDeleteProgramPipelinesEXT phaserDeleteProgramPipelinesEXT
#define glDeleteProgramsARB phaserDeleteProgramsARB
#define glDeleteProgramsNV phaserDeleteProgramsNV
#define glDeleteQueries phaserDeleteQueries
#define glDeleteQueriesARB phaserDeleteQueriesARB
#define glDeleteQueriesEXT phaserDeleteQueriesEXT
#define glDeleteQueryResourceTagNV phaserDeleteQueryResourceTagNV
#define glDeleteRenderbuffers phaserDeleteRenderbuffers
#define glDeleteRenderbuffersEXT phaserDeleteRenderbuffersEXT
#define glDeleteRenderbuffersOES phaserDeleteRenderbuffersOES
#define glDeleteSamplers phaserDeleteSamplers
#define glDeleteSemaphoresEXT phaserDeleteSemaphoresEXT
#define glDeleteShader phaserDeleteShader
#define glDeleteStatesNV phaserDeleteStatesNV
#define glDeleteSync phaserDeleteSync
#define glDeleteSyncAPPLE phaserDeleteSyncAPPLE
#define glDeleteTextures phaserDeleteTextures
#define glDeleteTexturesEXT phaserDeleteTexturesEXT
#define glDeleteTransformFeedbacks phaserDeleteTransformFeedbacks
#define glDeleteTransformFeedbacksNV phaserDeleteTransformFeedbacksNV
#define glDeleteVertexArrays phaserDeleteVertexArrays
#define glDeleteVertexArraysAPPLE phaserDeleteVertexArraysAPPLE
#define glDeleteVertexArraysOES phaserDeleteVertexArraysOES
#define glDeleteVertexShaderEXT phaserDeleteVertexShaderEXT
#define glDepthBoundsEXT phaserDepthBoundsEXT
#define glDepthBoundsdNV phaserDepthBoundsdNV
#define glDepthFunc phaserDepthFunc
#define glDepthMask phaserDepthMask
#define glDepthRange phaserDepthRange
#define glDepthRangeArrayfvNV phaserDepthRangeArrayfvNV
#define glDepthRangeArrayfvOES phaserDepthRangeArrayfvOES
#define glDepthRangeArrayv phaserDepthRangeArrayv
#define glDepthRangeIndexed phaserDepthRangeIndexed
#define glDepthRangeIndexedfNV phaserDepthRangeIndexedfNV
#define glDepthRangeIndexedfOES phaserDepthRangeIndexedfOES
#define glDepthRangedNV phaserDepthRangedNV
#define glDepthRangef phaserDepthRangef
#define glDepthRangefOES phaserDepthRangefOES
#define glDepthRangex phaserDepthRangex
#define glDepthRangexOES phaserDepthRangexOES
#define glDetachObjectARB phaserDetachObjectARB
#define glDetachShader phaserDetachShader
#define glDetailTexFuncSGIS phaserDetailTexFuncSGIS
#define glDisable phaserDisable
#define glDisableClientState phaserDisableClientState
#define glDisableClientStateIndexedEXT phaserDisableClientStateIndexedEXT
#define glDisableClientStateiEXT phaserDisableClientStateiEXT
#define glDisableDriverControlQCOM phaserDisableDriverControlQCOM
#define glDisableIndexedEXT phaserDisableIndexedEXT
#define glDisableVariantClientStateEXT phaserDisableVariantClientStateEXT
#define glDisableVertexArrayAttrib phaserDisableVertexArrayAttrib
#define glDisableVertexArrayAttribEXT phaserDisableVertexArrayAttribEXT
#define glDisableVertexArrayEXT phaserDisableVertexArrayEXT
#define glDisableVertexAttribAPPLE phaserDisableVertexAttribAPPLE
#define glDisableVertexAttribArray phaserDisableVertexAttribArray
#define glDisableVertexAttribArrayARB phaserDisableVertexAttribArrayARB
#define glDisablei phaserDisablei
#define glDisableiEXT phaserDisableiEXT
#define glDisableiNV phaserDisableiNV
#define glDisableiOES phaserDisableiOES
#define glDiscardFramebufferEXT phaserDiscardFramebufferEXT
#define glDispatchCompute phaserDispatchCompute
#define glDispatchComputeGroupSizeARB phaserDispatchComputeGroupSizeARB
#define glDispatchComputeIndirect phaserDispatchComputeIndirect
#define glDrawArrays phaserDrawArrays
#define glDrawArraysEXT phaserDrawArraysEXT
#define glDrawArraysIndirect phaserDrawArraysIndirect
#define glDrawArraysInstanced phaserDrawArraysInstanced
#define glDrawArraysInstancedANGLE phaserDrawArraysInstancedANGLE
#define glDrawArraysInstancedARB phaserDrawArraysInstancedARB
#define glDrawArraysInstancedBaseInstance phaserDrawArraysInstancedBaseInstance
#define glDrawArraysInstancedBaseInstanceEXT phaserDrawArraysInstancedBaseInstanceEXT
#define glDrawArraysInstancedEXT phaserDrawArraysInstancedEXT
#define glDrawArraysInstancedNV phaserDrawArraysInstancedNV
#define glDrawBuffer phaserDrawBuffer
#define glDrawBufferRegion phaserDrawBufferRegion
#define glDrawBuffers phaserDrawBuffers
#define glDrawBuffersARB phaserDrawBuffersARB
#define glDrawBuffersATI phaserDrawBuffersATI
#define glDrawBuffersEXT phaserDrawBuffersEXT
#define glDrawBuffersIndexedEXT phaserDrawBuffersIndexedEXT
#define glDrawBuffersNV phaserDrawBuffersNV
#define glDrawCommandsAddressNV phaserDrawCommandsAddressNV
#define glDrawCommandsNV phaserDrawCommandsNV
#define glDrawCommandsStatesAddressNV phaserDrawCommandsStatesAddressNV
#define glDrawCommandsStatesNV phaserDrawCommandsStatesNV
#define glDrawElementArrayAPPLE phaserDrawElementArrayAPPLE
#define glDrawElementArrayATI phaserDrawElementArrayATI
#define glDrawElements phaserDrawElements
#define glDrawElementsBaseVertex phaserDrawElementsBaseVertex
#define glDrawElementsBaseVertexEXT phaserDrawElementsBaseVertexEXT
#define glDrawElementsBaseVertexOES phaserDrawElementsBaseVertexOES
#define glDrawElementsIndirect phaserDrawElementsIndirect
#define glDrawElementsInstanced phaserDrawElementsInstanced
#define glDrawElementsInstancedANGLE phaserDrawElementsInstancedANGLE
#define glDrawElementsInstancedARB phaserDrawElementsInstancedARB
#define glDrawElementsInstancedBaseInstance phaserDrawElementsInstancedBaseInstance
#define glDrawElementsInstancedBaseInstanceEXT phaserDrawElementsInstancedBaseInstanceEXT
#define glDrawElementsInstancedBaseVertex phaserDrawElementsInstancedBaseVertex
#define glDrawElementsInstancedBaseVertexBaseInstance phaserDrawElementsInstancedBaseVertexBaseInstance
#define glDrawElementsInstancedBaseVertexBaseInstanceEXT phaserDrawElementsInstancedBaseVertexBaseInstanceEXT
#define glDrawElementsInstancedBaseVertexEXT phaserDrawElementsInstancedBaseVertexEXT
#define glDrawElementsInstancedBaseVertexOES phaserDrawElementsInstancedBaseVertexOES
#define glDrawElementsInstancedEXT phaserDrawElementsInstancedEXT
#define glDrawElementsInstancedNV phaserDrawElementsInstancedNV
#define glDrawMeshArraysSUN phaserDrawMeshArraysSUN
#define glDrawPixels phaserDrawPixels
#define glDrawRangeElementArrayAPPLE phaserDrawRangeElementArrayAPPLE
#define glDrawRangeElementArrayATI phaserDrawRangeElementArrayATI
#define glDrawRangeElements phaserDrawRangeElements
#define glDrawRangeElementsBaseVertex phaserDrawRangeElementsBaseVertex
#define glDrawRangeElementsBaseVertexEXT phaserDrawRangeElementsBaseVertexEXT
#define glDrawRangeElementsBaseVertexOES phaserDrawRangeElementsBaseVertexOES
#define glDrawRangeElementsEXT phaserDrawRangeElementsEXT
#define glDrawTexfOES phaserDrawTexfOES
#define glDrawTexfvOES phaserDrawTexfvOES
#define glDrawTexiOES phaserDrawTexiOES
#define glDrawTexivOES phaserDrawTexivOES
#define glDrawTexsOES phaserDrawTexsOES
#define glDrawTexsvOES phaserDrawTexsvOES
#define glDrawTextureNV phaserDrawTextureNV
#define glDrawTexxOES phaserDrawTexxOES
#define glDrawTexxvOES phaserDrawTexxvOES
#define glDrawTransformFeedback phaserDrawTransformFeedback
#define glDrawTransformFeedbackEXT phaserDrawTransformFeedbackEXT
#define glDrawTransformFeedbackInstanced phaserDrawTransformFeedbackInstanced
#define glDrawTransformFeedbackInstancedEXT phaserDrawTransformFeedbackInstancedEXT
#define glDrawTransformFeedbackNV phaserDrawTransformFeedbackNV
#define glDrawTransformFeedbackStream phaserDrawTransformFeedbackStream
#define glDrawTransformFeedbackStreamInstanced phaserDrawTransformFeedbackStreamInstanced
#define glDrawVkImageNV phaserDrawVkImageNV
#define glEGLImageTargetRenderbufferStorageOES phaserEGLImageTargetRenderbufferStorageOES
#define glEGLImageTargetTexture2DOES phaserEGLImageTargetTexture2DOES
#define glEdgeFlag phaserEdgeFlag
#define glEdgeFlagFormatNV phaserEdgeFlagFormatNV
#define glEdgeFlagPointer phaserEdgeFlagPointer
#define glEdgeFlagPointerEXT phaserEdgeFlagPointerEXT
#define glEdgeFlagPointerListIBM phaserEdgeFlagPointerListIBM
#define glEdgeFlagv phaserEdgeFlagv
#define glElementPointerAPPLE phaserElementPointerAPPLE
#define glElementPointerATI phaserElementPointerATI
#define glEnable phaserEnable
#define glEnableClientState phaserEnableClientState
#define glEnableClientStateIndexedEXT phaserEnableClientStateIndexedEXT
#define glEnableClientStateiEXT phaserEnableClientStateiEXT
#define glEnableDriverControlQCOM phaserEnableDriverControlQCOM
#define glEnableIndexedEXT phaserEnableIndexedEXT
#define glEnableVariantClientStateEXT phaserEnableVariantClientStateEXT
#define glEnableVertexArrayAttrib phaserEnableVertexArrayAttrib
#define glEnableVertexArrayAttribEXT phaserEnableVertexArrayAttribEXT
#define glEnableVertexArrayEXT phaserEnableVertexArrayEXT
#define glEnableVertexAttribAPPLE phaserEnableVertexAttribAPPLE
#define glEnableVertexAttribArray phaserEnableVertexAttribArray
#define glEnableVertexAttribArrayARB phaserEnableVertexAttribArrayARB
#define glEnablei phaserEnablei
#define glEnableiEXT phaserEnableiEXT
#define glEnableiNV phaserEnableiNV
#define glEnableiOES phaserEnableiOES
#define glEnd phaserEnd
#define glEndConditionalRender phaserEndConditionalRender
#define glEndConditionalRenderNV phaserEndConditionalRenderNV
#define glEndConditionalRenderNVX phaserEndConditionalRenderNVX
#define glEndFragmentShaderATI phaserEndFragmentShaderATI
#define glEndList phaserEndList
#define glEndOcclusionQueryNV phaserEndOcclusionQueryNV
#define glEndPerfMonitorAMD phaserEndPerfMonitorAMD
#define glEndPerfQueryINTEL phaserEndPerfQueryINTEL
#define glEndQuery phaserEndQuery
#define glEndQueryARB phaserEndQueryARB
#define glEndQueryEXT phaserEndQueryEXT
#define glEndQueryIndexed phaserEndQueryIndexed
#define glEndTilingQCOM phaserEndTilingQCOM
#define glEndTransformFeedback phaserEndTransformFeedback
#define glEndTransformFeedbackEXT phaserEndTransformFeedbackEXT
#define glEndTransformFeedbackNV phaserEndTransformFeedbackNV
#define glEndVertexShaderEXT phaserEndVertexShaderEXT
#define glEndVideoCaptureNV phaserEndVideoCaptureNV
#define glEvalCoord1d phaserEvalCoord1d
#define glEvalCoord1dv phaserEvalCoord1dv
#define glEvalCoord1f phaserEvalCoord1f
#define glEvalCoord1fv phaserEvalCoord1fv
#define glEvalCoord1xOES phaserEvalCoord1xOES
#define glEvalCoord1xvOES phaserEvalCoord1xvOES
#define glEvalCoord2d phaserEvalCoord2d
#define glEvalCoord2dv phaserEvalCoord2dv
#define glEvalCoord2f phaserEvalCoord2f
#define glEvalCoord2fv phaserEvalCoord2fv
#define glEvalCoord2xOES phaserEvalCoord2xOES
#define glEvalCoord2xvOES phaserEvalCoord2xvOES
#define glEvalMapsNV phaserEvalMapsNV
#define glEvalMesh1 phaserEvalMesh1
#define glEvalMesh2 phaserEvalMesh2
#define glEvalPoint1 phaserEvalPoint1
#define glEvalPoint2 phaserEvalPoint2
#define glEvaluateDepthValuesARB phaserEvaluateDepthValuesARB
#define glExecuteProgramNV phaserExecuteProgramNV
#define glExtGetBufferPointervQCOM phaserExtGetBufferPointervQCOM
#define glExtGetBuffersQCOM phaserExtGetBuffersQCOM
#define glExtGetFramebuffersQCOM phaserExtGetFramebuffersQCOM
#define glExtGetProgramBinarySourceQCOM phaserExtGetProgramBinarySourceQCOM
#define glExtGetProgramsQCOM phaserExtGetProgramsQCOM
#define glExtGetRenderbuffersQCOM phaserExtGetRenderbuffersQCOM
#define glExtGetShadersQCOM phaserExtGetShadersQCOM
#define glExtGetTexLevelParameterivQCOM phaserExtGetTexLevelParameterivQCOM
#define glExtGetTexSubImageQCOM phaserExtGetTexSubImageQCOM
#define glExtGetTexturesQCOM phaserExtGetTexturesQCOM
#define glExtIsProgramBinaryQCOM phaserExtIsProgramBinaryQCOM
#define glExtTexObjectStateOverrideiQCOM phaserExtTexObjectStateOverrideiQCOM
#define glExtractComponentEXT phaserExtractComponentEXT
#define glFeedbackBuffer phaserFeedbackBuffer
#define glFeedbackBufferxOES phaserFeedbackBufferxOES
#define glFenceSync phaserFenceSync
#define glFenceSyncAPPLE phaserFenceSyncAPPLE
#define glFinalCombinerInputNV phaserFinalCombinerInputNV
#define glFinish phaserFinish
#define glFinishAsyncSGIX phaserFinishAsyncSGIX
#define glFinishFenceAPPLE phaserFinishFenceAPPLE
#define glFinishFenceNV phaserFinishFenceNV
#define glFinishObjectAPPLE phaserFinishObjectAPPLE
#define glFinishTextureSUNX phaserFinishTextureSUNX
#define glFlush phaserFlush
#define glFlushMappedBufferRange phaserFlushMappedBufferRange
#define glFlushMappedBufferRangeAPPLE phaserFlushMappedBufferRangeAPPLE
#define glFlushMappedBufferRangeEXT phaserFlushMappedBufferRangeEXT
#define glFlushMappedNamedBufferRange phaserFlushMappedNamedBufferRange
#define glFlushMappedNamedBufferRangeEXT phaserFlushMappedNamedBufferRangeEXT
#define glFlushPixelDataRangeNV phaserFlushPixelDataRangeNV
#define glFlushRasterSGIX phaserFlushRasterSGIX
#define glFlushStaticDataIBM phaserFlushStaticDataIBM
#define glFlushVertexArrayRangeAPPLE phaserFlushVertexArrayRangeAPPLE
#define glFlushVertexArrayRangeNV phaserFlushVertexArrayRangeNV
#define glFogCoordFormatNV phaserFogCoordFormatNV
#define glFogCoordPointer phaserFogCoordPointer
#define glFogCoordPointerEXT phaserFogCoordPointerEXT
#define glFogCoordPointerListIBM phaserFogCoordPointerListIBM
#define glFogCoordd phaserFogCoordd
#define glFogCoorddEXT phaserFogCoorddEXT
#define glFogCoorddv phaserFogCoorddv
#define glFogCoorddvEXT phaserFogCoorddvEXT
#define glFogCoordf phaserFogCoordf
#define glFogCoordfEXT phaserFogCoordfEXT
#define glFogCoordfv phaserFogCoordfv
#define glFogCoordfvEXT phaserFogCoordfvEXT
#define glFogCoordhNV phaserFogCoordhNV
#define glFogCoordhvNV phaserFogCoordhvNV
#define glFogFuncSGIS phaserFogFuncSGIS
#define glFogf phaserFogf
#define glFogfv phaserFogfv
#define glFogi phaserFogi
#define glFogiv phaserFogiv
#define glFogx phaserFogx
#define glFogxOES phaserFogxOES
#define glFogxv phaserFogxv
#define glFogxvOES phaserFogxvOES
#define glFragmentColorMaterialSGIX phaserFragmentColorMaterialSGIX
#define glFragmentCoverageColorNV phaserFragmentCoverageColorNV
#define glFragmentLightModelfSGIX phaserFragmentLightModelfSGIX
#define glFragmentLightModelfvSGIX phaserFragmentLightModelfvSGIX
#define glFragmentLightModeliSGIX phaserFragmentLightModeliSGIX
#define glFragmentLightModelivSGIX phaserFragmentLightModelivSGIX
#define glFragmentLightfSGIX phaserFragmentLightfSGIX
#define glFragmentLightfvSGIX phaserFragmentLightfvSGIX
#define glFragmentLightiSGIX phaserFragmentLightiSGIX
#define glFragmentLightivSGIX phaserFragmentLightivSGIX
#define glFragmentMaterialfSGIX phaserFragmentMaterialfSGIX
#define glFragmentMaterialfvSGIX phaserFragmentMaterialfvSGIX
#define glFragmentMaterialiSGIX phaserFragmentMaterialiSGIX
#define glFragmentMaterialivSGIX phaserFragmentMaterialivSGIX
#define glFrameTerminatorGREMEDY phaserFrameTerminatorGREMEDY
#define glFrameZoomSGIX phaserFrameZoomSGIX
#define glFramebufferDrawBufferEXT phaserFramebufferDrawBufferEXT
#define glFramebufferDrawBuffersEXT phaserFramebufferDrawBuffersEXT
#define glFramebufferFetchBarrierQCOM phaserFramebufferFetchBarrierQCOM
#define glFramebufferFoveationConfigQCOM phaserFramebufferFoveationConfigQCOM
#define glFramebufferFoveationParametersQCOM phaserFramebufferFoveationParametersQCOM
#define glFramebufferParameteri phaserFramebufferParameteri
#define glFramebufferPixelLocalStorageSizeEXT phaserFramebufferPixelLocalStorageSizeEXT
#define glFramebufferReadBufferEXT phaserFramebufferReadBufferEXT
#define glFramebufferRenderbuffer phaserFramebufferRenderbuffer
#define glFramebufferRenderbufferEXT phaserFramebufferRenderbufferEXT
#define glFramebufferRenderbufferOES phaserFramebufferRenderbufferOES
#define glFramebufferSampleLocationsfvARB phaserFramebufferSampleLocationsfvARB
#define glFramebufferSampleLocationsfvNV phaserFramebufferSampleLocationsfvNV
#define glFramebufferSamplePositionsfvAMD phaserFramebufferSamplePositionsfvAMD
#define glFramebufferTexture phaserFramebufferTexture
#define glFramebufferTexture1D phaserFramebufferTexture1D
#define glFramebufferTexture1DEXT phaserFramebufferTexture1DEXT
#define glFramebufferTexture2D phaserFramebufferTexture2D
#define glFramebufferTexture2DDownsampleIMG phaserFramebufferTexture2DDownsampleIMG
#define glFramebufferTexture2DEXT phaserFramebufferTexture2DEXT
#define glFramebufferTexture2DMultisampleEXT phaserFramebufferTexture2DMultisampleEXT
#define glFramebufferTexture2DMultisampleIMG phaserFramebufferTexture2DMultisampleIMG
#define glFramebufferTexture2DOES phaserFramebufferTexture2DOES
#define glFramebufferTexture3D phaserFramebufferTexture3D
#define glFramebufferTexture3DEXT phaserFramebufferTexture3DEXT
#define glFramebufferTexture3DOES phaserFramebufferTexture3DOES
#define glFramebufferTextureARB phaserFramebufferTextureARB
#define glFramebufferTextureEXT phaserFramebufferTextureEXT
#define glFramebufferTextureFaceARB phaserFramebufferTextureFaceARB
#define glFramebufferTextureFaceEXT phaserFramebufferTextureFaceEXT
#define glFramebufferTextureLayer phaserFramebufferTextureLayer
#define glFramebufferTextureLayerARB phaserFramebufferTextureLayerARB
#define glFramebufferTextureLayerDownsampleIMG phaserFramebufferTextureLayerDownsampleIMG
#define glFramebufferTextureLayerEXT phaserFramebufferTextureLayerEXT
#define glFramebufferTextureMultisampleMultiviewOVR phaserFramebufferTextureMultisampleMultiviewOVR
#define glFramebufferTextureMultiviewOVR phaserFramebufferTextureMultiviewOVR
#define glFramebufferTextureOES phaserFramebufferTextureOES
#define glFreeObjectBufferATI phaserFreeObjectBufferATI
#define glFrontFace phaserFrontFace
#define glFrustum phaserFrustum
#define glFrustumf phaserFrustumf
#define glFrustumfOES phaserFrustumfOES
#define glFrustumx phaserFrustumx
#define glFrustumxOES phaserFrustumxOES
#define glGenAsyncMarkersSGIX phaserGenAsyncMarkersSGIX
#define glGenBuffers phaserGenBuffers
#define glGenBuffersARB phaserGenBuffersARB
#define glGenFencesAPPLE phaserGenFencesAPPLE
#define glGenFencesNV phaserGenFencesNV
#define glGenFragmentShadersATI phaserGenFragmentShadersATI
#define glGenFramebuffers phaserGenFramebuffers
#define glGenFramebuffersEXT phaserGenFramebuffersEXT
#define glGenFramebuffersOES phaserGenFramebuffersOES
#define glGenLists phaserGenLists
#define glGenNamesAMD phaserGenNamesAMD
#define glGenOcclusionQueriesNV phaserGenOcclusionQueriesNV
#define glGenPathsNV phaserGenPathsNV
#define glGenPerfMonitorsAMD phaserGenPerfMonitorsAMD
#define glGenProgramPipelines phaserGenProgramPipelines
#define glGenProgramPipelinesEXT phaserGenProgramPipelinesEXT
#define glGenProgramsARB phaserGenProgramsARB
#define glGenProgramsNV phaserGenProgramsNV
#define glGenQueries phaserGenQueries
#define glGenQueriesARB phaserGenQueriesARB
#define glGenQueriesEXT phaserGenQueriesEXT
#define glGenQueryResourceTagNV phaserGenQueryResourceTagNV
#define glGenRenderbuffers phaserGenRenderbuffers
#define glGenRenderbuffersEXT phaserGenRenderbuffersEXT
#define glGenRenderbuffersOES phaserGenRenderbuffersOES
#define glGenSamplers phaserGenSamplers
#define glGenSemaphoresEXT phaserGenSemaphoresEXT
#define glGenSymbolsEXT phaserGenSymbolsEXT
#define glGenTextures phaserGenTextures
#define glGenTexturesEXT phaserGenTexturesEXT
#define glGenTransformFeedbacks phaserGenTransformFeedbacks
#define glGenTransformFeedbacksNV phaserGenTransformFeedbacksNV
#define glGenVertexArrays phaserGenVertexArrays
#define glGenVertexArraysAPPLE phaserGenVertexArraysAPPLE
#define glGenVertexArraysOES phaserGenVertexArraysOES
#define glGenVertexShadersEXT phaserGenVertexShadersEXT
#define glGenerateMipmap phaserGenerateMipmap
#define glGenerateMipmapEXT phaserGenerateMipmapEXT
#define glGenerateMipmapOES phaserGenerateMipmapOES
#define glGenerateMultiTexMipmapEXT phaserGenerateMultiTexMipmapEXT
#define glGenerateTextureMipmap phaserGenerateTextureMipmap
#define glGenerateTextureMipmapEXT phaserGenerateTextureMipmapEXT
#define glGetActiveAtomicCounterBufferiv phaserGetActiveAtomicCounterBufferiv
#define glGetActiveAttrib phaserGetActiveAttrib
#define glGetActiveAttribARB phaserGetActiveAttribARB
#define glGetActiveSubroutineName phaserGetActiveSubroutineName
#define glGetActiveSubroutineUniformName phaserGetActiveSubroutineUniformName
#define glGetActiveSubroutineUniformiv phaserGetActiveSubroutineUniformiv
#define glGetActiveUniform phaserGetActiveUniform
#define glGetActiveUniformARB phaserGetActiveUniformARB
#define glGetActiveUniformBlockName phaserGetActiveUniformBlockName
#define glGetActiveUniformBlockiv phaserGetActiveUniformBlockiv
#define glGetActiveUniformName phaserGetActiveUniformName
#define glGetActiveUniformsiv phaserGetActiveUniformsiv
#define glGetActiveVaryingNV phaserGetActiveVaryingNV
#define glGetArrayObjectfvATI phaserGetArrayObjectfvATI
#define glGetArrayObjectivATI phaserGetArrayObjectivATI
#define glGetAttachedObjectsARB phaserGetAttachedObjectsARB
#define glGetAttachedShaders phaserGetAttachedShaders
#define glGetAttribLocation phaserGetAttribLocation
#define glGetAttribLocationARB phaserGetAttribLocationARB
#define glGetBooleanIndexedvEXT phaserGetBooleanIndexedvEXT
#define glGetBooleani_v phaserGetBooleani_v
#define glGetBooleanv phaserGetBooleanv
#define glGetBufferParameteri64v phaserGetBufferParameteri64v
#define glGetBufferParameteriv phaserGetBufferParameteriv
#define glGetBufferParameterivARB phaserGetBufferParameterivARB
#define glGetBufferParameterui64vNV phaserGetBufferParameterui64vNV
#define glGetBufferPointerv phaserGetBufferPointerv
#define glGetBufferPointervARB phaserGetBufferPointervARB
#define glGetBufferPointervOES phaserGetBufferPointervOES
#define glGetBufferSubData phaserGetBufferSubData
#define glGetBufferSubDataARB phaserGetBufferSubDataARB
#define glGetClipPlane phaserGetClipPlane
#define glGetClipPlanef phaserGetClipPlanef
#define glGetClipPlanefOES phaserGetClipPlanefOES
#define glGetClipPlanex phaserGetClipPlanex
#define glGetClipPlanexOES phaserGetClipPlanexOES
#define glGetColorTable phaserGetColorTable
#define glGetColorTableEXT phaserGetColorTableEXT
#define glGetColorTableParameterfv phaserGetColorTableParameterfv
#define glGetColorTableParameterfvEXT phaserGetColorTableParameterfvEXT
#define glGetColorTableParameterfvSGI phaserGetColorTableParameterfvSGI
#define glGetColorTableParameteriv phaserGetColorTableParameteriv
#define glGetColorTableParameterivEXT phaserGetColorTableParameterivEXT
#define glGetColorTableParameterivSGI phaserGetColorTableParameterivSGI
#define glGetColorTableSGI phaserGetColorTableSGI
#define glGetCombinerInputParameterfvNV phaserGetCombinerInputParameterfvNV
#define glGetCombinerInputParameterivNV phaserGetCombinerInputParameterivNV
#define glGetCombinerOutputParameterfvNV phaserGetCombinerOutputParameterfvNV
#define glGetCombinerOutputParameterivNV phaserGetCombinerOutputParameterivNV
#define glGetCombinerStageParameterfvNV phaserGetCombinerStageParameterfvNV
#define glGetCommandHeaderNV phaserGetCommandHeaderNV
#define glGetCompressedMultiTexImageEXT phaserGetCompressedMultiTexImageEXT
#define glGetCompressedTexImage phaserGetCompressedTexImage
#define glGetCompressedTexImageARB phaserGetCompressedTexImageARB
#define glGetCompressedTextureImage phaserGetCompressedTextureImage
#define glGetCompressedTextureImageEXT phaserGetCompressedTextureImageEXT
#define glGetCompressedTextureSubImage phaserGetCompressedTextureSubImage
#define glGetConvolutionFilter phaserGetConvolutionFilter
#define glGetConvolutionFilterEXT phaserGetConvolutionFilterEXT
#define glGetConvolutionParameterfv phaserGetConvolutionParameterfv
#define glGetConvolutionParameterfvEXT phaserGetConvolutionParameterfvEXT
#define glGetConvolutionParameteriv phaserGetConvolutionParameteriv
#define glGetConvolutionParameterivEXT phaserGetConvolutionParameterivEXT
#define glGetConvolutionParameterxvOES phaserGetConvolutionParameterxvOES
#define glGetCoverageModulationTableNV phaserGetCoverageModulationTableNV
#define glGetDebugMessageLog phaserGetDebugMessageLog
#define glGetDebugMessageLogAMD phaserGetDebugMessageLogAMD
#define glGetDebugMessageLogARB phaserGetDebugMessageLogARB
#define glGetDebugMessageLogKHR phaserGetDebugMessageLogKHR
#define glGetDetailTexFuncSGIS phaserGetDetailTexFuncSGIS
#define glGetDoubleIndexedvEXT phaserGetDoubleIndexedvEXT
#define glGetDoublei_v phaserGetDoublei_v
#define glGetDoublei_vEXT phaserGetDoublei_vEXT
#define glGetDoublev phaserGetDoublev
#define glGetDriverControlStringQCOM phaserGetDriverControlStringQCOM
#define glGetDriverControlsQCOM phaserGetDriverControlsQCOM
#define glGetError phaserGetError
#define glGetFenceivNV phaserGetFenceivNV
#define glGetFinalCombinerInputParameterfvNV phaserGetFinalCombinerInputParameterfvNV
#define glGetFinalCombinerInputParameterivNV phaserGetFinalCombinerInputParameterivNV
#define glGetFirstPerfQueryIdINTEL phaserGetFirstPerfQueryIdINTEL
#define glGetFixedv phaserGetFixedv
#define glGetFixedvOES phaserGetFixedvOES
#define glGetFloatIndexedvEXT phaserGetFloatIndexedvEXT
#define glGetFloati_v phaserGetFloati_v
#define glGetFloati_vEXT phaserGetFloati_vEXT
#define glGetFloati_vNV phaserGetFloati_vNV
#define glGetFloati_vOES phaserGetFloati_vOES
#define glGetFloatv phaserGetFloatv
#define glGetFogFuncSGIS phaserGetFogFuncSGIS
#define glGetFragDataIndex phaserGetFragDataIndex
#define glGetFragDataIndexEXT phaserGetFragDataIndexEXT
#define glGetFragDataLocation phaserGetFragDataLocation
#define glGetFragDataLocationEXT phaserGetFragDataLocationEXT
#define glGetFragmentLightfvSGIX phaserGetFragmentLightfvSGIX
#define glGetFragmentLightivSGIX phaserGetFragmentLightivSGIX
#define glGetFragmentMaterialfvSGIX phaserGetFragmentMaterialfvSGIX
#define glGetFragmentMaterialivSGIX phaserGetFragmentMaterialivSGIX
#define glGetFramebufferAttachmentParameteriv phaserGetFramebufferAttachmentParameteriv
#define glGetFramebufferAttachmentParameterivEXT phaserGetFramebufferAttachmentParameterivEXT
#define glGetFramebufferAttachmentParameterivOES phaserGetFramebufferAttachmentParameterivOES
#define glGetFramebufferParameterfvAMD phaserGetFramebufferParameterfvAMD
#define glGetFramebufferParameteriv phaserGetFramebufferParameteriv
#define glGetFramebufferParameterivEXT phaserGetFramebufferParameterivEXT
#define glGetFramebufferPixelLocalStorageSizeEXT phaserGetFramebufferPixelLocalStorageSizeEXT
#define glGetGraphicsResetStatus phaserGetGraphicsResetStatus
#define glGetGraphicsResetStatusARB phaserGetGraphicsResetStatusARB
#define glGetGraphicsResetStatusEXT phaserGetGraphicsResetStatusEXT
#define glGetGraphicsResetStatusKHR phaserGetGraphicsResetStatusKHR
#define glGetHandleARB phaserGetHandleARB
#define glGetHistogram phaserGetHistogram
#define glGetHistogramEXT phaserGetHistogramEXT
#define glGetHistogramParameterfv phaserGetHistogramParameterfv
#define glGetHistogramParameterfvEXT phaserGetHistogramParameterfvEXT
#define glGetHistogramParameteriv phaserGetHistogramParameteriv
#define glGetHistogramParameterivEXT phaserGetHistogramParameterivEXT
#define glGetHistogramParameterxvOES phaserGetHistogramParameterxvOES
#define glGetImageHandleARB phaserGetImageHandleARB
#define glGetImageHandleNV phaserGetImageHandleNV
#define glGetImageTransformParameterfvHP phaserGetImageTransformParameterfvHP
#define glGetImageTransformParameterivHP phaserGetImageTransformParameterivHP
#define glGetInfoLogARB phaserGetInfoLogARB
#define glGetInstrumentsSGIX phaserGetInstrumentsSGIX
#define glGetInteger64i_v phaserGetInteger64i_v
#define glGetInteger64v phaserGetInteger64v
#define glGetInteger64vAPPLE phaserGetInteger64vAPPLE
#define glGetIntegerIndexedvEXT phaserGetIntegerIndexedvEXT
#define glGetIntegeri_v phaserGetIntegeri_v
#define glGetIntegeri_vEXT phaserGetIntegeri_vEXT
#define glGetIntegerui64i_vNV phaserGetIntegerui64i_vNV
#define glGetIntegerui64vNV phaserGetIntegerui64vNV
#define glGetIntegerv phaserGetIntegerv
#define glGetInternalformatSampleivNV phaserGetInternalformatSampleivNV
#define glGetInternalformati64v phaserGetInternalformati64v
#define glGetInternalformativ phaserGetInternalformativ
#define glGetInvariantBooleanvEXT phaserGetInvariantBooleanvEXT
#define glGetInvariantFloatvEXT phaserGetInvariantFloatvEXT
#define glGetInvariantIntegervEXT phaserGetInvariantIntegervEXT
#define glGetLightfv phaserGetLightfv
#define glGetLightiv phaserGetLightiv
#define glGetLightxOES phaserGetLightxOES
#define glGetLightxv phaserGetLightxv
#define glGetLightxvOES phaserGetLightxvOES
#define glGetListParameterfvSGIX phaserGetListParameterfvSGIX
#define glGetListParameterivSGIX phaserGetListParameterivSGIX
#define glGetLocalConstantBooleanvEXT phaserGetLocalConstantBooleanvEXT
#define glGetLocalConstantFloatvEXT phaserGetLocalConstantFloatvEXT
#define glGetLocalConstantIntegervEXT phaserGetLocalConstantIntegervEXT
#define glGetMapAttribParameterfvNV phaserGetMapAttribParameterfvNV
#define glGetMapAttribParameterivNV phaserGetMapAttribParameterivNV
#define glGetMapControlPointsNV phaserGetMapControlPointsNV
#define glGetMapParameterfvNV phaserGetMapParameterfvNV
#define glGetMapParameterivNV phaserGetMapParameterivNV
#define glGetMapdv phaserGetMapdv
#define glGetMapfv phaserGetMapfv
#define glGetMapiv phaserGetMapiv
#define glGetMapxvOES phaserGetMapxvOES
#define glGetMaterialfv phaserGetMaterialfv
#define glGetMaterialiv phaserGetMaterialiv
#define glGetMaterialxOES phaserGetMaterialxOES
#define glGetMaterialxv phaserGetMaterialxv
#define glGetMaterialxvOES phaserGetMaterialxvOES
#define glGetMemoryObjectParameterivEXT phaserGetMemoryObjectParameterivEXT
#define glGetMinmax phaserGetMinmax
#define glGetMinmaxEXT phaserGetMinmaxEXT
#define glGetMinmaxParameterfv phaserGetMinmaxParameterfv
#define glGetMinmaxParameterfvEXT phaserGetMinmaxParameterfvEXT
#define glGetMinmaxParameteriv phaserGetMinmaxParameteriv
#define glGetMinmaxParameterivEXT phaserGetMinmaxParameterivEXT
#define glGetMultiTexEnvfvEXT phaserGetMultiTexEnvfvEXT
#define glGetMultiTexEnvivEXT phaserGetMultiTexEnvivEXT
#define glGetMultiTexGendvEXT phaserGetMultiTexGendvEXT
#define glGetMultiTexGenfvEXT phaserGetMultiTexGenfvEXT
#define glGetMultiTexGenivEXT phaserGetMultiTexGenivEXT
#define glGetMultiTexImageEXT phaserGetMultiTexImageEXT
#define glGetMultiTexLevelParameterfvEXT phaserGetMultiTexLevelParameterfvEXT
#define glGetMultiTexLevelParameterivEXT phaserGetMultiTexLevelParameterivEXT
#define glGetMultiTexParameterIivEXT phaserGetMultiTexParameterIivEXT
#define glGetMultiTexParameterIuivEXT phaserGetMultiTexParameterIuivEXT
#define glGetMultiTexParameterfvEXT phaserGetMultiTexParameterfvEXT
#define glGetMultiTexParameterivEXT phaserGetMultiTexParameterivEXT
#define glGetMultisamplefv phaserGetMultisamplefv
#define glGetMultisamplefvNV phaserGetMultisamplefvNV
#define glGetNamedBufferParameteri64v phaserGetNamedBufferParameteri64v
#define glGetNamedBufferParameteriv phaserGetNamedBufferParameteriv
#define glGetNamedBufferParameterivEXT phaserGetNamedBufferParameterivEXT
#define glGetNamedBufferParameterui64vNV phaserGetNamedBufferParameterui64vNV
#define glGetNamedBufferPointerv phaserGetNamedBufferPointerv
#define glGetNamedBufferPointervEXT phaserGetNamedBufferPointervEXT
#define glGetNamedBufferSubData phaserGetNamedBufferSubData
#define glGetNamedBufferSubDataEXT phaserGetNamedBufferSubDataEXT
#define glGetNamedFramebufferAttachmentParameteriv phaserGetNamedFramebufferAttachmentParameteriv
#define glGetNamedFramebufferAttachmentParameterivEXT phaserGetNamedFramebufferAttachmentParameterivEXT
#define glGetNamedFramebufferParameterfvAMD phaserGetNamedFramebufferParameterfvAMD
#define glGetNamedFramebufferParameteriv phaserGetNamedFramebufferParameteriv
#define glGetNamedFramebufferParameterivEXT phaserGetNamedFramebufferParameterivEXT
#define glGetNamedProgramLocalParameterIivEXT phaserGetNamedProgramLocalParameterIivEXT
#define glGetNamedProgramLocalParameterIuivEXT phaserGetNamedProgramLocalParameterIuivEXT
#define glGetNamedProgramLocalParameterdvEXT phaserGetNamedProgramLocalParameterdvEXT
#define glGetNamedProgramLocalParameterfvEXT phaserGetNamedProgramLocalParameterfvEXT
#define glGetNamedProgramStringEXT phaserGetNamedProgramStringEXT
#define glGetNamedProgramivEXT phaserGetNamedProgramivEXT
#define glGetNamedRenderbufferParameteriv phaserGetNamedRenderbufferParameteriv
#define glGetNamedRenderbufferParameterivEXT phaserGetNamedRenderbufferParameterivEXT
#define glGetNamedStringARB phaserGetNamedStringARB
#define glGetNamedStringivARB phaserGetNamedStringivARB
#define glGetNextPerfQueryIdINTEL phaserGetNextPerfQueryIdINTEL
#define glGetObjectBufferfvATI phaserGetObjectBufferfvATI
#define glGetObjectBufferivATI phaserGetObjectBufferivATI
#define glGetObjectLabel phaserGetObjectLabel
#define glGetObjectLabelEXT phaserGetObjectLabelEXT
#define glGetObjectLabelKHR phaserGetObjectLabelKHR
#define glGetObjectParameterfvARB phaserGetObjectParameterfvARB
#define glGetObjectParameterivAPPLE phaserGetObjectParameterivAPPLE
#define glGetObjectParameterivARB phaserGetObjectParameterivARB
#define glGetObjectPtrLabel phaserGetObjectPtrLabel
#define glGetObjectPtrLabelKHR phaserGetObjectPtrLabelKHR
#define glGetOcclusionQueryivNV phaserGetOcclusionQueryivNV
#define glGetOcclusionQueryuivNV phaserGetOcclusionQueryuivNV
#define glGetPathColorGenfvNV phaserGetPathColorGenfvNV
#define glGetPathColorGenivNV phaserGetPathColorGenivNV
#define glGetPathCommandsNV phaserGetPathCommandsNV
#define glGetPathCoordsNV phaserGetPathCoordsNV
#define glGetPathDashArrayNV phaserGetPathDashArrayNV
#define glGetPathLengthNV phaserGetPathLengthNV
#define glGetPathMetricRangeNV phaserGetPathMetricRangeNV
#define glGetPathMetricsNV phaserGetPathMetricsNV
#define glGetPathParameterfvNV phaserGetPathParameterfvNV
#define glGetPathParameterivNV phaserGetPathParameterivNV
#define glGetPathSpacingNV phaserGetPathSpacingNV
#define glGetPathTexGenfvNV phaserGetPathTexGenfvNV
#define glGetPathTexGenivNV phaserGetPathTexGenivNV
#define glGetPerfCounterInfoINTEL phaserGetPerfCounterInfoINTEL
#define glGetPerfMonitorCounterDataAMD phaserGetPerfMonitorCounterDataAMD
#define glGetPerfMonitorCounterInfoAMD phaserGetPerfMonitorCounterInfoAMD
#define glGetPerfMonitorCounterStringAMD phaserGetPerfMonitorCounterStringAMD
#define glGetPerfMonitorCountersAMD phaserGetPerfMonitorCountersAMD
#define glGetPerfMonitorGroupStringAMD phaserGetPerfMonitorGroupStringAMD
#define glGetPerfMonitorGroupsAMD phaserGetPerfMonitorGroupsAMD
#define glGetPerfQueryDataINTEL phaserGetPerfQueryDataINTEL
#define glGetPerfQueryIdByNameINTEL phaserGetPerfQueryIdByNameINTEL
#define glGetPerfQueryInfoINTEL phaserGetPerfQueryInfoINTEL
#define glGetPixelMapfv phaserGetPixelMapfv
#define glGetPixelMapuiv phaserGetPixelMapuiv
#define glGetPixelMapusv phaserGetPixelMapusv
#define glGetPixelMapxv phaserGetPixelMapxv
#define glGetPixelTexGenParameterfvSGIS phaserGetPixelTexGenParameterfvSGIS
#define glGetPixelTexGenParameterivSGIS phaserGetPixelTexGenParameterivSGIS
#define glGetPixelTransformParameterfvEXT phaserGetPixelTransformParameterfvEXT
#define glGetPixelTransformParameterivEXT phaserGetPixelTransformParameterivEXT
#define glGetPointerIndexedvEXT phaserGetPointerIndexedvEXT
#define glGetPointeri_vEXT phaserGetPointeri_vEXT
#define glGetPointerv phaserGetPointerv
#define glGetPointervEXT phaserGetPointervEXT
#define glGetPointervKHR phaserGetPointervKHR
#define glGetPolygonStipple phaserGetPolygonStipple
#define glGetProgramBinary phaserGetProgramBinary
#define glGetProgramBinaryOES phaserGetProgramBinaryOES
#define glGetProgramEnvParameterIivNV phaserGetProgramEnvParameterIivNV
#define glGetProgramEnvParameterIuivNV phaserGetProgramEnvParameterIuivNV
#define glGetProgramEnvParameterdvARB phaserGetProgramEnvParameterdvARB
#define glGetProgramEnvParameterfvARB phaserGetProgramEnvParameterfvARB
#define glGetProgramInfoLog phaserGetProgramInfoLog
#define glGetProgramInterfaceiv phaserGetProgramInterfaceiv
#define glGetProgramLocalParameterIivNV phaserGetProgramLocalParameterIivNV
#define glGetProgramLocalParameterIuivNV phaserGetProgramLocalParameterIuivNV
#define glGetProgramLocalParameterdvARB phaserGetProgramLocalParameterdvARB
#define glGetProgramLocalParameterfvARB phaserGetProgramLocalParameterfvARB
#define glGetProgramNamedParameterdvNV phaserGetProgramNamedParameterdvNV
#define glGetProgramNamedParameterfvNV phaserGetProgramNamedParameterfvNV
#define glGetProgramParameterdvNV phaserGetProgramParameterdvNV
#define glGetProgramParameterfvNV phaserGetProgramParameterfvNV
#define glGetProgramPipelineInfoLog phaserGetProgramPipelineInfoLog
#define glGetProgramPipelineInfoLogEXT phaserGetProgramPipelineInfoLogEXT
#define glGetProgramPipelineiv phaserGetProgramPipelineiv
#define glGetProgramPipelineivEXT phaserGetProgramPipelineivEXT
#define glGetProgramResourceIndex phaserGetProgramResourceIndex
#define glGetProgramResourceLocation phaserGetProgramResourceLocation
#define glGetProgramResourceLocationIndex phaserGetProgramResourceLocationIndex
#define glGetProgramResourceLocationIndexEXT phaserGetProgramResourceLocationIndexEXT
#define glGetProgramResourceName phaserGetProgramResourceName
#define glGetProgramResourcefvNV phaserGetProgramResourcefvNV
#define glGetProgramResourceiv phaserGetProgramResourceiv
#define glGetProgramStageiv phaserGetProgramStageiv
#define glGetProgramStringARB phaserGetProgramStringARB
#define glGetProgramStringNV phaserGetProgramStringNV
#define glGetProgramSubroutineParameteruivNV phaserGetProgramSubroutineParameteruivNV
#define glGetProgramiv phaserGetProgramiv
#define glGetProgramivARB phaserGetProgramivARB
#define glGetProgramivNV phaserGetProgramivNV
#define glGetQueryBufferObjecti64v phaserGetQueryBufferObjecti64v
#define glGetQueryBufferObjectiv phaserGetQueryBufferObjectiv
#define glGetQueryBufferObjectui64v phaserGetQueryBufferObjectui64v
#define glGetQueryBufferObjectuiv phaserGetQueryBufferObjectuiv
#define glGetQueryIndexediv phaserGetQueryIndexediv
#define glGetQueryObjecti64v phaserGetQueryObjecti64v
#define glGetQueryObjecti64vEXT phaserGetQueryObjecti64vEXT
#define glGetQueryObjectiv phaserGetQueryObjectiv
#define glGetQueryObjectivARB phaserGetQueryObjectivARB
#define glGetQueryObjectivEXT phaserGetQueryObjectivEXT
#define glGetQueryObjectui64v phaserGetQueryObjectui64v
#define glGetQueryObjectui64vEXT phaserGetQueryObjectui64vEXT
#define glGetQueryObjectuiv phaserGetQueryObjectuiv
#define glGetQueryObjectuivARB phaserGetQueryObjectuivARB
#define glGetQueryObjectuivEXT phaserGetQueryObjectuivEXT
#define glGetQueryiv phaserGetQueryiv
#define glGetQueryivARB phaserGetQueryivARB
#define glGetQueryivEXT phaserGetQueryivEXT
#define glGetRenderbufferParameteriv phaserGetRenderbufferParameteriv
#define glGetRenderbufferParameterivEXT phaserGetRenderbufferParameterivEXT
#define glGetRenderbufferParameterivOES phaserGetRenderbufferParameterivOES
#define glGetSamplerParameterIiv phaserGetSamplerParameterIiv
#define glGetSamplerParameterIivEXT phaserGetSamplerParameterIivEXT
#define glGetSamplerParameterIivOES phaserGetSamplerParameterIivOES
#define glGetSamplerParameterIuiv phaserGetSamplerParameterIuiv
#define glGetSamplerParameterIuivEXT phaserGetSamplerParameterIuivEXT
#define glGetSamplerParameterIuivOES phaserGetSamplerParameterIuivOES
#define glGetSamplerParameterfv phaserGetSamplerParameterfv
#define glGetSamplerParameteriv phaserGetSamplerParameteriv
#define glGetSemaphoreParameterui64vEXT phaserGetSemaphoreParameterui64vEXT
#define glGetSeparableFilter phaserGetSeparableFilter
#define glGetSeparableFilterEXT phaserGetSeparableFilterEXT
#define glGetShaderInfoLog phaserGetShaderInfoLog
#define glGetShaderPrecisionFormat phaserGetShaderPrecisionFormat
#define glGetShaderSource phaserGetShaderSource
#define glGetShaderSourceARB phaserGetShaderSourceARB
#define glGetShaderiv phaserGetShaderiv
#define glGetSharpenTexFuncSGIS phaserGetSharpenTexFuncSGIS
#define glGetStageIndexNV phaserGetStageIndexNV
#define glGetString phaserGetString
#define glGetStringi phaserGetStringi
#define glGetSubroutineIndex phaserGetSubroutineIndex
#define glGetSubroutineUniformLocation phaserGetSubroutineUniformLocation
#define glGetSynciv phaserGetSynciv
#define glGetSyncivAPPLE phaserGetSyncivAPPLE
#define glGetTexBumpParameterfvATI phaserGetTexBumpParameterfvATI
#define glGetTexBumpParameterivATI phaserGetTexBumpParameterivATI
#define glGetTexEnvfv phaserGetTexEnvfv
#define glGetTexEnviv phaserGetTexEnviv
#define glGetTexEnvxv phaserGetTexEnvxv
#define glGetTexEnvxvOES phaserGetTexEnvxvOES
#define glGetTexFilterFuncSGIS phaserGetTexFilterFuncSGIS
#define glGetTexGendv phaserGetTexGendv
#define glGetTexGenfv phaserGetTexGenfv
#define glGetTexGenfvOES phaserGetTexGenfvOES
#define glGetTexGeniv phaserGetTexGeniv
#define glGetTexGenivOES phaserGetTexGenivOES
#define glGetTexGenxvOES phaserGetTexGenxvOES
#define glGetTexImage phaserGetTexImage
#define glGetTexLevelParameterfv phaserGetTexLevelParameterfv
#define glGetTexLevelParameteriv phaserGetTexLevelParameteriv
#define glGetTexLevelParameterxvOES phaserGetTexLevelParameterxvOES
#define glGetTexParameterIiv phaserGetTexParameterIiv
#define glGetTexParameterIivEXT phaserGetTexParameterIivEXT
#define glGetTexParameterIivOES phaserGetTexParameterIivOES
#define glGetTexParameterIuiv phaserGetTexParameterIuiv
#define glGetTexParameterIuivEXT phaserGetTexParameterIuivEXT
#define glGetTexParameterIuivOES phaserGetTexParameterIuivOES
#define glGetTexParameterPointervAPPLE phaserGetTexParameterPointervAPPLE
#define glGetTexParameterfv phaserGetTexParameterfv
#define glGetTexParameteriv phaserGetTexParameteriv
#define glGetTexParameterxv phaserGetTexParameterxv
#define glGetTexParameterxvOES phaserGetTexParameterxvOES
#define glGetTextureHandleARB phaserGetTextureHandleARB
#define glGetTextureHandleIMG phaserGetTextureHandleIMG
#define glGetTextureHandleNV phaserGetTextureHandleNV
#define glGetTextureImage phaserGetTextureImage
#define glGetTextureImageEXT phaserGetTextureImageEXT
#define glGetTextureLevelParameterfv phaserGetTextureLevelParameterfv
#define glGetTextureLevelParameterfvEXT phaserGetTextureLevelParameterfvEXT
#define glGetTextureLevelParameteriv phaserGetTextureLevelParameteriv
#define glGetTextureLevelParameterivEXT phaserGetTextureLevelParameterivEXT
#define glGetTextureParameterIiv phaserGetTextureParameterIiv
#define glGetTextureParameterIivEXT phaserGetTextureParameterIivEXT
#define glGetTextureParameterIuiv phaserGetTextureParameterIuiv
#define glGetTextureParameterIuivEXT phaserGetTextureParameterIuivEXT
#define glGetTextureParameterfv phaserGetTextureParameterfv
#define glGetTextureParameterfvEXT phaserGetTextureParameterfvEXT
#define glGetTextureParameteriv phaserGetTextureParameteriv
#define glGetTextureParameterivEXT phaserGetTextureParameterivEXT
#define glGetTextureSamplerHandleARB phaserGetTextureSamplerHandleARB
#define glGetTextureSamplerHandleIMG phaserGetTextureSamplerHandleIMG
#define glGetTextureSamplerHandleNV phaserGetTextureSamplerHandleNV
#define glGetTextureSubImage phaserGetTextureSubImage
#define glGetTrackMatrixivNV phaserGetTrackMatrixivNV
#define glGetTransformFeedbackVarying phaserGetTransformFeedbackVarying
#define glGetTransformFeedbackVaryingEXT phaserGetTransformFeedbackVaryingEXT
#define glGetTransformFeedbackVaryingNV phaserGetTransformFeedbackVaryingNV
#define glGetTransformFeedbacki64_v phaserGetTransformFeedbacki64_v
#define glGetTransformFeedbacki_v phaserGetTransformFeedbacki_v
#define glGetTransformFeedbackiv phaserGetTransformFeedbackiv
#define glGetTranslatedShaderSourceANGLE phaserGetTranslatedShaderSourceANGLE
#define glGetUniformBlockIndex phaserGetUniformBlockIndex
#define glGetUniformBufferSizeEXT phaserGetUniformBufferSizeEXT
#define glGetUniformIndices phaserGetUniformIndices
#define glGetUniformLocation phaserGetUniformLocation
#define glGetUniformLocationARB phaserGetUniformLocationARB
#define glGetUniformOffsetEXT phaserGetUniformOffsetEXT
#define glGetUniformSubroutineuiv phaserGetUniformSubroutineuiv
#define glGetUniformdv phaserGetUniformdv
#define glGetUniformfv phaserGetUniformfv
#define glGetUniformfvARB phaserGetUniformfvARB
#define glGetUniformi64vARB phaserGetUniformi64vARB
#define glGetUniformi64vNV phaserGetUniformi64vNV
#define glGetUniformiv phaserGetUniformiv
#define glGetUniformivARB phaserGetUniformivARB
#define glGetUniformui64vARB phaserGetUniformui64vARB
#define glGetUniformui64vNV phaserGetUniformui64vNV
#define glGetUniformuiv phaserGetUniformuiv
#define glGetUniformuivEXT phaserGetUniformuivEXT
#define glGetUnsignedBytei_vEXT phaserGetUnsignedBytei_vEXT
#define glGetUnsignedBytevEXT phaserGetUnsignedBytevEXT
#define glGetVariantArrayObjectfvATI phaserGetVariantArrayObjectfvATI
#define glGetVariantArrayObjectivATI phaserGetVariantArrayObjectivATI
#define glGetVariantBooleanvEXT phaserGetVariantBooleanvEXT
#define glGetVariantFloatvEXT phaserGetVariantFloatvEXT
#define glGetVariantIntegervEXT phaserGetVariantIntegervEXT
#define glGetVariantPointervEXT phaserGetVariantPointervEXT
#define glGetVaryingLocationNV phaserGetVaryingLocationNV
#define glGetVertexArrayIndexed64iv phaserGetVertexArrayIndexed64iv
#define glGetVertexArrayIndexediv phaserGetVertexArrayIndexediv
#define glGetVertexArrayIntegeri_vEXT phaserGetVertexArrayIntegeri_vEXT
#define glGetVertexArrayIntegervEXT phaserGetVertexArrayIntegervEXT
#define glGetVertexArrayPointeri_vEXT phaserGetVertexArrayPointeri_vEXT
#define glGetVertexArrayPointervEXT phaserGetVertexArrayPointervEXT
#define glGetVertexArrayiv phaserGetVertexArrayiv
#define glGetVertexAttribArrayObjectfvATI phaserGetVertexAttribArrayObjectfvATI
#define glGetVertexAttribArrayObjectivATI phaserGetVertexAttribArrayObjectivATI
#define glGetVertexAttribIiv phaserGetVertexAttribIiv
#define glGetVertexAttribIivEXT phaserGetVertexAttribIivEXT
#define glGetVertexAttribIuiv phaserGetVertexAttribIuiv
#define glGetVertexAttribIuivEXT phaserGetVertexAttribIuivEXT
#define glGetVertexAttribLdv phaserGetVertexAttribLdv
#define glGetVertexAttribLdvEXT phaserGetVertexAttribLdvEXT
#define glGetVertexAttribLi64vNV phaserGetVertexAttribLi64vNV
#define glGetVertexAttribLui64vARB phaserGetVertexAttribLui64vARB
#define glGetVertexAttribLui64vNV phaserGetVertexAttribLui64vNV
#define glGetVertexAttribPointerv phaserGetVertexAttribPointerv
#define glGetVertexAttribPointervARB phaserGetVertexAttribPointervARB
#define glGetVertexAttribPointervNV phaserGetVertexAttribPointervNV
#define glGetVertexAttribdv phaserGetVertexAttribdv
#define glGetVertexAttribdvARB phaserGetVertexAttribdvARB
#define glGetVertexAttribdvNV phaserGetVertexAttribdvNV
#define glGetVertexAttribfv phaserGetVertexAttribfv
#define glGetVertexAttribfvARB phaserGetVertexAttribfvARB
#define glGetVertexAttribfvNV phaserGetVertexAttribfvNV
#define glGetVertexAttribiv phaserGetVertexAttribiv
#define glGetVertexAttribivARB phaserGetVertexAttribivARB
#define glGetVertexAttribivNV phaserGetVertexAttribivNV
#define glGetVideoCaptureStreamdvNV phaserGetVideoCaptureStreamdvNV
#define glGetVideoCaptureStreamfvNV phaserGetVideoCaptureStreamfvNV
#define glGetVideoCaptureStreamivNV phaserGetVideoCaptureStreamivNV
#define glGetVideoCaptureivNV phaserGetVideoCaptureivNV
#define glGetVideoi64vNV phaserGetVideoi64vNV
#define glGetVideoivNV phaserGetVideoivNV
#define glGetVideoui64vNV phaserGetVideoui64vNV
#define glGetVideouivNV phaserGetVideouivNV
#define glGetVkProcAddrNV phaserGetVkProcAddrNV
#define glGetnColorTable phaserGetnColorTable
#define glGetnColorTableARB phaserGetnColorTableARB
#define glGetnCompressedTexImage phaserGetnCompressedTexImage
#define glGetnCompressedTexImageARB phaserGetnCompressedTexImageARB
#define glGetnConvolutionFilter phaserGetnConvolutionFilter
#define glGetnConvolutionFilterARB phaserGetnConvolutionFilterARB
#define glGetnHistogram phaserGetnHistogram
#define glGetnHistogramARB phaserGetnHistogramARB
#define glGetnMapdv phaserGetnMapdv
#define glGetnMapdvARB phaserGetnMapdvARB
#define glGetnMapfv phaserGetnMapfv
#define glGetnMapfvARB phaserGetnMapfvARB
#define glGetnMapiv phaserGetnMapiv
#define glGetnMapivARB phaserGetnMapivARB
#define glGetnMinmax phaserGetnMinmax
#define glGetnMinmaxARB phaserGetnMinmaxARB
#define glGetnPixelMapfv phaserGetnPixelMapfv
#define glGetnPixelMapfvARB phaserGetnPixelMapfvARB
#define glGetnPixelMapuiv phaserGetnPixelMapuiv
#define glGetnPixelMapuivARB phaserGetnPixelMapuivARB
#define glGetnPixelMapusv phaserGetnPixelMapusv
#define glGetnPixelMapusvARB phaserGetnPixelMapusvARB
#define glGetnPolygonStipple phaserGetnPolygonStipple
#define glGetnPolygonStippleARB phaserGetnPolygonStippleARB
#define glGetnSeparableFilter phaserGetnSeparableFilter
#define glGetnSeparableFilterARB phaserGetnSeparableFilterARB
#define glGetnTexImage phaserGetnTexImage
#define glGetnTexImageARB phaserGetnTexImageARB
#define glGetnUniformdv phaserGetnUniformdv
#define glGetnUniformdvARB phaserGetnUniformdvARB
#define glGetnUniformfv phaserGetnUniformfv
#define glGetnUniformfvARB phaserGetnUniformfvARB
#define glGetnUniformfvEXT phaserGetnUniformfvEXT
#define glGetnUniformfvKHR phaserGetnUniformfvKHR
#define glGetnUniformi64vARB phaserGetnUniformi64vARB
#define glGetnUniformiv phaserGetnUniformiv
#define glGetnUniformivARB phaserGetnUniformivARB
#define glGetnUniformivEXT phaserGetnUniformivEXT
#define glGetnUniformivKHR phaserGetnUniformivKHR
#define glGetnUniformui64vARB phaserGetnUniformui64vARB
#define glGetnUniformuiv phaserGetnUniformuiv
#define glGetnUniformuivARB phaserGetnUniformuivARB
#define glGetnUniformuivKHR phaserGetnUniformuivKHR
#define glGlobalAlphaFactorbSUN phaserGlobalAlphaFactorbSUN
#define glGlobalAlphaFactordSUN phaserGlobalAlphaFactordSUN
#define glGlobalAlphaFactorfSUN phaserGlobalAlphaFactorfSUN
#define glGlobalAlphaFactoriSUN phaserGlobalAlphaFactoriSUN
#define glGlobalAlphaFactorsSUN phaserGlobalAlphaFactorsSUN
#define glGlobalAlphaFactorubSUN phaserGlobalAlphaFactorubSUN
#define glGlobalAlphaFactoruiSUN phaserGlobalAlphaFactoruiSUN
#define glGlobalAlphaFactorusSUN phaserGlobalAlphaFactorusSUN
#define glHint phaserHint
#define glHintPGI phaserHintPGI
#define glHistogram phaserHistogram
#define glHistogramEXT phaserHistogramEXT
#define glIglooInterfaceSGIX phaserIglooInterfaceSGIX
#define glImageTransformParameterfHP phaserImageTransformParameterfHP
#define glImageTransformParameterfvHP phaserImageTransformParameterfvHP
#define glImageTransformParameteriHP phaserImageTransformParameteriHP
#define glImageTransformParameterivHP phaserImageTransformParameterivHP
#define glImportMemoryFdEXT phaserImportMemoryFdEXT
#define glImportMemoryWin32HandleEXT phaserImportMemoryWin32HandleEXT
#define glImportMemoryWin32NameEXT phaserImportMemoryWin32NameEXT
#define glImportSemaphoreFdEXT phaserImportSemaphoreFdEXT
#define glImportSemaphoreWin32HandleEXT phaserImportSemaphoreWin32HandleEXT
#define glImportSemaphoreWin32NameEXT phaserImportSemaphoreWin32NameEXT
#define glImportSyncEXT phaserImportSyncEXT
#define glIndexFormatNV phaserIndexFormatNV
#define glIndexFuncEXT phaserIndexFuncEXT
#define glIndexMask phaserIndexMask
#define glIndexMaterialEXT phaserIndexMaterialEXT
#define glIndexPointer phaserIndexPointer
#define glIndexPointerEXT phaserIndexPointerEXT
#define glIndexPointerListIBM phaserIndexPointerListIBM
#define glIndexd phaserIndexd
#define glIndexdv phaserIndexdv
#define glIndexf phaserIndexf
#define glIndexfv phaserIndexfv
#define glIndexi phaserIndexi
#define glIndexiv phaserIndexiv
#define glIndexs phaserIndexs
#define glIndexsv phaserIndexsv
#define glIndexub phaserIndexub
#define glIndexubv phaserIndexubv
#define glIndexxOES phaserIndexxOES
#define glIndexxvOES phaserIndexxvOES
#define glInitNames phaserInitNames
#define glInsertComponentEXT phaserInsertComponentEXT
#define glInsertEventMarkerEXT phaserInsertEventMarkerEXT
#define glInstrumentsBufferSGIX phaserInstrumentsBufferSGIX
#define glInterleavedArrays phaserInterleavedArrays
#define glInterpolatePathsNV phaserInterpolatePathsNV
#define glInvalidateBufferData phaserInvalidateBufferData
#define glInvalidateBufferSubData phaserInvalidateBufferSubData
#define glInvalidateFramebuffer phaserInvalidateFramebuffer
#define glInvalidateNamedFramebufferData phaserInvalidateNamedFramebufferData
#define glInvalidateNamedFramebufferSubData phaserInvalidateNamedFramebufferSubData
#define glInvalidateSubFramebuffer phaserInvalidateSubFramebuffer
#define glInvalidateTexImage phaserInvalidateTexImage
#define glInvalidateTexSubImage phaserInvalidateTexSubImage
#define glIsAsyncMarkerSGIX phaserIsAsyncMarkerSGIX
#define glIsBuffer phaserIsBuffer
#define glIsBufferARB phaserIsBufferARB
#define glIsBufferResidentNV phaserIsBufferResidentNV
#define glIsCommandListNV phaserIsCommandListNV
#define glIsEnabled phaserIsEnabled
#define glIsEnabledIndexedEXT phaserIsEnabledIndexedEXT
#define glIsEnabledi phaserIsEnabledi
#define glIsEnablediEXT phaserIsEnablediEXT
#define glIsEnablediNV phaserIsEnablediNV
#define glIsEnablediOES phaserIsEnablediOES
#define glIsFenceAPPLE phaserIsFenceAPPLE
#define glIsFenceNV phaserIsFenceNV
#define glIsFramebuffer phaserIsFramebuffer
#define glIsFramebufferEXT phaserIsFramebufferEXT
#define glIsFramebufferOES phaserIsFramebufferOES
#define glIsImageHandleResidentARB phaserIsImageHandleResidentARB
#define glIsImageHandleResidentNV phaserIsImageHandleResidentNV
#define glIsList phaserIsList
#define glIsMemoryObjectEXT phaserIsMemoryObjectEXT
#define glIsNameAMD phaserIsNameAMD
#define glIsNamedBufferResidentNV phaserIsNamedBufferResidentNV
#define glIsNamedStringARB phaserIsNamedStringARB
#define glIsObjectBufferATI phaserIsObjectBufferATI
#define glIsOcclusionQueryNV phaserIsOcclusionQueryNV
#define glIsPathNV phaserIsPathNV
#define glIsPointInFillPathNV phaserIsPointInFillPathNV
#define glIsPointInStrokePathNV phaserIsPointInStrokePathNV
#define glIsProgram phaserIsProgram
#define glIsProgramARB phaserIsProgramARB
#define glIsProgramNV phaserIsProgramNV
#define glIsProgramPipeline phaserIsProgramPipeline
#define glIsProgramPipelineEXT phaserIsProgramPipelineEXT
#define glIsQuery phaserIsQuery
#define glIsQueryARB phaserIsQueryARB
#define glIsQueryEXT phaserIsQueryEXT
#define glIsRenderbuffer phaserIsRenderbuffer
#define glIsRenderbufferEXT phaserIsRenderbufferEXT
#define glIsRenderbufferOES phaserIsRenderbufferOES
#define glIsSampler phaserIsSampler
#define glIsSemaphoreEXT phaserIsSemaphoreEXT
#define glIsShader phaserIsShader
#define glIsStateNV phaserIsStateNV
#define glIsSync phaserIsSync
#define glIsSyncAPPLE phaserIsSyncAPPLE
#define glIsTexture phaserIsTexture
#define glIsTextureEXT phaserIsTextureEXT
#define glIsTextureHandleResidentARB phaserIsTextureHandleResidentARB
#define glIsTextureHandleResidentNV phaserIsTextureHandleResidentNV
#define glIsTransformFeedback phaserIsTransformFeedback
#define glIsTransformFeedbackNV phaserIsTransformFeedbackNV
#define glIsVariantEnabledEXT phaserIsVariantEnabledEXT
#define glIsVertexArray phaserIsVertexArray
#define glIsVertexArrayAPPLE phaserIsVertexArrayAPPLE
#define glIsVertexArrayOES phaserIsVertexArrayOES
#define glIsVertexAttribEnabledAPPLE phaserIsVertexAttribEnabledAPPLE
#define glLGPUCopyImageSubDataNVX phaserLGPUCopyImageSubDataNVX
#define glLGPUInterlockNVX phaserLGPUInterlockNVX
#define glLGPUNamedBufferSubDataNVX phaserLGPUNamedBufferSubDataNVX
#define glLabelObjectEXT phaserLabelObjectEXT
#define glLightEnviSGIX phaserLightEnviSGIX
#define glLightModelf phaserLightModelf
#define glLightModelfv phaserLightModelfv
#define glLightModeli phaserLightModeli
#define glLightModeliv phaserLightModeliv
#define glLightModelx phaserLightModelx
#define glLightModelxOES phaserLightModelxOES
#define glLightModelxv phaserLightModelxv
#define glLightModelxvOES phaserLightModelxvOES
#define glLightf phaserLightf
#define glLightfv phaserLightfv
#define glLighti phaserLighti
#define glLightiv phaserLightiv
#define glLightx phaserLightx
#define glLightxOES phaserLightxOES
#define glLightxv phaserLightxv
#define glLightxvOES phaserLightxvOES
#define glLineStipple phaserLineStipple
#define glLineWidth phaserLineWidth
#define glLineWidthx phaserLineWidthx
#define glLineWidthxOES phaserLineWidthxOES
#define glLinkProgram phaserLinkProgram
#define glLinkProgramARB phaserLinkProgramARB
#define glListBase phaserListBase
#define glListDrawCommandsStatesClientNV phaserListDrawCommandsStatesClientNV
#define glListParameterfSGIX phaserListParameterfSGIX
#define glListParameterfvSGIX phaserListParameterfvSGIX
#define glListParameteriSGIX phaserListParameteriSGIX
#define glListParameterivSGIX phaserListParameterivSGIX
#define glLoadIdentity phaserLoadIdentity
#define glLoadIdentityDeformationMapSGIX phaserLoadIdentityDeformationMapSGIX
#define glLoadMatrixd phaserLoadMatrixd
#define glLoadMatrixf phaserLoadMatrixf
#define glLoadMatrixx phaserLoadMatrixx
#define glLoadMatrixxOES phaserLoadMatrixxOES
#define glLoadName phaserLoadName
#define glLoadPaletteFromModelViewMatrixOES phaserLoadPaletteFromModelViewMatrixOES
#define glLoadProgramNV phaserLoadProgramNV
#define glLoadTransposeMatrixd phaserLoadTransposeMatrixd
#define glLoadTransposeMatrixdARB phaserLoadTransposeMatrixdARB
#define glLoadTransposeMatrixf phaserLoadTransposeMatrixf
#define glLoadTransposeMatrixfARB phaserLoadTransposeMatrixfARB
#define glLoadTransposeMatrixxOES phaserLoadTransposeMatrixxOES
#define glLockArraysEXT phaserLockArraysEXT
#define glLogicOp phaserLogicOp
#define glMakeBufferNonResidentNV phaserMakeBufferNonResidentNV
#define glMakeBufferResidentNV phaserMakeBufferResidentNV
#define glMakeImageHandleNonResidentARB phaserMakeImageHandleNonResidentARB
#define glMakeImageHandleNonResidentNV phaserMakeImageHandleNonResidentNV
#define glMakeImageHandleResidentARB phaserMakeImageHandleResidentARB
#define glMakeImageHandleResidentNV phaserMakeImageHandleResidentNV
#define glMakeNamedBufferNonResidentNV phaserMakeNamedBufferNonResidentNV
#define glMakeNamedBufferResidentNV phaserMakeNamedBufferResidentNV
#define glMakeTextureHandleNonResidentARB phaserMakeTextureHandleNonResidentARB
#define glMakeTextureHandleNonResidentNV phaserMakeTextureHandleNonResidentNV
#define glMakeTextureHandleResidentARB phaserMakeTextureHandleResidentARB
#define glMakeTextureHandleResidentNV phaserMakeTextureHandleResidentNV
#define glMap1d phaserMap1d
#define glMap1f phaserMap1f
#define glMap1xOES phaserMap1xOES
#define glMap2d phaserMap2d
#define glMap2f phaserMap2f
#define glMap2xOES phaserMap2xOES
#define glMapBuffer phaserMapBuffer
#define glMapBufferARB phaserMapBufferARB
#define glMapBufferOES phaserMapBufferOES
#define glMapBufferRange phaserMapBufferRange
#define glMapBufferRangeEXT phaserMapBufferRangeEXT
#define glMapControlPointsNV phaserMapControlPointsNV
#define glMapGrid1d phaserMapGrid1d
#define glMapGrid1f phaserMapGrid1f
#define glMapGrid1xOES phaserMapGrid1xOES
#define glMapGrid2d phaserMapGrid2d
#define glMapGrid2f phaserMapGrid2f
#define glMapGrid2xOES phaserMapGrid2xOES
#define glMapNamedBuffer phaserMapNamedBuffer
#define glMapNamedBufferEXT phaserMapNamedBufferEXT
#define glMapNamedBufferRange phaserMapNamedBufferRange
#define glMapNamedBufferRangeEXT phaserMapNamedBufferRangeEXT
#define glMapObjectBufferATI phaserMapObjectBufferATI
#define glMapParameterfvNV phaserMapParameterfvNV
#define glMapParameterivNV phaserMapParameterivNV
#define glMapTexture2DINTEL phaserMapTexture2DINTEL
#define glMapVertexAttrib1dAPPLE phaserMapVertexAttrib1dAPPLE
#define glMapVertexAttrib1fAPPLE phaserMapVertexAttrib1fAPPLE
#define glMapVertexAttrib2dAPPLE phaserMapVertexAttrib2dAPPLE
#define glMapVertexAttrib2fAPPLE phaserMapVertexAttrib2fAPPLE
#define glMaterialf phaserMaterialf
#define glMaterialfv phaserMaterialfv
#define glMateriali phaserMateriali
#define glMaterialiv phaserMaterialiv
#define glMaterialx phaserMaterialx
#define glMaterialxOES phaserMaterialxOES
#define glMaterialxv phaserMaterialxv
#define glMaterialxvOES phaserMaterialxvOES
#define glMatrixFrustumEXT phaserMatrixFrustumEXT
#define glMatrixIndexPointerARB phaserMatrixIndexPointerARB
#define glMatrixIndexPointerOES phaserMatrixIndexPointerOES
#define glMatrixIndexubvARB phaserMatrixIndexubvARB
#define glMatrixIndexuivARB phaserMatrixIndexuivARB
#define glMatrixIndexusvARB phaserMatrixIndexusvARB
#define glMatrixLoad3x2fNV phaserMatrixLoad3x2fNV
#define glMatrixLoad3x3fNV phaserMatrixLoad3x3fNV
#define glMatrixLoadIdentityEXT phaserMatrixLoadIdentityEXT
#define glMatrixLoadTranspose3x3fNV phaserMatrixLoadTranspose3x3fNV
#define glMatrixLoadTransposedEXT phaserMatrixLoadTransposedEXT
#define glMatrixLoadTransposefEXT phaserMatrixLoadTransposefEXT
#define glMatrixLoaddEXT phaserMatrixLoaddEXT
#define glMatrixLoadfEXT phaserMatrixLoadfEXT
#define glMatrixMode phaserMatrixMode
#define glMatrixMult3x2fNV phaserMatrixMult3x2fNV
#define glMatrixMult3x3fNV phaserMatrixMult3x3fNV
#define glMatrixMultTranspose3x3fNV phaserMatrixMultTranspose3x3fNV
#define glMatrixMultTransposedEXT phaserMatrixMultTransposedEXT
#define glMatrixMultTransposefEXT phaserMatrixMultTransposefEXT
#define glMatrixMultdEXT phaserMatrixMultdEXT
#define glMatrixMultfEXT phaserMatrixMultfEXT
#define glMatrixOrthoEXT phaserMatrixOrthoEXT
#define glMatrixPopEXT phaserMatrixPopEXT
#define glMatrixPushEXT phaserMatrixPushEXT
#define glMatrixRotatedEXT phaserMatrixRotatedEXT
#define glMatrixRotatefEXT phaserMatrixRotatefEXT
#define glMatrixScaledEXT phaserMatrixScaledEXT
#define glMatrixScalefEXT phaserMatrixScalefEXT
#define glMatrixTranslatedEXT phaserMatrixTranslatedEXT
#define glMatrixTranslatefEXT phaserMatrixTranslatefEXT
#define glMaxShaderCompilerThreadsARB phaserMaxShaderCompilerThreadsARB
#define glMaxShaderCompilerThreadsKHR phaserMaxShaderCompilerThreadsKHR
#define glMemoryBarrier phaserMemoryBarrier
#define glMemoryBarrierByRegion phaserMemoryBarrierByRegion
#define glMemoryBarrierEXT phaserMemoryBarrierEXT
#define glMemoryObjectParameterivEXT phaserMemoryObjectParameterivEXT
#define glMinSampleShading phaserMinSampleShading
#define glMinSampleShadingARB phaserMinSampleShadingARB
#define glMinSampleShadingOES phaserMinSampleShadingOES
#define glMinmax phaserMinmax
#define glMinmaxEXT phaserMinmaxEXT
#define glMultMatrixd phaserMultMatrixd
#define glMultMatrixf phaserMultMatrixf
#define glMultMatrixx phaserMultMatrixx
#define glMultMatrixxOES phaserMultMatrixxOES
#define glMultTransposeMatrixd phaserMultTransposeMatrixd
#define glMultTransposeMatrixdARB phaserMultTransposeMatrixdARB
#define glMultTransposeMatrixf phaserMultTransposeMatrixf
#define glMultTransposeMatrixfARB phaserMultTransposeMatrixfARB
#define glMultTransposeMatrixxOES phaserMultTransposeMatrixxOES
#define glMultiDrawArrays phaserMultiDrawArrays
#define glMultiDrawArraysEXT phaserMultiDrawArraysEXT
#define glMultiDrawArraysIndirect phaserMultiDrawArraysIndirect
#define glMultiDrawArraysIndirectAMD phaserMultiDrawArraysIndirectAMD
#define glMultiDrawArraysIndirectBindlessCountNV phaserMultiDrawArraysIndirectBindlessCountNV
#define glMultiDrawArraysIndirectBindlessNV phaserMultiDrawArraysIndirectBindlessNV
#define glMultiDrawArraysIndirectCount phaserMultiDrawArraysIndirectCount
#define glMultiDrawArraysIndirectCountARB phaserMultiDrawArraysIndirectCountARB
#define glMultiDrawArraysIndirectEXT phaserMultiDrawArraysIndirectEXT
#define glMultiDrawElementArrayAPPLE phaserMultiDrawElementArrayAPPLE
#define glMultiDrawElements phaserMultiDrawElements
#define glMultiDrawElementsBaseVertex phaserMultiDrawElementsBaseVertex
#define glMultiDrawElementsBaseVertexEXT phaserMultiDrawElementsBaseVertexEXT
#define glMultiDrawElementsEXT phaserMultiDrawElementsEXT
#define glMultiDrawElementsIndirect phaserMultiDrawElementsIndirect
#define glMultiDrawElementsIndirectAMD phaserMultiDrawElementsIndirectAMD
#define glMultiDrawElementsIndirectBindlessCountNV phaserMultiDrawElementsIndirectBindlessCountNV
#define glMultiDrawElementsIndirectBindlessNV phaserMultiDrawElementsIndirectBindlessNV
#define glMultiDrawElementsIndirectCount phaserMultiDrawElementsIndirectCount
#define glMultiDrawElementsIndirectCountARB phaserMultiDrawElementsIndirectCountARB
#define glMultiDrawElementsIndirectEXT phaserMultiDrawElementsIndirectEXT
#define glMultiDrawRangeElementArrayAPPLE phaserMultiDrawRangeElementArrayAPPLE
#define glMultiModeDrawArraysIBM phaserMultiModeDrawArraysIBM
#define glMultiModeDrawElementsIBM phaserMultiModeDrawElementsIBM
#define glMultiTexBufferEXT phaserMultiTexBufferEXT
#define glMultiTexCoord1bOES phaserMultiTexCoord1bOES
#define glMultiTexCoord1bvOES phaserMultiTexCoord1bvOES
#define glMultiTexCoord1d phaserMultiTexCoord1d
#define glMultiTexCoord1dARB phaserMultiTexCoord1dARB
#define glMultiTexCoord1dv phaserMultiTexCoord1dv
#define glMultiTexCoord1dvARB phaserMultiTexCoord1dvARB
#define glMultiTexCoord1f phaserMultiTexCoord1f
#define glMultiTexCoord1fARB phaserMultiTexCoord1fARB
#define glMultiTexCoord1fv phaserMultiTexCoord1fv
#define glMultiTexCoord1fvARB phaserMultiTexCoord1fvARB
#define glMultiTexCoord1hNV phaserMultiTexCoord1hNV
#define glMultiTexCoord1hvNV phaserMultiTexCoord1hvNV
#define glMultiTexCoord1i phaserMultiTexCoord1i
#define glMultiTexCoord1iARB phaserMultiTexCoord1iARB
#define glMultiTexCoord1iv phaserMultiTexCoord1iv
#define glMultiTexCoord1ivARB phaserMultiTexCoord1ivARB
#define glMultiTexCoord1s phaserMultiTexCoord1s
#define glMultiTexCoord1sARB phaserMultiTexCoord1sARB
#define glMultiTexCoord1sv phaserMultiTexCoord1sv
#define glMultiTexCoord1svARB phaserMultiTexCoord1svARB
#define glMultiTexCoord1xOES phaserMultiTexCoord1xOES
#define glMultiTexCoord1xvOES phaserMultiTexCoord1xvOES
#define glMultiTexCoord2bOES phaserMultiTexCoord2bOES
#define glMultiTexCoord2bvOES phaserMultiTexCoord2bvOES
#define glMultiTexCoord2d phaserMultiTexCoord2d
#define glMultiTexCoord2dARB phaserMultiTexCoord2dARB
#define glMultiTexCoord2dv phaserMultiTexCoord2dv
#define glMultiTexCoord2dvARB phaserMultiTexCoord2dvARB
#define glMultiTexCoord2f phaserMultiTexCoord2f
#define glMultiTexCoord2fARB phaserMultiTexCoord2fARB
#define glMultiTexCoord2fv phaserMultiTexCoord2fv
#define glMultiTexCoord2fvARB phaserMultiTexCoord2fvARB
#define glMultiTexCoord2hNV phaserMultiTexCoord2hNV
#define glMultiTexCoord2hvNV phaserMultiTexCoord2hvNV
#define glMultiTexCoord2i phaserMultiTexCoord2i
#define glMultiTexCoord2iARB phaserMultiTexCoord2iARB
#define glMultiTexCoord2iv phaserMultiTexCoord2iv
#define glMultiTexCoord2ivARB phaserMultiTexCoord2ivARB
#define glMultiTexCoord2s phaserMultiTexCoord2s
#define glMultiTexCoord2sARB phaserMultiTexCoord2sARB
#define glMultiTexCoord2sv phaserMultiTexCoord2sv
#define glMultiTexCoord2svARB phaserMultiTexCoord2svARB
#define glMultiTexCoord2xOES phaserMultiTexCoord2xOES
#define glMultiTexCoord2xvOES phaserMultiTexCoord2xvOES
#define glMultiTexCoord3bOES phaserMultiTexCoord3bOES
#define glMultiTexCoord3bvOES phaserMultiTexCoord3bvOES
#define glMultiTexCoord3d phaserMultiTexCoord3d
#define glMultiTexCoord3dARB phaserMultiTexCoord3dARB
#define glMultiTexCoord3dv phaserMultiTexCoord3dv
#define glMultiTexCoord3dvARB phaserMultiTexCoord3dvARB
#define glMultiTexCoord3f phaserMultiTexCoord3f
#define glMultiTexCoord3fARB phaserMultiTexCoord3fARB
#define glMultiTexCoord3fv phaserMultiTexCoord3fv
#define glMultiTexCoord3fvARB phaserMultiTexCoord3fvARB
#define glMultiTexCoord3hNV phaserMultiTexCoord3hNV
#define glMultiTexCoord3hvNV phaserMultiTexCoord3hvNV
#define glMultiTexCoord3i phaserMultiTexCoord3i
#define glMultiTexCoord3iARB phaserMultiTexCoord3iARB
#define glMultiTexCoord3iv phaserMultiTexCoord3iv
#define glMultiTexCoord3ivARB phaserMultiTexCoord3ivARB
#define glMultiTexCoord3s phaserMultiTexCoord3s
#define glMultiTexCoord3sARB phaserMultiTexCoord3sARB
#define glMultiTexCoord3sv phaserMultiTexCoord3sv
#define glMultiTexCoord3svARB phaserMultiTexCoord3svARB
#define glMultiTexCoord3xOES phaserMultiTexCoord3xOES
#define glMultiTexCoord3xvOES phaserMultiTexCoord3xvOES
#define glMultiTexCoord4bOES phaserMultiTexCoord4bOES
#define glMultiTexCoord4bvOES phaserMultiTexCoord4bvOES
#define glMultiTexCoord4d phaserMultiTexCoord4d
#define glMultiTexCoord4dARB phaserMultiTexCoord4dARB
#define glMultiTexCoord4dv phaserMultiTexCoord4dv
#define glMultiTexCoord4dvARB phaserMultiTexCoord4dvARB
#define glMultiTexCoord4f phaserMultiTexCoord4f
#define glMultiTexCoord4fARB phaserMultiTexCoord4fARB
#define glMultiTexCoord4fv phaserMultiTexCoord4fv
#define glMultiTexCoord4fvARB phaserMultiTexCoord4fvARB
#define glMultiTexCoord4hNV phaserMultiTexCoord4hNV
#define glMultiTexCoord4hvNV phaserMultiTexCoord4hvNV
#define glMultiTexCoord4i phaserMultiTexCoord4i
#define glMultiTexCoord4iARB phaserMultiTexCoord4iARB
#define glMultiTexCoord4iv phaserMultiTexCoord4iv
#define glMultiTexCoord4ivARB phaserMultiTexCoord4ivARB
#define glMultiTexCoord4s phaserMultiTexCoord4s
#define glMultiTexCoord4sARB phaserMultiTexCoord4sARB
#define glMultiTexCoord4sv phaserMultiTexCoord4sv
#define glMultiTexCoord4svARB phaserMultiTexCoord4svARB
#define glMultiTexCoord4x phaserMultiTexCoord4x
#define glMultiTexCoord4xOES phaserMultiTexCoord4xOES
#define glMultiTexCoord4xvOES phaserMultiTexCoord4xvOES
#define glMultiTexCoordP1ui phaserMultiTexCoordP1ui
#define glMultiTexCoordP1uiv phaserMultiTexCoordP1uiv
#define glMultiTexCoordP2ui phaserMultiTexCoordP2ui
#define glMultiTexCoordP2uiv phaserMultiTexCoordP2uiv
#define glMultiTexCoordP3ui phaserMultiTexCoordP3ui
#define glMultiTexCoordP3uiv phaserMultiTexCoordP3uiv
#define glMultiTexCoordP4ui phaserMultiTexCoordP4ui
#define glMultiTexCoordP4uiv phaserMultiTexCoordP4uiv
#define glMultiTexCoordPointerEXT phaserMultiTexCoordPointerEXT
#define glMultiTexEnvfEXT phaserMultiTexEnvfEXT
#define glMultiTexEnvfvEXT phaserMultiTexEnvfvEXT
#define glMultiTexEnviEXT phaserMultiTexEnviEXT
#define glMultiTexEnvivEXT phaserMultiTexEnvivEXT
#define glMultiTexGendEXT phaserMultiTexGendEXT
#define glMultiTexGendvEXT phaserMultiTexGendvEXT
#define glMultiTexGenfEXT phaserMultiTexGenfEXT
#define glMultiTexGenfvEXT phaserMultiTexGenfvEXT
#define glMultiTexGeniEXT phaserMultiTexGeniEXT
#define glMultiTexGenivEXT phaserMultiTexGenivEXT
#define glMultiTexImage1DEXT phaserMultiTexImage1DEXT
#define glMultiTexImage2DEXT phaserMultiTexImage2DEXT
#define glMultiTexImage3DEXT phaserMultiTexImage3DEXT
#define glMultiTexParameterIivEXT phaserMultiTexParameterIivEXT
#define glMultiTexParameterIuivEXT phaserMultiTexParameterIuivEXT
#define glMultiTexParameterfEXT phaserMultiTexParameterfEXT
#define glMultiTexParameterfvEXT phaserMultiTexParameterfvEXT
#define glMultiTexParameteriEXT phaserMultiTexParameteriEXT
#define glMultiTexParameterivEXT phaserMultiTexParameterivEXT
#define glMultiTexRenderbufferEXT phaserMultiTexRenderbufferEXT
#define glMultiTexSubImage1DEXT phaserMultiTexSubImage1DEXT
#define glMultiTexSubImage2DEXT phaserMultiTexSubImage2DEXT
#define glMultiTexSubImage3DEXT phaserMultiTexSubImage3DEXT
#define glMulticastBarrierNV phaserMulticastBarrierNV
#define glMulticastBlitFramebufferNV phaserMulticastBlitFramebufferNV
#define glMulticastBufferSubDataNV phaserMulticastBufferSubDataNV
#define glMulticastCopyBufferSubDataNV phaserMulticastCopyBufferSubDataNV
#define glMulticastCopyImageSubDataNV phaserMulticastCopyImageSubDataNV
#define glMulticastFramebufferSampleLocationsfvNV phaserMulticastFramebufferSampleLocationsfvNV
#define glMulticastGetQueryObjecti64vNV phaserMulticastGetQueryObjecti64vNV
#define glMulticastGetQueryObjectivNV phaserMulticastGetQueryObjectivNV
#define glMulticastGetQueryObjectui64vNV phaserMulticastGetQueryObjectui64vNV
#define glMulticastGetQueryObjectuivNV phaserMulticastGetQueryObjectuivNV
#define glMulticastWaitSyncNV phaserMulticastWaitSyncNV
#define glNamedBufferData phaserNamedBufferData
#define glNamedBufferDataEXT phaserNamedBufferDataEXT
#define glNamedBufferPageCommitmentARB phaserNamedBufferPageCommitmentARB
#define glNamedBufferPageCommitmentEXT phaserNamedBufferPageCommitmentEXT
#define glNamedBufferStorage phaserNamedBufferStorage
#define glNamedBufferStorageEXT phaserNamedBufferStorageEXT
#define glNamedBufferStorageExternalEXT phaserNamedBufferStorageExternalEXT
#define glNamedBufferStorageMemEXT phaserNamedBufferStorageMemEXT
#define glNamedBufferSubData phaserNamedBufferSubData
#define glNamedBufferSubDataEXT phaserNamedBufferSubDataEXT
#define glNamedCopyBufferSubDataEXT phaserNamedCopyBufferSubDataEXT
#define glNamedFramebufferDrawBuffer phaserNamedFramebufferDrawBuffer
#define glNamedFramebufferDrawBuffers phaserNamedFramebufferDrawBuffers
#define glNamedFramebufferParameteri phaserNamedFramebufferParameteri
#define glNamedFramebufferParameteriEXT phaserNamedFramebufferParameteriEXT
#define glNamedFramebufferReadBuffer phaserNamedFramebufferReadBuffer
#define glNamedFramebufferRenderbuffer phaserNamedFramebufferRenderbuffer
#define glNamedFramebufferRenderbufferEXT phaserNamedFramebufferRenderbufferEXT
#define glNamedFramebufferSampleLocationsfvARB phaserNamedFramebufferSampleLocationsfvARB
#define glNamedFramebufferSampleLocationsfvNV phaserNamedFramebufferSampleLocationsfvNV
#define glNamedFramebufferSamplePositionsfvAMD phaserNamedFramebufferSamplePositionsfvAMD
#define glNamedFramebufferTexture phaserNamedFramebufferTexture
#define glNamedFramebufferTexture1DEXT phaserNamedFramebufferTexture1DEXT
#define glNamedFramebufferTexture2DEXT phaserNamedFramebufferTexture2DEXT
#define glNamedFramebufferTexture3DEXT phaserNamedFramebufferTexture3DEXT
#define glNamedFramebufferTextureEXT phaserNamedFramebufferTextureEXT
#define glNamedFramebufferTextureFaceEXT phaserNamedFramebufferTextureFaceEXT
#define glNamedFramebufferTextureLayer phaserNamedFramebufferTextureLayer
#define glNamedFramebufferTextureLayerEXT phaserNamedFramebufferTextureLayerEXT
#define glNamedProgramLocalParameter4dEXT phaserNamedProgramLocalParameter4dEXT
#define glNamedProgramLocalParameter4dvEXT phaserNamedProgramLocalParameter4dvEXT
#define glNamedProgramLocalParameter4fEXT phaserNamedProgramLocalParameter4fEXT
#define glNamedProgramLocalParameter4fvEXT phaserNamedProgramLocalParameter4fvEXT
#define glNamedProgramLocalParameterI4iEXT phaserNamedProgramLocalParameterI4iEXT
#define glNamedProgramLocalParameterI4ivEXT phaserNamedProgramLocalParameterI4ivEXT
#define glNamedProgramLocalParameterI4uiEXT phaserNamedProgramLocalParameterI4uiEXT
#define glNamedProgramLocalParameterI4uivEXT phaserNamedProgramLocalParameterI4uivEXT
#define glNamedProgramLocalParameters4fvEXT phaserNamedProgramLocalParameters4fvEXT
#define glNamedProgramLocalParametersI4ivEXT phaserNamedProgramLocalParametersI4ivEXT
#define glNamedProgramLocalParametersI4uivEXT phaserNamedProgramLocalParametersI4uivEXT
#define glNamedProgramStringEXT phaserNamedProgramStringEXT
#define glNamedRenderbufferStorage phaserNamedRenderbufferStorage
#define glNamedRenderbufferStorageEXT phaserNamedRenderbufferStorageEXT
#define glNamedRenderbufferStorageMultisample phaserNamedRenderbufferStorageMultisample
#define glNamedRenderbufferStorageMultisampleCoverageEXT phaserNamedRenderbufferStorageMultisampleCoverageEXT
#define glNamedRenderbufferStorageMultisampleEXT phaserNamedRenderbufferStorageMultisampleEXT
#define glNamedStringARB phaserNamedStringARB
#define glNewBufferRegion phaserNewBufferRegion
#define glNewList phaserNewList
#define glNewObjectBufferATI phaserNewObjectBufferATI
#define glNormal3b phaserNormal3b
#define glNormal3bv phaserNormal3bv
#define glNormal3d phaserNormal3d
#define glNormal3dv phaserNormal3dv
#define glNormal3f phaserNormal3f
#define glNormal3fVertex3fSUN phaserNormal3fVertex3fSUN
#define glNormal3fVertex3fvSUN phaserNormal3fVertex3fvSUN
#define glNormal3fv phaserNormal3fv
#define glNormal3hNV phaserNormal3hNV
#define glNormal3hvNV phaserNormal3hvNV
#define glNormal3i phaserNormal3i
#define glNormal3iv phaserNormal3iv
#define glNormal3s phaserNormal3s
#define glNormal3sv phaserNormal3sv
#define glNormal3x phaserNormal3x
#define glNormal3xOES phaserNormal3xOES
#define glNormal3xvOES phaserNormal3xvOES
#define glNormalFormatNV phaserNormalFormatNV
#define glNormalP3ui phaserNormalP3ui
#define glNormalP3uiv phaserNormalP3uiv
#define glNormalPointer phaserNormalPointer
#define glNormalPointerEXT phaserNormalPointerEXT
#define glNormalPointerListIBM phaserNormalPointerListIBM
#define glNormalPointervINTEL phaserNormalPointervINTEL
#define glNormalStream3bATI phaserNormalStream3bATI
#define glNormalStream3bvATI phaserNormalStream3bvATI
#define glNormalStream3dATI phaserNormalStream3dATI
#define glNormalStream3dvATI phaserNormalStream3dvATI
#define glNormalStream3fATI phaserNormalStream3fATI
#define glNormalStream3fvATI phaserNormalStream3fvATI
#define glNormalStream3iATI phaserNormalStream3iATI
#define glNormalStream3ivATI phaserNormalStream3ivATI
#define glNormalStream3sATI phaserNormalStream3sATI
#define glNormalStream3svATI phaserNormalStream3svATI
#define glObjectLabel phaserObjectLabel
#define glObjectLabelKHR phaserObjectLabelKHR
#define glObjectPtrLabel phaserObjectPtrLabel
#define glObjectPtrLabelKHR phaserObjectPtrLabelKHR
#define glObjectPurgeableAPPLE phaserObjectPurgeableAPPLE
#define glObjectUnpurgeableAPPLE phaserObjectUnpurgeableAPPLE
#define glOrtho phaserOrtho
#define glOrthof phaserOrthof
#define glOrthofOES phaserOrthofOES
#define glOrthox phaserOrthox
#define glOrthoxOES phaserOrthoxOES
#define glPNTrianglesfATI phaserPNTrianglesfATI
#define glPNTrianglesiATI phaserPNTrianglesiATI
#define glPassTexCoordATI phaserPassTexCoordATI
#define glPassThrough phaserPassThrough
#define glPassThroughxOES phaserPassThroughxOES
#define glPatchParameterfv phaserPatchParameterfv
#define glPatchParameteri phaserPatchParameteri
#define glPatchParameteriEXT phaserPatchParameteriEXT
#define glPatchParameteriOES phaserPatchParameteriOES
#define glPathColorGenNV phaserPathColorGenNV
#define glPathCommandsNV phaserPathCommandsNV
#define glPathCoordsNV phaserPathCoordsNV
#define glPathCoverDepthFuncNV phaserPathCoverDepthFuncNV
#define glPathDashArrayNV phaserPathDashArrayNV
#define glPathFogGenNV phaserPathFogGenNV
#define glPathGlyphIndexArrayNV phaserPathGlyphIndexArrayNV
#define glPathGlyphIndexRangeNV phaserPathGlyphIndexRangeNV
#define glPathGlyphRangeNV phaserPathGlyphRangeNV
#define glPathGlyphsNV phaserPathGlyphsNV
#define glPathMemoryGlyphIndexArrayNV phaserPathMemoryGlyphIndexArrayNV
#define glPathParameterfNV phaserPathParameterfNV
#define glPathParameterfvNV phaserPathParameterfvNV
#define glPathParameteriNV phaserPathParameteriNV
#define glPathParameterivNV phaserPathParameterivNV
#define glPathStencilDepthOffsetNV phaserPathStencilDepthOffsetNV
#define glPathStencilFuncNV phaserPathStencilFuncNV
#define glPathStringNV phaserPathStringNV
#define glPathSubCommandsNV phaserPathSubCommandsNV
#define glPathSubCoordsNV phaserPathSubCoordsNV
#define glPathTexGenNV phaserPathTexGenNV
#define glPauseTransformFeedback phaserPauseTransformFeedback
#define glPauseTransformFeedbackNV phaserPauseTransformFeedbackNV
#define glPixelDataRangeNV phaserPixelDataRangeNV
#define glPixelMapfv phaserPixelMapfv
#define glPixelMapuiv phaserPixelMapuiv
#define glPixelMapusv phaserPixelMapusv
#define glPixelMapx phaserPixelMapx
#define glPixelStoref phaserPixelStoref
#define glPixelStorei phaserPixelStorei
#define glPixelStorex phaserPixelStorex
#define glPixelTexGenParameterfSGIS phaserPixelTexGenParameterfSGIS
#define glPixelTexGenParameterfvSGIS phaserPixelTexGenParameterfvSGIS
#define glPixelTexGenParameteriSGIS phaserPixelTexGenParameteriSGIS
#define glPixelTexGenParameterivSGIS phaserPixelTexGenParameterivSGIS
#define glPixelTexGenSGIX phaserPixelTexGenSGIX
#define glPixelTransferf phaserPixelTransferf
#define glPixelTransferi phaserPixelTransferi
#define glPixelTransferxOES phaserPixelTransferxOES
#define glPixelTransformParameterfEXT phaserPixelTransformParameterfEXT
#define glPixelTransformParameterfvEXT phaserPixelTransformParameterfvEXT
#define glPixelTransformParameteriEXT phaserPixelTransformParameteriEXT
#define glPixelTransformParameterivEXT phaserPixelTransformParameterivEXT
#define glPixelZoom phaserPixelZoom
#define glPixelZoomxOES phaserPixelZoomxOES
#define glPointAlongPathNV phaserPointAlongPathNV
#define glPointParameterf phaserPointParameterf
#define glPointParameterfARB phaserPointParameterfARB
#define glPointParameterfEXT phaserPointParameterfEXT
#define glPointParameterfSGIS phaserPointParameterfSGIS
#define glPointParameterfv phaserPointParameterfv
#define glPointParameterfvARB phaserPointParameterfvARB
#define glPointParameterfvEXT phaserPointParameterfvEXT
#define glPointParameterfvSGIS phaserPointParameterfvSGIS
#define glPointParameteri phaserPointParameteri
#define glPointParameteriNV phaserPointParameteriNV
#define glPointParameteriv phaserPointParameteriv
#define glPointParameterivNV phaserPointParameterivNV
#define glPointParameterx phaserPointParameterx
#define glPointParameterxOES phaserPointParameterxOES
#define glPointParameterxv phaserPointParameterxv
#define glPointParameterxvOES phaserPointParameterxvOES
#define glPointSize phaserPointSize
#define glPointSizePointerOES phaserPointSizePointerOES
#define glPointSizex phaserPointSizex
#define glPointSizexOES phaserPointSizexOES
#define glPollAsyncSGIX phaserPollAsyncSGIX
#define glPollInstrumentsSGIX phaserPollInstrumentsSGIX
#define glPolygonMode phaserPolygonMode
#define glPolygonModeNV phaserPolygonModeNV
#define glPolygonOffset phaserPolygonOffset
#define glPolygonOffsetClamp phaserPolygonOffsetClamp
#define glPolygonOffsetClampEXT phaserPolygonOffsetClampEXT
#define glPolygonOffsetEXT phaserPolygonOffsetEXT
#define glPolygonOffsetx phaserPolygonOffsetx
#define glPolygonOffsetxOES phaserPolygonOffsetxOES
#define glPolygonStipple phaserPolygonStipple
#define glPopAttrib phaserPopAttrib
#define glPopClientAttrib phaserPopClientAttrib
#define glPopDebugGroup phaserPopDebugGroup
#define glPopDebugGroupKHR phaserPopDebugGroupKHR
#define glPopGroupMarkerEXT phaserPopGroupMarkerEXT
#define glPopMatrix phaserPopMatrix
#define glPopName phaserPopName
#define glPresentFrameDualFillNV phaserPresentFrameDualFillNV
#define glPresentFrameKeyedNV phaserPresentFrameKeyedNV
#define glPrimitiveBoundingBox phaserPrimitiveBoundingBox
#define glPrimitiveBoundingBoxARB phaserPrimitiveBoundingBoxARB
#define glPrimitiveBoundingBoxEXT phaserPrimitiveBoundingBoxEXT
#define glPrimitiveBoundingBoxOES phaserPrimitiveBoundingBoxOES
#define glPrimitiveRestartIndex phaserPrimitiveRestartIndex
#define glPrimitiveRestartIndexNV phaserPrimitiveRestartIndexNV
#define glPrimitiveRestartNV phaserPrimitiveRestartNV
#define glPrioritizeTextures phaserPrioritizeTextures
#define glPrioritizeTexturesEXT phaserPrioritizeTexturesEXT
#define glPrioritizeTexturesxOES phaserPrioritizeTexturesxOES
#define glProgramBinary phaserProgramBinary
#define glProgramBinaryOES phaserProgramBinaryOES
#define glProgramBufferParametersIivNV phaserProgramBufferParametersIivNV
#define glProgramBufferParametersIuivNV phaserProgramBufferParametersIuivNV
#define glProgramBufferParametersfvNV phaserProgramBufferParametersfvNV
#define glProgramEnvParameter4dARB phaserProgramEnvParameter4dARB
#define glProgramEnvParameter4dvARB phaserProgramEnvParameter4dvARB
#define glProgramEnvParameter4fARB phaserProgramEnvParameter4fARB
#define glProgramEnvParameter4fvARB phaserProgramEnvParameter4fvARB
#define glProgramEnvParameterI4iNV phaserProgramEnvParameterI4iNV
#define glProgramEnvParameterI4ivNV phaserProgramEnvParameterI4ivNV
#define glProgramEnvParameterI4uiNV phaserProgramEnvParameterI4uiNV
#define glProgramEnvParameterI4uivNV phaserProgramEnvParameterI4uivNV
#define glProgramEnvParameters4fvEXT phaserProgramEnvParameters4fvEXT
#define glProgramEnvParametersI4ivNV phaserProgramEnvParametersI4ivNV
#define glProgramEnvParametersI4uivNV phaserProgramEnvParametersI4uivNV
#define glProgramLocalParameter4dARB phaserProgramLocalParameter4dARB
#define glProgramLocalParameter4dvARB phaserProgramLocalParameter4dvARB
#define glProgramLocalParameter4fARB phaserProgramLocalParameter4fARB
#define glProgramLocalParameter4fvARB phaserProgramLocalParameter4fvARB
#define glProgramLocalParameterI4iNV phaserProgramLocalParameterI4iNV
#define glProgramLocalParameterI4ivNV phaserProgramLocalParameterI4ivNV
#define glProgramLocalParameterI4uiNV phaserProgramLocalParameterI4uiNV
#define glProgramLocalParameterI4uivNV phaserProgramLocalParameterI4uivNV
#define glProgramLocalParameters4fvEXT phaserProgramLocalParameters4fvEXT
#define glProgramLocalParametersI4ivNV phaserProgramLocalParametersI4ivNV
#define glProgramLocalParametersI4uivNV phaserProgramLocalParametersI4uivNV
#define glProgramNamedParameter4dNV phaserProgramNamedParameter4dNV
#define glProgramNamedParameter4dvNV phaserProgramNamedParameter4dvNV
#define glProgramNamedParameter4fNV phaserProgramNamedParameter4fNV
#define glProgramNamedParameter4fvNV phaserProgramNamedParameter4fvNV
#define glProgramParameter4dNV phaserProgramParameter4dNV
#define glProgramParameter4dvNV phaserProgramParameter4dvNV
#define glProgramParameter4fNV phaserProgramParameter4fNV
#define glProgramParameter4fvNV phaserProgramParameter4fvNV
#define glProgramParameteri phaserProgramParameteri
#define glProgramParameteriARB phaserProgramParameteriARB
#define glProgramParameteriEXT phaserProgramParameteriEXT
#define glProgramParameters4dvNV phaserProgramParameters4dvNV
#define glProgramParameters4fvNV phaserProgramParameters4fvNV
#define glProgramPathFragmentInputGenNV phaserProgramPathFragmentInputGenNV
#define glProgramStringARB phaserProgramStringARB
#define glProgramSubroutineParametersuivNV phaserProgramSubroutineParametersuivNV
#define glProgramUniform1d phaserProgramUniform1d
#define glProgramUniform1dEXT phaserProgramUniform1dEXT
#define glProgramUniform1dv phaserProgramUniform1dv
#define glProgramUniform1dvEXT phaserProgramUniform1dvEXT
#define glProgramUniform1f phaserProgramUniform1f
#define glProgramUniform1fEXT phaserProgramUniform1fEXT
#define glProgramUniform1fv phaserProgramUniform1fv
#define glProgramUniform1fvEXT phaserProgramUniform1fvEXT
#define glProgramUniform1i phaserProgramUniform1i
#define glProgramUniform1i64ARB phaserProgramUniform1i64ARB
#define glProgramUniform1i64NV phaserProgramUniform1i64NV
#define glProgramUniform1i64vARB phaserProgramUniform1i64vARB
#define glProgramUniform1i64vNV phaserProgramUniform1i64vNV
#define glProgramUniform1iEXT phaserProgramUniform1iEXT
#define glProgramUniform1iv phaserProgramUniform1iv
#define glProgramUniform1ivEXT phaserProgramUniform1ivEXT
#define glProgramUniform1ui phaserProgramUniform1ui
#define glProgramUniform1ui64ARB phaserProgramUniform1ui64ARB
#define glProgramUniform1ui64NV phaserProgramUniform1ui64NV
#define glProgramUniform1ui64vARB phaserProgramUniform1ui64vARB
#define glProgramUniform1ui64vNV phaserProgramUniform1ui64vNV
#define glProgramUniform1uiEXT phaserProgramUniform1uiEXT
#define glProgramUniform1uiv phaserProgramUniform1uiv
#define glProgramUniform1uivEXT phaserProgramUniform1uivEXT
#define glProgramUniform2d phaserProgramUniform2d
#define glProgramUniform2dEXT phaserProgramUniform2dEXT
#define glProgramUniform2dv phaserProgramUniform2dv
#define glProgramUniform2dvEXT phaserProgramUniform2dvEXT
#define glProgramUniform2f phaserProgramUniform2f
#define glProgramUniform2fEXT phaserProgramUniform2fEXT
#define glProgramUniform2fv phaserProgramUniform2fv
#define glProgramUniform2fvEXT phaserProgramUniform2fvEXT
#define glProgramUniform2i phaserProgramUniform2i
#define glProgramUniform2i64ARB phaserProgramUniform2i64ARB
#define glProgramUniform2i64NV phaserProgramUniform2i64NV
#define glProgramUniform2i64vARB phaserProgramUniform2i64vARB
#define glProgramUniform2i64vNV phaserProgramUniform2i64vNV
#define glProgramUniform2iEXT phaserProgramUniform2iEXT
#define glProgramUniform2iv phaserProgramUniform2iv
#define glProgramUniform2ivEXT phaserProgramUniform2ivEXT
#define glProgramUniform2ui phaserProgramUniform2ui
#define glProgramUniform2ui64ARB phaserProgramUniform2ui64ARB
#define glProgramUniform2ui64NV phaserProgramUniform2ui64NV
#define glProgramUniform2ui64vARB phaserProgramUniform2ui64vARB
#define glProgramUniform2ui64vNV phaserProgramUniform2ui64vNV
#define glProgramUniform2uiEXT phaserProgramUniform2uiEXT
#define glProgramUniform2uiv phaserProgramUniform2uiv
#define glProgramUniform2uivEXT phaserProgramUniform2uivEXT
#define glProgramUniform3d phaserProgramUniform3d
#define glProgramUniform3dEXT phaserProgramUniform3dEXT
#define glProgramUniform3dv phaserProgramUniform3dv
#define glProgramUniform3dvEXT phaserProgramUniform3dvEXT
#define glProgramUniform3f phaserProgramUniform3f
#define glProgramUniform3fEXT phaserProgramUniform3fEXT
#define glProgramUniform3fv phaserProgramUniform3fv
#define glProgramUniform3fvEXT phaserProgramUniform3fvEXT
#define glProgramUniform3i phaserProgramUniform3i
#define glProgramUniform3i64ARB phaserProgramUniform3i64ARB
#define glProgramUniform3i64NV phaserProgramUniform3i64NV
#define glProgramUniform3i64vARB phaserProgramUniform3i64vARB
#define glProgramUniform3i64vNV phaserProgramUniform3i64vNV
#define glProgramUniform3iEXT phaserProgramUniform3iEXT
#define glProgramUniform3iv phaserProgramUniform3iv
#define glProgramUniform3ivEXT phaserProgramUniform3ivEXT
#define glProgramUniform3ui phaserProgramUniform3ui
#define glProgramUniform3ui64ARB phaserProgramUniform3ui64ARB
#define glProgramUniform3ui64NV phaserProgramUniform3ui64NV
#define glProgramUniform3ui64vARB phaserProgramUniform3ui64vARB
#define glProgramUniform3ui64vNV phaserProgramUniform3ui64vNV
#define glProgramUniform3uiEXT phaserProgramUniform3uiEXT
#define glProgramUniform3uiv phaserProgramUniform3uiv
#define glProgramUniform3uivEXT phaserProgramUniform3uivEXT
#define glProgramUniform4d phaserProgramUniform4d
#define glProgramUniform4dEXT phaserProgramUniform4dEXT
#define glProgramUniform4dv phaserProgramUniform4dv
#define glProgramUniform4dvEXT phaserProgramUniform4dvEXT
#define glProgramUniform4f phaserProgramUniform4f
#define glProgramUniform4fEXT phaserProgramUniform4fEXT
#define glProgramUniform4fv phaserProgramUniform4fv
#define glProgramUniform4fvEXT phaserProgramUniform4fvEXT
#define glProgramUniform4i phaserProgramUniform4i
#define glProgramUniform4i64ARB phaserProgramUniform4i64ARB
#define glProgramUniform4i64NV phaserProgramUniform4i64NV
#define glProgramUniform4i64vARB phaserProgramUniform4i64vARB
#define glProgramUniform4i64vNV phaserProgramUniform4i64vNV
#define glProgramUniform4iEXT phaserProgramUniform4iEXT
#define glProgramUniform4iv phaserProgramUniform4iv
#define glProgramUniform4ivEXT phaserProgramUniform4ivEXT
#define glProgramUniform4ui phaserProgramUniform4ui
#define glProgramUniform4ui64ARB phaserProgramUniform4ui64ARB
#define glProgramUniform4ui64NV phaserProgramUniform4ui64NV
#define glProgramUniform4ui64vARB phaserProgramUniform4ui64vARB
#define glProgramUniform4ui64vNV phaserProgramUniform4ui64vNV
#define glProgramUniform4uiEXT phaserProgramUniform4uiEXT
#define glProgramUniform4uiv phaserProgramUniform4uiv
#define glProgramUniform4uivEXT phaserProgramUniform4uivEXT
#define glProgramUniformHandleui64ARB phaserProgramUniformHandleui64ARB
#define glProgramUniformHandleui64IMG phaserProgramUniformHandleui64IMG
#define glProgramUniformHandleui64NV phaserProgramUniformHandleui64NV
#define glProgramUniformHandleui64vARB phaserProgramUniformHandleui64vARB
#define glProgramUniformHandleui64vIMG phaserProgramUniformHandleui64vIMG
#define glProgramUniformHandleui64vNV phaserProgramUniformHandleui64vNV
#define glProgramUniformMatrix2dv phaserProgramUniformMatrix2dv
#define glProgramUniformMatrix2dvEXT phaserProgramUniformMatrix2dvEXT
#define glProgramUniformMatrix2fv phaserProgramUniformMatrix2fv
#define glProgramUniformMatrix2fvEXT phaserProgramUniformMatrix2fvEXT
#define glProgramUniformMatrix2x3dv phaserProgramUniformMatrix2x3dv
#define glProgramUniformMatrix2x3dvEXT phaserProgramUniformMatrix2x3dvEXT
#define glProgramUniformMatrix2x3fv phaserProgramUniformMatrix2x3fv
#define glProgramUniformMatrix2x3fvEXT phaserProgramUniformMatrix2x3fvEXT
#define glProgramUniformMatrix2x4dv phaserProgramUniformMatrix2x4dv
#define glProgramUniformMatrix2x4dvEXT phaserProgramUniformMatrix2x4dvEXT
#define glProgramUniformMatrix2x4fv phaserProgramUniformMatrix2x4fv
#define glProgramUniformMatrix2x4fvEXT phaserProgramUniformMatrix2x4fvEXT
#define glProgramUniformMatrix3dv phaserProgramUniformMatrix3dv
#define glProgramUniformMatrix3dvEXT phaserProgramUniformMatrix3dvEXT
#define glProgramUniformMatrix3fv phaserProgramUniformMatrix3fv
#define glProgramUniformMatrix3fvEXT phaserProgramUniformMatrix3fvEXT
#define glProgramUniformMatrix3x2dv phaserProgramUniformMatrix3x2dv
#define glProgramUniformMatrix3x2dvEXT phaserProgramUniformMatrix3x2dvEXT
#define glProgramUniformMatrix3x2fv phaserProgramUniformMatrix3x2fv
#define glProgramUniformMatrix3x2fvEXT phaserProgramUniformMatrix3x2fvEXT
#define glProgramUniformMatrix3x4dv phaserProgramUniformMatrix3x4dv
#define glProgramUniformMatrix3x4dvEXT phaserProgramUniformMatrix3x4dvEXT
#define glProgramUniformMatrix3x4fv phaserProgramUniformMatrix3x4fv
#define glProgramUniformMatrix3x4fvEXT phaserProgramUniformMatrix3x4fvEXT
#define glProgramUniformMatrix4dv phaserProgramUniformMatrix4dv
#define glProgramUniformMatrix4dvEXT phaserProgramUniformMatrix4dvEXT
#define glProgramUniformMatrix4fv phaserProgramUniformMatrix4fv
#define glProgramUniformMatrix4fvEXT phaserProgramUniformMatrix4fvEXT
#define glProgramUniformMatrix4x2dv phaserProgramUniformMatrix4x2dv
#define glProgramUniformMatrix4x2dvEXT phaserProgramUniformMatrix4x2dvEXT
#define glProgramUniformMatrix4x2fv phaserProgramUniformMatrix4x2fv
#define glProgramUniformMatrix4x2fvEXT phaserProgramUniformMatrix4x2fvEXT
#define glProgramUniformMatrix4x3dv phaserProgramUniformMatrix4x3dv
#define glProgramUniformMatrix4x3dvEXT phaserProgramUniformMatrix4x3dvEXT
#define glProgramUniformMatrix4x3fv phaserProgramUniformMatrix4x3fv
#define glProgramUniformMatrix4x3fvEXT phaserProgramUniformMatrix4x3fvEXT
#define glProgramUniformui64NV phaserProgramUniformui64NV
#define glProgramUniformui64vNV phaserProgramUniformui64vNV
#define glProgramVertexLimitNV phaserProgramVertexLimitNV
#define glProvokingVertex phaserProvokingVertex
#define glProvokingVertexEXT phaserProvokingVertexEXT
#define glPushAttrib phaserPushAttrib
#define glPushClientAttrib phaserPushClientAttrib
#define glPushClientAttribDefaultEXT phaserPushClientAttribDefaultEXT
#define glPushDebugGroup phaserPushDebugGroup
#define glPushDebugGroupKHR phaserPushDebugGroupKHR
#define glPushGroupMarkerEXT phaserPushGroupMarkerEXT
#define glPushMatrix phaserPushMatrix
#define glPushName phaserPushName
#define glQueryCounter phaserQueryCounter
#define glQueryCounterEXT phaserQueryCounterEXT
#define glQueryMatrixxOES phaserQueryMatrixxOES
#define glQueryObjectParameteruiAMD phaserQueryObjectParameteruiAMD
#define glQueryResourceNV phaserQueryResourceNV
#define glQueryResourceTagNV phaserQueryResourceTagNV
#define glRasterPos2d phaserRasterPos2d
#define glRasterPos2dv phaserRasterPos2dv
#define glRasterPos2f phaserRasterPos2f
#define glRasterPos2fv phaserRasterPos2fv
#define glRasterPos2i phaserRasterPos2i
#define glRasterPos2iv phaserRasterPos2iv
#define glRasterPos2s phaserRasterPos2s
#define glRasterPos2sv phaserRasterPos2sv
#define glRasterPos2xOES phaserRasterPos2xOES
#define glRasterPos2xvOES phaserRasterPos2xvOES
#define glRasterPos3d phaserRasterPos3d
#define glRasterPos3dv phaserRasterPos3dv
#define glRasterPos3f phaserRasterPos3f
#define glRasterPos3fv phaserRasterPos3fv
#define glRasterPos3i phaserRasterPos3i
#define glRasterPos3iv phaserRasterPos3iv
#define glRasterPos3s phaserRasterPos3s
#define glRasterPos3sv phaserRasterPos3sv
#define glRasterPos3xOES phaserRasterPos3xOES
#define glRasterPos3xvOES phaserRasterPos3xvOES
#define glRasterPos4d phaserRasterPos4d
#define glRasterPos4dv phaserRasterPos4dv
#define glRasterPos4f phaserRasterPos4f
#define glRasterPos4fv phaserRasterPos4fv
#define glRasterPos4i phaserRasterPos4i
#define glRasterPos4iv phaserRasterPos4iv
#define glRasterPos4s phaserRasterPos4s
#define glRasterPos4sv phaserRasterPos4sv
#define glRasterPos4xOES phaserRasterPos4xOES
#define glRasterPos4xvOES phaserRasterPos4xvOES
#define glRasterSamplesEXT phaserRasterSamplesEXT
#define glReadBuffer phaserReadBuffer
#define glReadBufferIndexedEXT phaserReadBufferIndexedEXT
#define glReadBufferNV phaserReadBufferNV
#define glReadBufferRegion phaserReadBufferRegion
#define glReadInstrumentsSGIX phaserReadInstrumentsSGIX
#define glReadPixels phaserReadPixels
#define glReadnPixels phaserReadnPixels
#define glReadnPixelsARB phaserReadnPixelsARB
#define glReadnPixelsEXT phaserReadnPixelsEXT
#define glReadnPixelsKHR phaserReadnPixelsKHR
#define glRectd phaserRectd
#define glRectdv phaserRectdv
#define glRectf phaserRectf
#define glRectfv phaserRectfv
#define glRecti phaserRecti
#define glRectiv phaserRectiv
#define glRects phaserRects
#define glRectsv phaserRectsv
#define glRectxOES phaserRectxOES
#define glRectxvOES phaserRectxvOES
#define glReferencePlaneSGIX phaserReferencePlaneSGIX
#define glReleaseKeyedMutexWin32EXT phaserReleaseKeyedMutexWin32EXT
#define glReleaseShaderCompiler phaserReleaseShaderCompiler
#define glRenderGpuMaskNV phaserRenderGpuMaskNV
#define glRenderMode phaserRenderMode
#define glRenderbufferStorage phaserRenderbufferStorage
#define glRenderbufferStorageEXT phaserRenderbufferStorageEXT
#define glRenderbufferStorageMultisample phaserRenderbufferStorageMultisample
#define glRenderbufferStorageMultisampleANGLE phaserRenderbufferStorageMultisampleANGLE
#define glRenderbufferStorageMultisampleAPPLE phaserRenderbufferStorageMultisampleAPPLE
#define glRenderbufferStorageMultisampleCoverageNV phaserRenderbufferStorageMultisampleCoverageNV
#define glRenderbufferStorageMultisampleEXT phaserRenderbufferStorageMultisampleEXT
#define glRenderbufferStorageMultisampleIMG phaserRenderbufferStorageMultisampleIMG
#define glRenderbufferStorageMultisampleNV phaserRenderbufferStorageMultisampleNV
#define glRenderbufferStorageOES phaserRenderbufferStorageOES
#define glReplacementCodePointerSUN phaserReplacementCodePointerSUN
#define glReplacementCodeubSUN phaserReplacementCodeubSUN
#define glReplacementCodeubvSUN phaserReplacementCodeubvSUN
#define glReplacementCodeuiColor3fVertex3fSUN phaserReplacementCodeuiColor3fVertex3fSUN
#define glReplacementCodeuiColor3fVertex3fvSUN phaserReplacementCodeuiColor3fVertex3fvSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fSUN phaserReplacementCodeuiColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiColor4fNormal3fVertex3fvSUN phaserReplacementCodeuiColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiColor4ubVertex3fSUN phaserReplacementCodeuiColor4ubVertex3fSUN
#define glReplacementCodeuiColor4ubVertex3fvSUN phaserReplacementCodeuiColor4ubVertex3fvSUN
#define glReplacementCodeuiNormal3fVertex3fSUN phaserReplacementCodeuiNormal3fVertex3fSUN
#define glReplacementCodeuiNormal3fVertex3fvSUN phaserReplacementCodeuiNormal3fVertex3fvSUN
#define glReplacementCodeuiSUN phaserReplacementCodeuiSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN phaserReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN phaserReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN phaserReplacementCodeuiTexCoord2fNormal3fVertex3fSUN
#define glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN phaserReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN
#define glReplacementCodeuiTexCoord2fVertex3fSUN phaserReplacementCodeuiTexCoord2fVertex3fSUN
#define glReplacementCodeuiTexCoord2fVertex3fvSUN phaserReplacementCodeuiTexCoord2fVertex3fvSUN
#define glReplacementCodeuiVertex3fSUN phaserReplacementCodeuiVertex3fSUN
#define glReplacementCodeuiVertex3fvSUN phaserReplacementCodeuiVertex3fvSUN
#define glReplacementCodeuivSUN phaserReplacementCodeuivSUN
#define glReplacementCodeusSUN phaserReplacementCodeusSUN
#define glReplacementCodeusvSUN phaserReplacementCodeusvSUN
#define glRequestResidentProgramsNV phaserRequestResidentProgramsNV
#define glResetHistogram phaserResetHistogram
#define glResetHistogramEXT phaserResetHistogramEXT
#define glResetMinmax phaserResetMinmax
#define glResetMinmaxEXT phaserResetMinmaxEXT
#define glResizeBuffersMESA phaserResizeBuffersMESA
#define glResolveDepthValuesNV phaserResolveDepthValuesNV
#define glResolveMultisampleFramebufferAPPLE phaserResolveMultisampleFramebufferAPPLE
#define glResumeTransformFeedback phaserResumeTransformFeedback
#define glResumeTransformFeedbackNV phaserResumeTransformFeedbackNV
#define glRotated phaserRotated
#define glRotatef phaserRotatef
#define glRotatex phaserRotatex
#define glRotatexOES phaserRotatexOES
#define glSampleCoverage phaserSampleCoverage
#define glSampleCoverageARB phaserSampleCoverageARB
#define glSampleCoveragex phaserSampleCoveragex
#define glSampleCoveragexOES phaserSampleCoveragexOES
#define glSampleMapATI phaserSampleMapATI
#define glSampleMaskEXT phaserSampleMaskEXT
#define glSampleMaskIndexedNV phaserSampleMaskIndexedNV
#define glSampleMaskSGIS phaserSampleMaskSGIS
#define glSampleMaski phaserSampleMaski
#define glSamplePatternEXT phaserSamplePatternEXT
#define glSamplePatternSGIS phaserSamplePatternSGIS
#define glSamplerParameterIiv phaserSamplerParameterIiv
#define glSamplerParameterIivEXT phaserSamplerParameterIivEXT
#define glSamplerParameterIivOES phaserSamplerParameterIivOES
#define glSamplerParameterIuiv phaserSamplerParameterIuiv
#define glSamplerParameterIuivEXT phaserSamplerParameterIuivEXT
#define glSamplerParameterIuivOES phaserSamplerParameterIuivOES
#define glSamplerParameterf phaserSamplerParameterf
#define glSamplerParameterfv phaserSamplerParameterfv
#define glSamplerParameteri phaserSamplerParameteri
#define glSamplerParameteriv phaserSamplerParameteriv
#define glScaled phaserScaled
#define glScalef phaserScalef
#define glScalex phaserScalex
#define glScalexOES phaserScalexOES
#define glScissor phaserScissor
#define glScissorArrayv phaserScissorArrayv
#define glScissorArrayvNV phaserScissorArrayvNV
#define glScissorArrayvOES phaserScissorArrayvOES
#define glScissorIndexed phaserScissorIndexed
#define glScissorIndexedNV phaserScissorIndexedNV
#define glScissorIndexedOES phaserScissorIndexedOES
#define glScissorIndexedv phaserScissorIndexedv
#define glScissorIndexedvNV phaserScissorIndexedvNV
#define glScissorIndexedvOES phaserScissorIndexedvOES
#define glSecondaryColor3b phaserSecondaryColor3b
#define glSecondaryColor3bEXT phaserSecondaryColor3bEXT
#define glSecondaryColor3bv phaserSecondaryColor3bv
#define glSecondaryColor3bvEXT phaserSecondaryColor3bvEXT
#define glSecondaryColor3d phaserSecondaryColor3d
#define glSecondaryColor3dEXT phaserSecondaryColor3dEXT
#define glSecondaryColor3dv phaserSecondaryColor3dv
#define glSecondaryColor3dvEXT phaserSecondaryColor3dvEXT
#define glSecondaryColor3f phaserSecondaryColor3f
#define glSecondaryColor3fEXT phaserSecondaryColor3fEXT
#define glSecondaryColor3fv phaserSecondaryColor3fv
#define glSecondaryColor3fvEXT phaserSecondaryColor3fvEXT
#define glSecondaryColor3hNV phaserSecondaryColor3hNV
#define glSecondaryColor3hvNV phaserSecondaryColor3hvNV
#define glSecondaryColor3i phaserSecondaryColor3i
#define glSecondaryColor3iEXT phaserSecondaryColor3iEXT
#define glSecondaryColor3iv phaserSecondaryColor3iv
#define glSecondaryColor3ivEXT phaserSecondaryColor3ivEXT
#define glSecondaryColor3s phaserSecondaryColor3s
#define glSecondaryColor3sEXT phaserSecondaryColor3sEXT
#define glSecondaryColor3sv phaserSecondaryColor3sv
#define glSecondaryColor3svEXT phaserSecondaryColor3svEXT
#define glSecondaryColor3ub phaserSecondaryColor3ub
#define glSecondaryColor3ubEXT phaserSecondaryColor3ubEXT
#define glSecondaryColor3ubv phaserSecondaryColor3ubv
#define glSecondaryColor3ubvEXT phaserSecondaryColor3ubvEXT
#define glSecondaryColor3ui phaserSecondaryColor3ui
#define glSecondaryColor3uiEXT phaserSecondaryColor3uiEXT
#define glSecondaryColor3uiv phaserSecondaryColor3uiv
#define glSecondaryColor3uivEXT phaserSecondaryColor3uivEXT
#define glSecondaryColor3us phaserSecondaryColor3us
#define glSecondaryColor3usEXT phaserSecondaryColor3usEXT
#define glSecondaryColor3usv phaserSecondaryColor3usv
#define glSecondaryColor3usvEXT phaserSecondaryColor3usvEXT
#define glSecondaryColorFormatNV phaserSecondaryColorFormatNV
#define glSecondaryColorP3ui phaserSecondaryColorP3ui
#define glSecondaryColorP3uiv phaserSecondaryColorP3uiv
#define glSecondaryColorPointer phaserSecondaryColorPointer
#define glSecondaryColorPointerEXT phaserSecondaryColorPointerEXT
#define glSecondaryColorPointerListIBM phaserSecondaryColorPointerListIBM
#define glSelectBuffer phaserSelectBuffer
#define glSelectPerfMonitorCountersAMD phaserSelectPerfMonitorCountersAMD
#define glSemaphoreParameterui64vEXT phaserSemaphoreParameterui64vEXT
#define glSeparableFilter2D phaserSeparableFilter2D
#define glSeparableFilter2DEXT phaserSeparableFilter2DEXT
#define glSetFenceAPPLE phaserSetFenceAPPLE
#define glSetFenceNV phaserSetFenceNV
#define glSetFragmentShaderConstantATI phaserSetFragmentShaderConstantATI
#define glSetInvariantEXT phaserSetInvariantEXT
#define glSetLocalConstantEXT phaserSetLocalConstantEXT
#define glSetMultisamplefvAMD phaserSetMultisamplefvAMD
#define glShadeModel phaserShadeModel
#define glShaderBinary phaserShaderBinary
#define glShaderOp1EXT phaserShaderOp1EXT
#define glShaderOp2EXT phaserShaderOp2EXT
#define glShaderOp3EXT phaserShaderOp3EXT
#define glShaderSource phaserShaderSource
#define glShaderSourceARB phaserShaderSourceARB
#define glShaderStorageBlockBinding phaserShaderStorageBlockBinding
#define glSharpenTexFuncSGIS phaserSharpenTexFuncSGIS
#define glSignalSemaphoreEXT phaserSignalSemaphoreEXT
#define glSignalVkFenceNV phaserSignalVkFenceNV
#define glSignalVkSemaphoreNV phaserSignalVkSemaphoreNV
#define glSpecializeShader phaserSpecializeShader
#define glSpecializeShaderARB phaserSpecializeShaderARB
#define glSpriteParameterfSGIX phaserSpriteParameterfSGIX
#define glSpriteParameterfvSGIX phaserSpriteParameterfvSGIX
#define glSpriteParameteriSGIX phaserSpriteParameteriSGIX
#define glSpriteParameterivSGIX phaserSpriteParameterivSGIX
#define glStartInstrumentsSGIX phaserStartInstrumentsSGIX
#define glStartTilingQCOM phaserStartTilingQCOM
#define glStateCaptureNV phaserStateCaptureNV
#define glStencilClearTagEXT phaserStencilClearTagEXT
#define glStencilFillPathInstancedNV phaserStencilFillPathInstancedNV
#define glStencilFillPathNV phaserStencilFillPathNV
#define glStencilFunc phaserStencilFunc
#define glStencilFuncSeparate phaserStencilFuncSeparate
#define glStencilFuncSeparateATI phaserStencilFuncSeparateATI
#define glStencilMask phaserStencilMask
#define glStencilMaskSeparate phaserStencilMaskSeparate
#define glStencilOp phaserStencilOp
#define glStencilOpSeparate phaserStencilOpSeparate
#define glStencilOpSeparateATI phaserStencilOpSeparateATI
#define glStencilOpValueAMD phaserStencilOpValueAMD
#define glStencilStrokePathInstancedNV phaserStencilStrokePathInstancedNV
#define glStencilStrokePathNV phaserStencilStrokePathNV
#define glStencilThenCoverFillPathInstancedNV phaserStencilThenCoverFillPathInstancedNV
#define glStencilThenCoverFillPathNV phaserStencilThenCoverFillPathNV
#define glStencilThenCoverStrokePathInstancedNV phaserStencilThenCoverStrokePathInstancedNV
#define glStencilThenCoverStrokePathNV phaserStencilThenCoverStrokePathNV
#define glStopInstrumentsSGIX phaserStopInstrumentsSGIX
#define glStringMarkerGREMEDY phaserStringMarkerGREMEDY
#define glSubpixelPrecisionBiasNV phaserSubpixelPrecisionBiasNV
#define glSwizzleEXT phaserSwizzleEXT
#define glSyncTextureINTEL phaserSyncTextureINTEL
#define glTagSampleBufferSGIX phaserTagSampleBufferSGIX
#define glTangent3bEXT phaserTangent3bEXT
#define glTangent3bvEXT phaserTangent3bvEXT
#define glTangent3dEXT phaserTangent3dEXT
#define glTangent3dvEXT phaserTangent3dvEXT
#define glTangent3fEXT phaserTangent3fEXT
#define glTangent3fvEXT phaserTangent3fvEXT
#define glTangent3iEXT phaserTangent3iEXT
#define glTangent3ivEXT phaserTangent3ivEXT
#define glTangent3sEXT phaserTangent3sEXT
#define glTangent3svEXT phaserTangent3svEXT
#define glTangentPointerEXT phaserTangentPointerEXT
#define glTbufferMask3DFX phaserTbufferMask3DFX
#define glTessellationFactorAMD phaserTessellationFactorAMD
#define glTessellationModeAMD phaserTessellationModeAMD
#define glTestFenceAPPLE phaserTestFenceAPPLE
#define glTestFenceNV phaserTestFenceNV
#define glTestObjectAPPLE phaserTestObjectAPPLE
#define glTexBuffer phaserTexBuffer
#define glTexBufferARB phaserTexBufferARB
#define glTexBufferEXT phaserTexBufferEXT
#define glTexBufferOES phaserTexBufferOES
#define glTexBufferRange phaserTexBufferRange
#define glTexBufferRangeEXT phaserTexBufferRangeEXT
#define glTexBufferRangeOES phaserTexBufferRangeOES
#define glTexBumpParameterfvATI phaserTexBumpParameterfvATI
#define glTexBumpParameterivATI phaserTexBumpParameterivATI
#define glTexCoord1bOES phaserTexCoord1bOES
#define glTexCoord1bvOES phaserTexCoord1bvOES
#define glTexCoord1d phaserTexCoord1d
#define glTexCoord1dv phaserTexCoord1dv
#define glTexCoord1f phaserTexCoord1f
#define glTexCoord1fv phaserTexCoord1fv
#define glTexCoord1hNV phaserTexCoord1hNV
#define glTexCoord1hvNV phaserTexCoord1hvNV
#define glTexCoord1i phaserTexCoord1i
#define glTexCoord1iv phaserTexCoord1iv
#define glTexCoord1s phaserTexCoord1s
#define glTexCoord1sv phaserTexCoord1sv
#define glTexCoord1xOES phaserTexCoord1xOES
#define glTexCoord1xvOES phaserTexCoord1xvOES
#define glTexCoord2bOES phaserTexCoord2bOES
#define glTexCoord2bvOES phaserTexCoord2bvOES
#define glTexCoord2d phaserTexCoord2d
#define glTexCoord2dv phaserTexCoord2dv
#define glTexCoord2f phaserTexCoord2f
#define glTexCoord2fColor3fVertex3fSUN phaserTexCoord2fColor3fVertex3fSUN
#define glTexCoord2fColor3fVertex3fvSUN phaserTexCoord2fColor3fVertex3fvSUN
#define glTexCoord2fColor4fNormal3fVertex3fSUN phaserTexCoord2fColor4fNormal3fVertex3fSUN
#define glTexCoord2fColor4fNormal3fVertex3fvSUN phaserTexCoord2fColor4fNormal3fVertex3fvSUN
#define glTexCoord2fColor4ubVertex3fSUN phaserTexCoord2fColor4ubVertex3fSUN
#define glTexCoord2fColor4ubVertex3fvSUN phaserTexCoord2fColor4ubVertex3fvSUN
#define glTexCoord2fNormal3fVertex3fSUN phaserTexCoord2fNormal3fVertex3fSUN
#define glTexCoord2fNormal3fVertex3fvSUN phaserTexCoord2fNormal3fVertex3fvSUN
#define glTexCoord2fVertex3fSUN phaserTexCoord2fVertex3fSUN
#define glTexCoord2fVertex3fvSUN phaserTexCoord2fVertex3fvSUN
#define glTexCoord2fv phaserTexCoord2fv
#define glTexCoord2hNV phaserTexCoord2hNV
#define glTexCoord2hvNV phaserTexCoord2hvNV
#define glTexCoord2i phaserTexCoord2i
#define glTexCoord2iv phaserTexCoord2iv
#define glTexCoord2s phaserTexCoord2s
#define glTexCoord2sv phaserTexCoord2sv
#define glTexCoord2xOES phaserTexCoord2xOES
#define glTexCoord2xvOES phaserTexCoord2xvOES
#define glTexCoord3bOES phaserTexCoord3bOES
#define glTexCoord3bvOES phaserTexCoord3bvOES
#define glTexCoord3d phaserTexCoord3d
#define glTexCoord3dv phaserTexCoord3dv
#define glTexCoord3f phaserTexCoord3f
#define glTexCoord3fv phaserTexCoord3fv
#define glTexCoord3hNV phaserTexCoord3hNV
#define glTexCoord3hvNV phaserTexCoord3hvNV
#define glTexCoord3i phaserTexCoord3i
#define glTexCoord3iv phaserTexCoord3iv
#define glTexCoord3s phaserTexCoord3s
#define glTexCoord3sv phaserTexCoord3sv
#define glTexCoord3xOES phaserTexCoord3xOES
#define glTexCoord3xvOES phaserTexCoord3xvOES
#define glTexCoord4bOES phaserTexCoord4bOES
#define glTexCoord4bvOES phaserTexCoord4bvOES
#define glTexCoord4d phaserTexCoord4d
#define glTexCoord4dv phaserTexCoord4dv
#define glTexCoord4f phaserTexCoord4f
#define glTexCoord4fColor4fNormal3fVertex4fSUN phaserTexCoord4fColor4fNormal3fVertex4fSUN
#define glTexCoord4fColor4fNormal3fVertex4fvSUN phaserTexCoord4fColor4fNormal3fVertex4fvSUN
#define glTexCoord4fVertex4fSUN phaserTexCoord4fVertex4fSUN
#define glTexCoord4fVertex4fvSUN phaserTexCoord4fVertex4fvSUN
#define glTexCoord4fv phaserTexCoord4fv
#define glTexCoord4hNV phaserTexCoord4hNV
#define glTexCoord4hvNV phaserTexCoord4hvNV
#define glTexCoord4i phaserTexCoord4i
#define glTexCoord4iv phaserTexCoord4iv
#define glTexCoord4s phaserTexCoord4s
#define glTexCoord4sv phaserTexCoord4sv
#define glTexCoord4xOES phaserTexCoord4xOES
#define glTexCoord4xvOES phaserTexCoord4xvOES
#define glTexCoordFormatNV phaserTexCoordFormatNV
#define glTexCoordP1ui phaserTexCoordP1ui
#define glTexCoordP1uiv phaserTexCoordP1uiv
#define glTexCoordP2ui phaserTexCoordP2ui
#define glTexCoordP2uiv phaserTexCoordP2uiv
#define glTexCoordP3ui phaserTexCoordP3ui
#define glTexCoordP3uiv phaserTexCoordP3uiv
#define glTexCoordP4ui phaserTexCoordP4ui
#define glTexCoordP4uiv phaserTexCoordP4uiv
#define glTexCoordPointer phaserTexCoordPointer
#define glTexCoordPointerEXT phaserTexCoordPointerEXT
#define glTexCoordPointerListIBM phaserTexCoordPointerListIBM
#define glTexCoordPointervINTEL phaserTexCoordPointervINTEL
#define glTexEnvf phaserTexEnvf
#define glTexEnvfv phaserTexEnvfv
#define glTexEnvi phaserTexEnvi
#define glTexEnviv phaserTexEnviv
#define glTexEnvx phaserTexEnvx
#define glTexEnvxOES phaserTexEnvxOES
#define glTexEnvxv phaserTexEnvxv
#define glTexEnvxvOES phaserTexEnvxvOES
#define glTexFilterFuncSGIS phaserTexFilterFuncSGIS
#define glTexGend phaserTexGend
#define glTexGendv phaserTexGendv
#define glTexGenf phaserTexGenf
#define glTexGenfOES phaserTexGenfOES
#define glTexGenfv phaserTexGenfv
#define glTexGenfvOES phaserTexGenfvOES
#define glTexGeni phaserTexGeni
#define glTexGeniOES phaserTexGeniOES
#define glTexGeniv phaserTexGeniv
#define glTexGenivOES phaserTexGenivOES
#define glTexGenxOES phaserTexGenxOES
#define glTexGenxvOES phaserTexGenxvOES
#define glTexImage1D phaserTexImage1D
#define glTexImage2D phaserTexImage2D
#define glTexImage2DMultisample phaserTexImage2DMultisample
#define glTexImage2DMultisampleCoverageNV phaserTexImage2DMultisampleCoverageNV
#define glTexImage3D phaserTexImage3D
#define glTexImage3DEXT phaserTexImage3DEXT
#define glTexImage3DMultisample phaserTexImage3DMultisample
#define glTexImage3DMultisampleCoverageNV phaserTexImage3DMultisampleCoverageNV
#define glTexImage3DOES phaserTexImage3DOES
#define glTexImage4DSGIS phaserTexImage4DSGIS
#define glTexPageCommitmentARB phaserTexPageCommitmentARB
#define glTexPageCommitmentEXT phaserTexPageCommitmentEXT
#define glTexParameterIiv phaserTexParameterIiv
#define glTexParameterIivEXT phaserTexParameterIivEXT
#define glTexParameterIivOES phaserTexParameterIivOES
#define glTexParameterIuiv phaserTexParameterIuiv
#define glTexParameterIuivEXT phaserTexParameterIuivEXT
#define glTexParameterIuivOES phaserTexParameterIuivOES
#define glTexParameterf phaserTexParameterf
#define glTexParameterfv phaserTexParameterfv
#define glTexParameteri phaserTexParameteri
#define glTexParameteriv phaserTexParameteriv
#define glTexParameterx phaserTexParameterx
#define glTexParameterxOES phaserTexParameterxOES
#define glTexParameterxv phaserTexParameterxv
#define glTexParameterxvOES phaserTexParameterxvOES
#define glTexRenderbufferNV phaserTexRenderbufferNV
#define glTexStorage1D phaserTexStorage1D
#define glTexStorage1DEXT phaserTexStorage1DEXT
#define glTexStorage2D phaserTexStorage2D
#define glTexStorage2DEXT phaserTexStorage2DEXT
#define glTexStorage2DMultisample phaserTexStorage2DMultisample
#define glTexStorage3D phaserTexStorage3D
#define glTexStorage3DEXT phaserTexStorage3DEXT
#define glTexStorage3DMultisample phaserTexStorage3DMultisample
#define glTexStorage3DMultisampleOES phaserTexStorage3DMultisampleOES
#define glTexStorageMem1DEXT phaserTexStorageMem1DEXT
#define glTexStorageMem2DEXT phaserTexStorageMem2DEXT
#define glTexStorageMem2DMultisampleEXT phaserTexStorageMem2DMultisampleEXT
#define glTexStorageMem3DEXT phaserTexStorageMem3DEXT
#define glTexStorageMem3DMultisampleEXT phaserTexStorageMem3DMultisampleEXT
#define glTexStorageSparseAMD phaserTexStorageSparseAMD
#define glTexSubImage1D phaserTexSubImage1D
#define glTexSubImage1DEXT phaserTexSubImage1DEXT
#define glTexSubImage2D phaserTexSubImage2D
#define glTexSubImage2DEXT phaserTexSubImage2DEXT
#define glTexSubImage3D phaserTexSubImage3D
#define glTexSubImage3DEXT phaserTexSubImage3DEXT
#define glTexSubImage3DOES phaserTexSubImage3DOES
#define glTexSubImage4DSGIS phaserTexSubImage4DSGIS
#define glTextureBarrier phaserTextureBarrier
#define glTextureBarrierNV phaserTextureBarrierNV
#define glTextureBuffer phaserTextureBuffer
#define glTextureBufferEXT phaserTextureBufferEXT
#define glTextureBufferRange phaserTextureBufferRange
#define glTextureBufferRangeEXT phaserTextureBufferRangeEXT
#define glTextureColorMaskSGIS phaserTextureColorMaskSGIS
#define glTextureFoveationParametersQCOM phaserTextureFoveationParametersQCOM
#define glTextureImage1DEXT phaserTextureImage1DEXT
#define glTextureImage2DEXT phaserTextureImage2DEXT
#define glTextureImage2DMultisampleCoverageNV phaserTextureImage2DMultisampleCoverageNV
#define glTextureImage2DMultisampleNV phaserTextureImage2DMultisampleNV
#define glTextureImage3DEXT phaserTextureImage3DEXT
#define glTextureImage3DMultisampleCoverageNV phaserTextureImage3DMultisampleCoverageNV
#define glTextureImage3DMultisampleNV phaserTextureImage3DMultisampleNV
#define glTextureLightEXT phaserTextureLightEXT
#define glTextureMaterialEXT phaserTextureMaterialEXT
#define glTextureNormalEXT phaserTextureNormalEXT
#define glTexturePageCommitmentEXT phaserTexturePageCommitmentEXT
#define glTextureParameterIiv phaserTextureParameterIiv
#define glTextureParameterIivEXT phaserTextureParameterIivEXT
#define glTextureParameterIuiv phaserTextureParameterIuiv
#define glTextureParameterIuivEXT phaserTextureParameterIuivEXT
#define glTextureParameterf phaserTextureParameterf
#define glTextureParameterfEXT phaserTextureParameterfEXT
#define glTextureParameterfv phaserTextureParameterfv
#define glTextureParameterfvEXT phaserTextureParameterfvEXT
#define glTextureParameteri phaserTextureParameteri
#define glTextureParameteriEXT phaserTextureParameteriEXT
#define glTextureParameteriv phaserTextureParameteriv
#define glTextureParameterivEXT phaserTextureParameterivEXT
#define glTextureRangeAPPLE phaserTextureRangeAPPLE
#define glTextureRenderbufferEXT phaserTextureRenderbufferEXT
#define glTextureStorage1D phaserTextureStorage1D
#define glTextureStorage1DEXT phaserTextureStorage1DEXT
#define glTextureStorage2D phaserTextureStorage2D
#define glTextureStorage2DEXT phaserTextureStorage2DEXT
#define glTextureStorage2DMultisample phaserTextureStorage2DMultisample
#define glTextureStorage2DMultisampleEXT phaserTextureStorage2DMultisampleEXT
#define glTextureStorage3D phaserTextureStorage3D
#define glTextureStorage3DEXT phaserTextureStorage3DEXT
#define glTextureStorage3DMultisample phaserTextureStorage3DMultisample
#define glTextureStorage3DMultisampleEXT phaserTextureStorage3DMultisampleEXT
#define glTextureStorageMem1DEXT phaserTextureStorageMem1DEXT
#define glTextureStorageMem2DEXT phaserTextureStorageMem2DEXT
#define glTextureStorageMem2DMultisampleEXT phaserTextureStorageMem2DMultisampleEXT
#define glTextureStorageMem3DEXT phaserTextureStorageMem3DEXT
#define glTextureStorageMem3DMultisampleEXT phaserTextureStorageMem3DMultisampleEXT
#define glTextureStorageSparseAMD phaserTextureStorageSparseAMD
#define glTextureSubImage1D phaserTextureSubImage1D
#define glTextureSubImage1DEXT phaserTextureSubImage1DEXT
#define glTextureSubImage2D phaserTextureSubImage2D
#define glTextureSubImage2DEXT phaserTextureSubImage2DEXT
#define glTextureSubImage3D phaserTextureSubImage3D
#define glTextureSubImage3DEXT phaserTextureSubImage3DEXT
#define glTextureView phaserTextureView
#define glTextureViewEXT phaserTextureViewEXT
#define glTextureViewOES phaserTextureViewOES
#define glTrackMatrixNV phaserTrackMatrixNV
#define glTransformFeedbackAttribsNV phaserTransformFeedbackAttribsNV
#define glTransformFeedbackBufferBase phaserTransformFeedbackBufferBase
#define glTransformFeedbackBufferRange phaserTransformFeedbackBufferRange
#define glTransformFeedbackStreamAttribsNV phaserTransformFeedbackStreamAttribsNV
#define glTransformFeedbackVaryings phaserTransformFeedbackVaryings
#define glTransformFeedbackVaryingsEXT phaserTransformFeedbackVaryingsEXT
#define glTransformFeedbackVaryingsNV phaserTransformFeedbackVaryingsNV
#define glTransformPathNV phaserTransformPathNV
#define glTranslated phaserTranslated
#define glTranslatef phaserTranslatef
#define glTranslatex phaserTranslatex
#define glTranslatexOES phaserTranslatexOES
#define glUniform1d phaserUniform1d
#define glUniform1dv phaserUniform1dv
#define glUniform1f phaserUniform1f
#define glUniform1fARB phaserUniform1fARB
#define glUniform1fv phaserUniform1fv
#define glUniform1fvARB phaserUniform1fvARB
#define glUniform1i phaserUniform1i
#define glUniform1i64ARB phaserUniform1i64ARB
#define glUniform1i64NV phaserUniform1i64NV
#define glUniform1i64vARB phaserUniform1i64vARB
#define glUniform1i64vNV phaserUniform1i64vNV
#define glUniform1iARB phaserUniform1iARB
#define glUniform1iv phaserUniform1iv
#define glUniform1ivARB phaserUniform1ivARB
#define glUniform1ui phaserUniform1ui
#define glUniform1ui64ARB phaserUniform1ui64ARB
#define glUniform1ui64NV phaserUniform1ui64NV
#define glUniform1ui64vARB phaserUniform1ui64vARB
#define glUniform1ui64vNV phaserUniform1ui64vNV
#define glUniform1uiEXT phaserUniform1uiEXT
#define glUniform1uiv phaserUniform1uiv
#define glUniform1uivEXT phaserUniform1uivEXT
#define glUniform2d phaserUniform2d
#define glUniform2dv phaserUniform2dv
#define glUniform2f phaserUniform2f
#define glUniform2fARB phaserUniform2fARB
#define glUniform2fv phaserUniform2fv
#define glUniform2fvARB phaserUniform2fvARB
#define glUniform2i phaserUniform2i
#define glUniform2i64ARB phaserUniform2i64ARB
#define glUniform2i64NV phaserUniform2i64NV
#define glUniform2i64vARB phaserUniform2i64vARB
#define glUniform2i64vNV phaserUniform2i64vNV
#define glUniform2iARB phaserUniform2iARB
#define glUniform2iv phaserUniform2iv
#define glUniform2ivARB phaserUniform2ivARB
#define glUniform2ui phaserUniform2ui
#define glUniform2ui64ARB phaserUniform2ui64ARB
#define glUniform2ui64NV phaserUniform2ui64NV
#define glUniform2ui64vARB phaserUniform2ui64vARB
#define glUniform2ui64vNV phaserUniform2ui64vNV
#define glUniform2uiEXT phaserUniform2uiEXT
#define glUniform2uiv phaserUniform2uiv
#define glUniform2uivEXT phaserUniform2uivEXT
#define glUniform3d phaserUniform3d
#define glUniform3dv phaserUniform3dv
#define glUniform3f phaserUniform3f
#define glUniform3fARB phaserUniform3fARB
#define glUniform3fv phaserUniform3fv
#define glUniform3fvARB phaserUniform3fvARB
#define glUniform3i phaserUniform3i
#define glUniform3i64ARB phaserUniform3i64ARB
#define glUniform3i64NV phaserUniform3i64NV
#define glUniform3i64vARB phaserUniform3i64vARB
#define glUniform3i64vNV phaserUniform3i64vNV
#define glUniform3iARB phaserUniform3iARB
#define glUniform3iv phaserUniform3iv
#define glUniform3ivARB phaserUniform3ivARB
#define glUniform3ui phaserUniform3ui
#define glUniform3ui64ARB phaserUniform3ui64ARB
#define glUniform3ui64NV phaserUniform3ui64NV
#define glUniform3ui64vARB phaserUniform3ui64vARB
#define glUniform3ui64vNV phaserUniform3ui64vNV
#define glUniform3uiEXT phaserUniform3uiEXT
#define glUniform3uiv phaserUniform3uiv
#define glUniform3uivEXT phaserUniform3uivEXT
#define glUniform4d phaserUniform4d
#define glUniform4dv phaserUniform4dv
#define glUniform4f phaserUniform4f
#define glUniform4fARB phaserUniform4fARB
#define glUniform4fv phaserUniform4fv
#define glUniform4fvARB phaserUniform4fvARB
#define glUniform4i phaserUniform4i
#define glUniform4i64ARB phaserUniform4i64ARB
#define glUniform4i64NV phaserUniform4i64NV
#define glUniform4i64vARB phaserUniform4i64vARB
#define glUniform4i64vNV phaserUniform4i64vNV
#define glUniform4iARB phaserUniform4iARB
#define glUniform4iv phaserUniform4iv
#define glUniform4ivARB phaserUniform4ivARB
#define glUniform4ui phaserUniform4ui
#define glUniform4ui64ARB phaserUniform4ui64ARB
#define glUniform4ui64NV phaserUniform4ui64NV
#define glUniform4ui64vARB phaserUniform4ui64vARB
#define glUniform4ui64vNV phaserUniform4ui64vNV
#define glUniform4uiEXT phaserUniform4uiEXT
#define glUniform4uiv phaserUniform4uiv
#define glUniform4uivEXT phaserUniform4uivEXT
#define glUniformBlockBinding phaserUniformBlockBinding
#define glUniformBufferEXT phaserUniformBufferEXT
#define glUniformHandleui64ARB phaserUniformHandleui64ARB
#define glUniformHandleui64IMG phaserUniformHandleui64IMG
#define glUniformHandleui64NV phaserUniformHandleui64NV
#define glUniformHandleui64vARB phaserUniformHandleui64vARB
#define glUniformHandleui64vIMG phaserUniformHandleui64vIMG
#define glUniformHandleui64vNV phaserUniformHandleui64vNV
#define glUniformMatrix2dv phaserUniformMatrix2dv
#define glUniformMatrix2fv phaserUniformMatrix2fv
#define glUniformMatrix2fvARB phaserUniformMatrix2fvARB
#define glUniformMatrix2x3dv phaserUniformMatrix2x3dv
#define glUniformMatrix2x3fv phaserUniformMatrix2x3fv
#define glUniformMatrix2x3fvNV phaserUniformMatrix2x3fvNV
#define glUniformMatrix2x4dv phaserUniformMatrix2x4dv
#define glUniformMatrix2x4fv phaserUniformMatrix2x4fv
#define glUniformMatrix2x4fvNV phaserUniformMatrix2x4fvNV
#define glUniformMatrix3dv phaserUniformMatrix3dv
#define glUniformMatrix3fv phaserUniformMatrix3fv
#define glUniformMatrix3fvARB phaserUniformMatrix3fvARB
#define glUniformMatrix3x2dv phaserUniformMatrix3x2dv
#define glUniformMatrix3x2fv phaserUniformMatrix3x2fv
#define glUniformMatrix3x2fvNV phaserUniformMatrix3x2fvNV
#define glUniformMatrix3x4dv phaserUniformMatrix3x4dv
#define glUniformMatrix3x4fv phaserUniformMatrix3x4fv
#define glUniformMatrix3x4fvNV phaserUniformMatrix3x4fvNV
#define glUniformMatrix4dv phaserUniformMatrix4dv
#define glUniformMatrix4fv phaserUniformMatrix4fv
#define glUniformMatrix4fvARB phaserUniformMatrix4fvARB
#define glUniformMatrix4x2dv phaserUniformMatrix4x2dv
#define glUniformMatrix4x2fv phaserUniformMatrix4x2fv
#define glUniformMatrix4x2fvNV phaserUniformMatrix4x2fvNV
#define glUniformMatrix4x3dv phaserUniformMatrix4x3dv
#define glUniformMatrix4x3fv phaserUniformMatrix4x3fv
#define glUniformMatrix4x3fvNV phaserUniformMatrix4x3fvNV
#define glUniformSubroutinesuiv phaserUniformSubroutinesuiv
#define glUniformui64NV phaserUniformui64NV
#define glUniformui64vNV phaserUniformui64vNV
#define glUnlockArraysEXT phaserUnlockArraysEXT
#define glUnmapBuffer phaserUnmapBuffer
#define glUnmapBufferARB phaserUnmapBufferARB
#define glUnmapBufferOES phaserUnmapBufferOES
#define glUnmapNamedBuffer phaserUnmapNamedBuffer
#define glUnmapNamedBufferEXT phaserUnmapNamedBufferEXT
#define glUnmapObjectBufferATI phaserUnmapObjectBufferATI
#define glUnmapTexture2DINTEL phaserUnmapTexture2DINTEL
#define glUpdateObjectBufferATI phaserUpdateObjectBufferATI
#define glUseProgram phaserUseProgram
#define glUseProgramObjectARB phaserUseProgramObjectARB
#define glUseProgramStages phaserUseProgramStages
#define glUseProgramStagesEXT phaserUseProgramStagesEXT
#define glUseShaderProgramEXT phaserUseShaderProgramEXT
#define glVDPAUFiniNV phaserVDPAUFiniNV
#define glVDPAUGetSurfaceivNV phaserVDPAUGetSurfaceivNV
#define glVDPAUInitNV phaserVDPAUInitNV
#define glVDPAUIsSurfaceNV phaserVDPAUIsSurfaceNV
#define glVDPAUMapSurfacesNV phaserVDPAUMapSurfacesNV
#define glVDPAURegisterOutputSurfaceNV phaserVDPAURegisterOutputSurfaceNV
#define glVDPAURegisterVideoSurfaceNV phaserVDPAURegisterVideoSurfaceNV
#define glVDPAUSurfaceAccessNV phaserVDPAUSurfaceAccessNV
#define glVDPAUUnmapSurfacesNV phaserVDPAUUnmapSurfacesNV
#define glVDPAUUnregisterSurfaceNV phaserVDPAUUnregisterSurfaceNV
#define glValidateProgram phaserValidateProgram
#define glValidateProgramARB phaserValidateProgramARB
#define glValidateProgramPipeline phaserValidateProgramPipeline
#define glValidateProgramPipelineEXT phaserValidateProgramPipelineEXT
#define glVariantArrayObjectATI phaserVariantArrayObjectATI
#define glVariantPointerEXT phaserVariantPointerEXT
#define glVariantbvEXT phaserVariantbvEXT
#define glVariantdvEXT phaserVariantdvEXT
#define glVariantfvEXT phaserVariantfvEXT
#define glVariantivEXT phaserVariantivEXT
#define glVariantsvEXT phaserVariantsvEXT
#define glVariantubvEXT phaserVariantubvEXT
#define glVariantuivEXT phaserVariantuivEXT
#define glVariantusvEXT phaserVariantusvEXT
#define glVertex2bOES phaserVertex2bOES
#define glVertex2bvOES phaserVertex2bvOES
#define glVertex2d phaserVertex2d
#define glVertex2dv phaserVertex2dv
#define glVertex2f phaserVertex2f
#define glVertex2fv phaserVertex2fv
#define glVertex2hNV phaserVertex2hNV
#define glVertex2hvNV phaserVertex2hvNV
#define glVertex2i phaserVertex2i
#define glVertex2iv phaserVertex2iv
#define glVertex2s phaserVertex2s
#define glVertex2sv phaserVertex2sv
#define glVertex2xOES phaserVertex2xOES
#define glVertex2xvOES phaserVertex2xvOES
#define glVertex3bOES phaserVertex3bOES
#define glVertex3bvOES phaserVertex3bvOES
#define glVertex3d phaserVertex3d
#define glVertex3dv phaserVertex3dv
#define glVertex3f phaserVertex3f
#define glVertex3fv phaserVertex3fv
#define glVertex3hNV phaserVertex3hNV
#define glVertex3hvNV phaserVertex3hvNV
#define glVertex3i phaserVertex3i
#define glVertex3iv phaserVertex3iv
#define glVertex3s phaserVertex3s
#define glVertex3sv phaserVertex3sv
#define glVertex3xOES phaserVertex3xOES
#define glVertex3xvOES phaserVertex3xvOES
#define glVertex4bOES phaserVertex4bOES
#define glVertex4bvOES phaserVertex4bvOES
#define glVertex4d phaserVertex4d
#define glVertex4dv phaserVertex4dv
#define glVertex4f phaserVertex4f
#define glVertex4fv phaserVertex4fv
#define glVertex4hNV phaserVertex4hNV
#define glVertex4hvNV phaserVertex4hvNV
#define glVertex4i phaserVertex4i
#define glVertex4iv phaserVertex4iv
#define glVertex4s phaserVertex4s
#define glVertex4sv phaserVertex4sv
#define glVertex4xOES phaserVertex4xOES
#define glVertex4xvOES phaserVertex4xvOES
#define glVertexArrayAttribBinding phaserVertexArrayAttribBinding
#define glVertexArrayAttribFormat phaserVertexArrayAttribFormat
#define glVertexArrayAttribIFormat phaserVertexArrayAttribIFormat
#define glVertexArrayAttribLFormat phaserVertexArrayAttribLFormat
#define glVertexArrayBindVertexBufferEXT phaserVertexArrayBindVertexBufferEXT
#define glVertexArrayBindingDivisor phaserVertexArrayBindingDivisor
#define glVertexArrayColorOffsetEXT phaserVertexArrayColorOffsetEXT
#define glVertexArrayEdgeFlagOffsetEXT phaserVertexArrayEdgeFlagOffsetEXT
#define glVertexArrayElementBuffer phaserVertexArrayElementBuffer
#define glVertexArrayFogCoordOffsetEXT phaserVertexArrayFogCoordOffsetEXT
#define glVertexArrayIndexOffsetEXT phaserVertexArrayIndexOffsetEXT
#define glVertexArrayMultiTexCoordOffsetEXT phaserVertexArrayMultiTexCoordOffsetEXT
#define glVertexArrayNormalOffsetEXT phaserVertexArrayNormalOffsetEXT
#define glVertexArrayParameteriAPPLE phaserVertexArrayParameteriAPPLE
#define glVertexArrayRangeAPPLE phaserVertexArrayRangeAPPLE
#define glVertexArrayRangeNV phaserVertexArrayRangeNV
#define glVertexArraySecondaryColorOffsetEXT phaserVertexArraySecondaryColorOffsetEXT
#define glVertexArrayTexCoordOffsetEXT phaserVertexArrayTexCoordOffsetEXT
#define glVertexArrayVertexAttribBindingEXT phaserVertexArrayVertexAttribBindingEXT
#define glVertexArrayVertexAttribDivisorEXT phaserVertexArrayVertexAttribDivisorEXT
#define glVertexArrayVertexAttribFormatEXT phaserVertexArrayVertexAttribFormatEXT
#define glVertexArrayVertexAttribIFormatEXT phaserVertexArrayVertexAttribIFormatEXT
#define glVertexArrayVertexAttribIOffsetEXT phaserVertexArrayVertexAttribIOffsetEXT
#define glVertexArrayVertexAttribLFormatEXT phaserVertexArrayVertexAttribLFormatEXT
#define glVertexArrayVertexAttribLOffsetEXT phaserVertexArrayVertexAttribLOffsetEXT
#define glVertexArrayVertexAttribOffsetEXT phaserVertexArrayVertexAttribOffsetEXT
#define glVertexArrayVertexBindingDivisorEXT phaserVertexArrayVertexBindingDivisorEXT
#define glVertexArrayVertexBuffer phaserVertexArrayVertexBuffer
#define glVertexArrayVertexBuffers phaserVertexArrayVertexBuffers
#define glVertexArrayVertexOffsetEXT phaserVertexArrayVertexOffsetEXT
#define glVertexAttrib1d phaserVertexAttrib1d
#define glVertexAttrib1dARB phaserVertexAttrib1dARB
#define glVertexAttrib1dNV phaserVertexAttrib1dNV
#define glVertexAttrib1dv phaserVertexAttrib1dv
#define glVertexAttrib1dvARB phaserVertexAttrib1dvARB
#define glVertexAttrib1dvNV phaserVertexAttrib1dvNV
#define glVertexAttrib1f phaserVertexAttrib1f
#define glVertexAttrib1fARB phaserVertexAttrib1fARB
#define glVertexAttrib1fNV phaserVertexAttrib1fNV
#define glVertexAttrib1fv phaserVertexAttrib1fv
#define glVertexAttrib1fvARB phaserVertexAttrib1fvARB
#define glVertexAttrib1fvNV phaserVertexAttrib1fvNV
#define glVertexAttrib1hNV phaserVertexAttrib1hNV
#define glVertexAttrib1hvNV phaserVertexAttrib1hvNV
#define glVertexAttrib1s phaserVertexAttrib1s
#define glVertexAttrib1sARB phaserVertexAttrib1sARB
#define glVertexAttrib1sNV phaserVertexAttrib1sNV
#define glVertexAttrib1sv phaserVertexAttrib1sv
#define glVertexAttrib1svARB phaserVertexAttrib1svARB
#define glVertexAttrib1svNV phaserVertexAttrib1svNV
#define glVertexAttrib2d phaserVertexAttrib2d
#define glVertexAttrib2dARB phaserVertexAttrib2dARB
#define glVertexAttrib2dNV phaserVertexAttrib2dNV
#define glVertexAttrib2dv phaserVertexAttrib2dv
#define glVertexAttrib2dvARB phaserVertexAttrib2dvARB
#define glVertexAttrib2dvNV phaserVertexAttrib2dvNV
#define glVertexAttrib2f phaserVertexAttrib2f
#define glVertexAttrib2fARB phaserVertexAttrib2fARB
#define glVertexAttrib2fNV phaserVertexAttrib2fNV
#define glVertexAttrib2fv phaserVertexAttrib2fv
#define glVertexAttrib2fvARB phaserVertexAttrib2fvARB
#define glVertexAttrib2fvNV phaserVertexAttrib2fvNV
#define glVertexAttrib2hNV phaserVertexAttrib2hNV
#define glVertexAttrib2hvNV phaserVertexAttrib2hvNV
#define glVertexAttrib2s phaserVertexAttrib2s
#define glVertexAttrib2sARB phaserVertexAttrib2sARB
#define glVertexAttrib2sNV phaserVertexAttrib2sNV
#define glVertexAttrib2sv phaserVertexAttrib2sv
#define glVertexAttrib2svARB phaserVertexAttrib2svARB
#define glVertexAttrib2svNV phaserVertexAttrib2svNV
#define glVertexAttrib3d phaserVertexAttrib3d
#define glVertexAttrib3dARB phaserVertexAttrib3dARB
#define glVertexAttrib3dNV phaserVertexAttrib3dNV
#define glVertexAttrib3dv phaserVertexAttrib3dv
#define glVertexAttrib3dvARB phaserVertexAttrib3dvARB
#define glVertexAttrib3dvNV phaserVertexAttrib3dvNV
#define glVertexAttrib3f phaserVertexAttrib3f
#define glVertexAttrib3fARB phaserVertexAttrib3fARB
#define glVertexAttrib3fNV phaserVertexAttrib3fNV
#define glVertexAttrib3fv phaserVertexAttrib3fv
#define glVertexAttrib3fvARB phaserVertexAttrib3fvARB
#define glVertexAttrib3fvNV phaserVertexAttrib3fvNV
#define glVertexAttrib3hNV phaserVertexAttrib3hNV
#define glVertexAttrib3hvNV phaserVertexAttrib3hvNV
#define glVertexAttrib3s phaserVertexAttrib3s
#define glVertexAttrib3sARB phaserVertexAttrib3sARB
#define glVertexAttrib3sNV phaserVertexAttrib3sNV
#define glVertexAttrib3sv phaserVertexAttrib3sv
#define glVertexAttrib3svARB phaserVertexAttrib3svARB
#define glVertexAttrib3svNV phaserVertexAttrib3svNV
#define glVertexAttrib4Nbv phaserVertexAttrib4Nbv
#define glVertexAttrib4NbvARB phaserVertexAttrib4NbvARB
#define glVertexAttrib4Niv phaserVertexAttrib4Niv
#define glVertexAttrib4NivARB phaserVertexAttrib4NivARB
#define glVertexAttrib4Nsv phaserVertexAttrib4Nsv
#define glVertexAttrib4NsvARB phaserVertexAttrib4NsvARB
#define glVertexAttrib4Nub phaserVertexAttrib4Nub
#define glVertexAttrib4NubARB phaserVertexAttrib4NubARB
#define glVertexAttrib4Nubv phaserVertexAttrib4Nubv
#define glVertexAttrib4NubvARB phaserVertexAttrib4NubvARB
#define glVertexAttrib4Nuiv phaserVertexAttrib4Nuiv
#define glVertexAttrib4NuivARB phaserVertexAttrib4NuivARB
#define glVertexAttrib4Nusv phaserVertexAttrib4Nusv
#define glVertexAttrib4NusvARB phaserVertexAttrib4NusvARB
#define glVertexAttrib4bv phaserVertexAttrib4bv
#define glVertexAttrib4bvARB phaserVertexAttrib4bvARB
#define glVertexAttrib4d phaserVertexAttrib4d
#define glVertexAttrib4dARB phaserVertexAttrib4dARB
#define glVertexAttrib4dNV phaserVertexAttrib4dNV
#define glVertexAttrib4dv phaserVertexAttrib4dv
#define glVertexAttrib4dvARB phaserVertexAttrib4dvARB
#define glVertexAttrib4dvNV phaserVertexAttrib4dvNV
#define glVertexAttrib4f phaserVertexAttrib4f
#define glVertexAttrib4fARB phaserVertexAttrib4fARB
#define glVertexAttrib4fNV phaserVertexAttrib4fNV
#define glVertexAttrib4fv phaserVertexAttrib4fv
#define glVertexAttrib4fvARB phaserVertexAttrib4fvARB
#define glVertexAttrib4fvNV phaserVertexAttrib4fvNV
#define glVertexAttrib4hNV phaserVertexAttrib4hNV
#define glVertexAttrib4hvNV phaserVertexAttrib4hvNV
#define glVertexAttrib4iv phaserVertexAttrib4iv
#define glVertexAttrib4ivARB phaserVertexAttrib4ivARB
#define glVertexAttrib4s phaserVertexAttrib4s
#define glVertexAttrib4sARB phaserVertexAttrib4sARB
#define glVertexAttrib4sNV phaserVertexAttrib4sNV
#define glVertexAttrib4sv phaserVertexAttrib4sv
#define glVertexAttrib4svARB phaserVertexAttrib4svARB
#define glVertexAttrib4svNV phaserVertexAttrib4svNV
#define glVertexAttrib4ubNV phaserVertexAttrib4ubNV
#define glVertexAttrib4ubv phaserVertexAttrib4ubv
#define glVertexAttrib4ubvARB phaserVertexAttrib4ubvARB
#define glVertexAttrib4ubvNV phaserVertexAttrib4ubvNV
#define glVertexAttrib4uiv phaserVertexAttrib4uiv
#define glVertexAttrib4uivARB phaserVertexAttrib4uivARB
#define glVertexAttrib4usv phaserVertexAttrib4usv
#define glVertexAttrib4usvARB phaserVertexAttrib4usvARB
#define glVertexAttribArrayObjectATI phaserVertexAttribArrayObjectATI
#define glVertexAttribBinding phaserVertexAttribBinding
#define glVertexAttribDivisor phaserVertexAttribDivisor
#define glVertexAttribDivisorANGLE phaserVertexAttribDivisorANGLE
#define glVertexAttribDivisorARB phaserVertexAttribDivisorARB
#define glVertexAttribDivisorEXT phaserVertexAttribDivisorEXT
#define glVertexAttribDivisorNV phaserVertexAttribDivisorNV
#define glVertexAttribFormat phaserVertexAttribFormat
#define glVertexAttribFormatNV phaserVertexAttribFormatNV
#define glVertexAttribI1i phaserVertexAttribI1i
#define glVertexAttribI1iEXT phaserVertexAttribI1iEXT
#define glVertexAttribI1iv phaserVertexAttribI1iv
#define glVertexAttribI1ivEXT phaserVertexAttribI1ivEXT
#define glVertexAttribI1ui phaserVertexAttribI1ui
#define glVertexAttribI1uiEXT phaserVertexAttribI1uiEXT
#define glVertexAttribI1uiv phaserVertexAttribI1uiv
#define glVertexAttribI1uivEXT phaserVertexAttribI1uivEXT
#define glVertexAttribI2i phaserVertexAttribI2i
#define glVertexAttribI2iEXT phaserVertexAttribI2iEXT
#define glVertexAttribI2iv phaserVertexAttribI2iv
#define glVertexAttribI2ivEXT phaserVertexAttribI2ivEXT
#define glVertexAttribI2ui phaserVertexAttribI2ui
#define glVertexAttribI2uiEXT phaserVertexAttribI2uiEXT
#define glVertexAttribI2uiv phaserVertexAttribI2uiv
#define glVertexAttribI2uivEXT phaserVertexAttribI2uivEXT
#define glVertexAttribI3i phaserVertexAttribI3i
#define glVertexAttribI3iEXT phaserVertexAttribI3iEXT
#define glVertexAttribI3iv phaserVertexAttribI3iv
#define glVertexAttribI3ivEXT phaserVertexAttribI3ivEXT
#define glVertexAttribI3ui phaserVertexAttribI3ui
#define glVertexAttribI3uiEXT phaserVertexAttribI3uiEXT
#define glVertexAttribI3uiv phaserVertexAttribI3uiv
#define glVertexAttribI3uivEXT phaserVertexAttribI3uivEXT
#define glVertexAttribI4bv phaserVertexAttribI4bv
#define glVertexAttribI4bvEXT phaserVertexAttribI4bvEXT
#define glVertexAttribI4i phaserVertexAttribI4i
#define glVertexAttribI4iEXT phaserVertexAttribI4iEXT
#define glVertexAttribI4iv phaserVertexAttribI4iv
#define glVertexAttribI4ivEXT phaserVertexAttribI4ivEXT
#define glVertexAttribI4sv phaserVertexAttribI4sv
#define glVertexAttribI4svEXT phaserVertexAttribI4svEXT
#define glVertexAttribI4ubv phaserVertexAttribI4ubv
#define glVertexAttribI4ubvEXT phaserVertexAttribI4ubvEXT
#define glVertexAttribI4ui phaserVertexAttribI4ui
#define glVertexAttribI4uiEXT phaserVertexAttribI4uiEXT
#define glVertexAttribI4uiv phaserVertexAttribI4uiv
#define glVertexAttribI4uivEXT phaserVertexAttribI4uivEXT
#define glVertexAttribI4usv phaserVertexAttribI4usv
#define glVertexAttribI4usvEXT phaserVertexAttribI4usvEXT
#define glVertexAttribIFormat phaserVertexAttribIFormat
#define glVertexAttribIFormatNV phaserVertexAttribIFormatNV
#define glVertexAttribIPointer phaserVertexAttribIPointer
#define glVertexAttribIPointerEXT phaserVertexAttribIPointerEXT
#define glVertexAttribL1d phaserVertexAttribL1d
#define glVertexAttribL1dEXT phaserVertexAttribL1dEXT
#define glVertexAttribL1dv phaserVertexAttribL1dv
#define glVertexAttribL1dvEXT phaserVertexAttribL1dvEXT
#define glVertexAttribL1i64NV phaserVertexAttribL1i64NV
#define glVertexAttribL1i64vNV phaserVertexAttribL1i64vNV
#define glVertexAttribL1ui64ARB phaserVertexAttribL1ui64ARB
#define glVertexAttribL1ui64NV phaserVertexAttribL1ui64NV
#define glVertexAttribL1ui64vARB phaserVertexAttribL1ui64vARB
#define glVertexAttribL1ui64vNV phaserVertexAttribL1ui64vNV
#define glVertexAttribL2d phaserVertexAttribL2d
#define glVertexAttribL2dEXT phaserVertexAttribL2dEXT
#define glVertexAttribL2dv phaserVertexAttribL2dv
#define glVertexAttribL2dvEXT phaserVertexAttribL2dvEXT
#define glVertexAttribL2i64NV phaserVertexAttribL2i64NV
#define glVertexAttribL2i64vNV phaserVertexAttribL2i64vNV
#define glVertexAttribL2ui64NV phaserVertexAttribL2ui64NV
#define glVertexAttribL2ui64vNV phaserVertexAttribL2ui64vNV
#define glVertexAttribL3d phaserVertexAttribL3d
#define glVertexAttribL3dEXT phaserVertexAttribL3dEXT
#define glVertexAttribL3dv phaserVertexAttribL3dv
#define glVertexAttribL3dvEXT phaserVertexAttribL3dvEXT
#define glVertexAttribL3i64NV phaserVertexAttribL3i64NV
#define glVertexAttribL3i64vNV phaserVertexAttribL3i64vNV
#define glVertexAttribL3ui64NV phaserVertexAttribL3ui64NV
#define glVertexAttribL3ui64vNV phaserVertexAttribL3ui64vNV
#define glVertexAttribL4d phaserVertexAttribL4d
#define glVertexAttribL4dEXT phaserVertexAttribL4dEXT
#define glVertexAttribL4dv phaserVertexAttribL4dv
#define glVertexAttribL4dvEXT phaserVertexAttribL4dvEXT
#define glVertexAttribL4i64NV phaserVertexAttribL4i64NV
#define glVertexAttribL4i64vNV phaserVertexAttribL4i64vNV
#define glVertexAttribL4ui64NV phaserVertexAttribL4ui64NV
#define glVertexAttribL4ui64vNV phaserVertexAttribL4ui64vNV
#define glVertexAttribLFormat phaserVertexAttribLFormat
#define glVertexAttribLFormatNV phaserVertexAttribLFormatNV
#define glVertexAttribLPointer phaserVertexAttribLPointer
#define glVertexAttribLPointerEXT phaserVertexAttribLPointerEXT
#define glVertexAttribP1ui phaserVertexAttribP1ui
#define glVertexAttribP1uiv phaserVertexAttribP1uiv
#define glVertexAttribP2ui phaserVertexAttribP2ui
#define glVertexAttribP2uiv phaserVertexAttribP2uiv
#define glVertexAttribP3ui phaserVertexAttribP3ui
#define glVertexAttribP3uiv phaserVertexAttribP3uiv
#define glVertexAttribP4ui phaserVertexAttribP4ui
#define glVertexAttribP4uiv phaserVertexAttribP4uiv
#define glVertexAttribParameteriAMD phaserVertexAttribParameteriAMD
#define glVertexAttribPointer phaserVertexAttribPointer
#define glVertexAttribPointerARB phaserVertexAttribPointerARB
#define glVertexAttribPointerNV phaserVertexAttribPointerNV
#define glVertexAttribs1dvNV phaserVertexAttribs1dvNV
#define glVertexAttribs1fvNV phaserVertexAttribs1fvNV
#define glVertexAttribs1hvNV phaserVertexAttribs1hvNV
#define glVertexAttribs1svNV phaserVertexAttribs1svNV
#define glVertexAttribs2dvNV phaserVertexAttribs2dvNV
#define glVertexAttribs2fvNV phaserVertexAttribs2fvNV
#define glVertexAttribs2hvNV phaserVertexAttribs2hvNV
#define glVertexAttribs2svNV phaserVertexAttribs2svNV
#define glVertexAttribs3dvNV phaserVertexAttribs3dvNV
#define glVertexAttribs3fvNV phaserVertexAttribs3fvNV
#define glVertexAttribs3hvNV phaserVertexAttribs3hvNV
#define glVertexAttribs3svNV phaserVertexAttribs3svNV
#define glVertexAttribs4dvNV phaserVertexAttribs4dvNV
#define glVertexAttribs4fvNV phaserVertexAttribs4fvNV
#define glVertexAttribs4hvNV phaserVertexAttribs4hvNV
#define glVertexAttribs4svNV phaserVertexAttribs4svNV
#define glVertexAttribs4ubvNV phaserVertexAttribs4ubvNV
#define glVertexBindingDivisor phaserVertexBindingDivisor
#define glVertexBlendARB phaserVertexBlendARB
#define glVertexBlendEnvfATI phaserVertexBlendEnvfATI
#define glVertexBlendEnviATI phaserVertexBlendEnviATI
#define glVertexFormatNV phaserVertexFormatNV
#define glVertexP2ui phaserVertexP2ui
#define glVertexP2uiv phaserVertexP2uiv
#define glVertexP3ui phaserVertexP3ui
#define glVertexP3uiv phaserVertexP3uiv
#define glVertexP4ui phaserVertexP4ui
#define glVertexP4uiv phaserVertexP4uiv
#define glVertexPointer phaserVertexPointer
#define glVertexPointerEXT phaserVertexPointerEXT
#define glVertexPointerListIBM phaserVertexPointerListIBM
#define glVertexPointervINTEL phaserVertexPointervINTEL
#define glVertexStream1dATI phaserVertexStream1dATI
#define glVertexStream1dvATI phaserVertexStream1dvATI
#define glVertexStream1fATI phaserVertexStream1fATI
#define glVertexStream1fvATI phaserVertexStream1fvATI
#define glVertexStream1iATI phaserVertexStream1iATI
#define glVertexStream1ivATI phaserVertexStream1ivATI
#define glVertexStream1sATI phaserVertexStream1sATI
#define glVertexStream1svATI phaserVertexStream1svATI
#define glVertexStream2dATI phaserVertexStream2dATI
#define glVertexStream2dvATI phaserVertexStream2dvATI
#define glVertexStream2fATI phaserVertexStream2fATI
#define glVertexStream2fvATI phaserVertexStream2fvATI
#define glVertexStream2iATI phaserVertexStream2iATI
#define glVertexStream2ivATI phaserVertexStream2ivATI
#define glVertexStream2sATI phaserVertexStream2sATI
#define glVertexStream2svATI phaserVertexStream2svATI
#define glVertexStream3dATI phaserVertexStream3dATI
#define glVertexStream3dvATI phaserVertexStream3dvATI
#define glVertexStream3fATI phaserVertexStream3fATI
#define glVertexStream3fvATI phaserVertexStream3fvATI
#define glVertexStream3iATI phaserVertexStream3iATI
#define glVertexStream3ivATI phaserVertexStream3ivATI
#define glVertexStream3sATI phaserVertexStream3sATI
#define glVertexStream3svATI phaserVertexStream3svATI
#define glVertexStream4dATI phaserVertexStream4dATI
#define glVertexStream4dvATI phaserVertexStream4dvATI
#define glVertexStream4fATI phaserVertexStream4fATI
#define glVertexStream4fvATI phaserVertexStream4fvATI
#define glVertexStream4iATI phaserVertexStream4iATI
#define glVertexStream4ivATI phaserVertexStream4ivATI
#define glVertexStream4sATI phaserVertexStream4sATI
#define glVertexStream4svATI phaserVertexStream4svATI
#define glVertexWeightPointerEXT phaserVertexWeightPointerEXT
#define glVertexWeightfEXT phaserVertexWeightfEXT
#define glVertexWeightfvEXT phaserVertexWeightfvEXT
#define glVertexWeighthNV phaserVertexWeighthNV
#define glVertexWeighthvNV phaserVertexWeighthvNV
#define glVideoCaptureNV phaserVideoCaptureNV
#define glVideoCaptureStreamParameterdvNV phaserVideoCaptureStreamParameterdvNV
#define glVideoCaptureStreamParameterfvNV phaserVideoCaptureStreamParameterfvNV
#define glVideoCaptureStreamParameterivNV phaserVideoCaptureStreamParameterivNV
#define glViewport phaserViewport
#define glViewportArrayv phaserViewportArrayv
#define glViewportArrayvNV phaserViewportArrayvNV
#define glViewportArrayvOES phaserViewportArrayvOES
#define glViewportIndexedf phaserViewportIndexedf
#define glViewportIndexedfNV phaserViewportIndexedfNV
#define glViewportIndexedfOES phaserViewportIndexedfOES
#define glViewportIndexedfv phaserViewportIndexedfv
#define glViewportIndexedfvNV phaserViewportIndexedfvNV
#define glViewportIndexedfvOES phaserViewportIndexedfvOES
#define glViewportPositionWScaleNV phaserViewportPositionWScaleNV
#define glViewportSwizzleNV phaserViewportSwizzleNV
#define glWaitSemaphoreEXT phaserWaitSemaphoreEXT
#define glWaitSync phaserWaitSync
#define glWaitSyncAPPLE phaserWaitSyncAPPLE
#define glWaitVkSemaphoreNV phaserWaitVkSemaphoreNV
#define glWeightPathsNV phaserWeightPathsNV
#define glWeightPointerARB phaserWeightPointerARB
#define glWeightPointerOES phaserWeightPointerOES
#define glWeightbvARB phaserWeightbvARB
#define glWeightdvARB phaserWeightdvARB
#define glWeightfvARB phaserWeightfvARB
#define glWeightivARB phaserWeightivARB
#define glWeightsvARB phaserWeightsvARB
#define glWeightubvARB phaserWeightubvARB
#define glWeightuivARB phaserWeightuivARB
#define glWeightusvARB phaserWeightusvARB
#define glWindowPos2d phaserWindowPos2d
#define glWindowPos2dARB phaserWindowPos2dARB
#define glWindowPos2dMESA phaserWindowPos2dMESA
#define glWindowPos2dv phaserWindowPos2dv
#define glWindowPos2dvARB phaserWindowPos2dvARB
#define glWindowPos2dvMESA phaserWindowPos2dvMESA
#define glWindowPos2f phaserWindowPos2f
#define glWindowPos2fARB phaserWindowPos2fARB
#define glWindowPos2fMESA phaserWindowPos2fMESA
#define glWindowPos2fv phaserWindowPos2fv
#define glWindowPos2fvARB phaserWindowPos2fvARB
#define glWindowPos2fvMESA phaserWindowPos2fvMESA
#define glWindowPos2i phaserWindowPos2i
#define glWindowPos2iARB phaserWindowPos2iARB
#define glWindowPos2iMESA phaserWindowPos2iMESA
#define glWindowPos2iv phaserWindowPos2iv
#define glWindowPos2ivARB phaserWindowPos2ivARB
#define glWindowPos2ivMESA phaserWindowPos2ivMESA
#define glWindowPos2s phaserWindowPos2s
#define glWindowPos2sARB phaserWindowPos2sARB
#define glWindowPos2sMESA phaserWindowPos2sMESA
#define glWindowPos2sv phaserWindowPos2sv
#define glWindowPos2svARB phaserWindowPos2svARB
#define glWindowPos2svMESA phaserWindowPos2svMESA
#define glWindowPos3d phaserWindowPos3d
#define glWindowPos3dARB phaserWindowPos3dARB
#define glWindowPos3dMESA phaserWindowPos3dMESA
#define glWindowPos3dv phaserWindowPos3dv
#define glWindowPos3dvARB phaserWindowPos3dvARB
#define glWindowPos3dvMESA phaserWindowPos3dvMESA
#define glWindowPos3f phaserWindowPos3f
#define glWindowPos3fARB phaserWindowPos3fARB
#define glWindowPos3fMESA phaserWindowPos3fMESA
#define glWindowPos3fv phaserWindowPos3fv
#define glWindowPos3fvARB phaserWindowPos3fvARB
#define glWindowPos3fvMESA phaserWindowPos3fvMESA
#define glWindowPos3i phaserWindowPos3i
#define glWindowPos3iARB phaserWindowPos3iARB
#define glWindowPos3iMESA phaserWindowPos3iMESA
#define glWindowPos3iv phaserWindowPos3iv
#define glWindowPos3ivARB phaserWindowPos3ivARB
#define glWindowPos3ivMESA phaserWindowPos3ivMESA
#define glWindowPos3s phaserWindowPos3s
#define glWindowPos3sARB phaserWindowPos3sARB
#define glWindowPos3sMESA phaserWindowPos3sMESA
#define glWindowPos3sv phaserWindowPos3sv
#define glWindowPos3svARB phaserWindowPos3svARB
#define glWindowPos3svMESA phaserWindowPos3svMESA
#define glWindowPos4dMESA phaserWindowPos4dMESA
#define glWindowPos4dvMESA phaserWindowPos4dvMESA
#define glWindowPos4fMESA phaserWindowPos4fMESA
#define glWindowPos4fvMESA phaserWindowPos4fvMESA
#define glWindowPos4iMESA phaserWindowPos4iMESA
#define glWindowPos4ivMESA phaserWindowPos4ivMESA
#define glWindowPos4sMESA phaserWindowPos4sMESA
#define glWindowPos4svMESA phaserWindowPos4svMESA
#define glWindowRectanglesEXT phaserWindowRectanglesEXT
#define glWriteMaskEXT phaserWriteMaskEXT


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* _PHASER_GL_H_ */
